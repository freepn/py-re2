name: ci

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master

jobs:
  python_wheels:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}
      PIP_DOWNLOAD_CACHE: ${{ github.workspace }}/../.pip_download_cache
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Add requirements
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions

    - name: Prepare compiler environment for Windows
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    # this is supposed to cache automatically
    - name: Install vcpkg plus packages
      uses: lukka/run-vcpkg@v6.0
      if: runner.os == 'Windows'
      with:
        vcpkgArguments: re2:x64-windows
        vcpkgGitCommitId: 066c6fd712a3b7015388de644e44faf9774f3641

    - name: Install macos deps with brew
      if: runner.os == 'macOS'
      run: |
        brew install -s re2
        brew install ninja

    - name: Install Ubuntu build deps
      if: runner.os == 'Linux'
      run: |
        sudo apt-get -qq update
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository -y -s ppa:nerdboy/embedded
        sudo apt-get install -y pybind11-dev libre2-dev ninja-build

    # This points the extension builder at the vcpkg toolchain file
    - name: Set Windows environment variables
      if: runner.os == 'Windows'
      run: |
        echo "CMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV

    - name: Test in place
      run: |
        tox -e py
    - name: Install and test
      run: |
        tox -e dev
    - name: Build dist pkgs
      run: |
        tox -e deploy
    - name: Test wheels
      run: |
        tox -e check

    - name: Upload artifacts
      if: runner.os != 'Windows'
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: ./dist/*.whl

  check_artifacts:
    name: Check artifacts are correct
    needs: [python_wheels]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: wheels

      - name: Check number of downloaded artifacts
        run: .github/workflows/wheel-check.sh 8
