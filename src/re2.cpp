/* Generated by Cython 0.29.21 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_21"
#define CYTHON_HEX_VERSION 0x001D15F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__re2
#define __PYX_HAVE_API__re2
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus > 199711L
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include <string.h>
#include <string>
#include "re2/stringpiece.h"
#include "re2/re2.h"
#include "_re2macros.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "compile.pxi",
  "pattern.pxi",
  "match.pxi",
  "stringsource",
  "re2.pyx",
};
/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif


/*--- Type declarations ---*/
struct __pyx_obj_3re2_Pattern;
struct __pyx_obj_3re2_Match;
struct __pyx_obj_3re2___pyx_scope_struct___finditer;

/* "pattern.pxi":1
 * cdef class Pattern:             # <<<<<<<<<<<<<<
 *     cdef readonly object pattern  # original pattern in Python format
 *     cdef readonly int flags
 */
struct __pyx_obj_3re2_Pattern {
  PyObject_HEAD
  struct __pyx_vtabstruct_3re2_Pattern *__pyx_vtab;
  PyObject *pattern;
  int flags;
  int groups;
  PyObject *groupindex;
  PyObject *__weakref__;
  int encoded;
  re2::RE2 *re_pattern;
};


/* "match.pxi":1
 * cdef class Match:             # <<<<<<<<<<<<<<
 *     cdef readonly Pattern re
 *     cdef readonly object string
 */
struct __pyx_obj_3re2_Match {
  PyObject_HEAD
  struct __pyx_vtabstruct_3re2_Match *__pyx_vtab;
  struct __pyx_obj_3re2_Pattern *re;
  PyObject *string;
  int pos;
  int endpos;
  PyObject *regs;
  re2::StringPiece *matches;
  int encoded;
  int nmatches;
  int _lastindex;
  PyObject *_groups;
  PyObject *_named_groups;
};


/* "pattern.pxi":242
 *         return result
 * 
 *     def _finditer(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         cdef char * cstring
 *         cdef Py_ssize_t size
 */
struct __pyx_obj_3re2___pyx_scope_struct___finditer {
  PyObject_HEAD
  Py_buffer __pyx_v_buf;
  PyObject *__pyx_v_bytestr;
  int __pyx_v_cpos;
  char *__pyx_v_cstring;
  int __pyx_v_encoded;
  int __pyx_v_endpos;
  struct __pyx_obj_3re2_Match *__pyx_v_m;
  int __pyx_v_pos;
  int __pyx_v_retval;
  struct __pyx_obj_3re2_Pattern *__pyx_v_self;
  Py_ssize_t __pyx_v_size;
  re2::StringPiece *__pyx_v_sp;
  PyObject *__pyx_v_string;
  int __pyx_v_upos;
};



/* "pattern.pxi":1
 * cdef class Pattern:             # <<<<<<<<<<<<<<
 *     cdef readonly object pattern  # original pattern in Python format
 *     cdef readonly int flags
 */

struct __pyx_vtabstruct_3re2_Pattern {
  PyObject *(*_search)(struct __pyx_obj_3re2_Pattern *, PyObject *, int, int, RE2::Anchor);
  PyObject *(*_subn)(struct __pyx_obj_3re2_Pattern *, PyObject *, PyObject *, int, int *);
  PyObject *(*_subn_callback)(struct __pyx_obj_3re2_Pattern *, PyObject *, PyObject *, int, int *);
  PyObject *(*_subn_expand)(struct __pyx_obj_3re2_Pattern *, PyObject *, PyObject *, int, int *);
};
static struct __pyx_vtabstruct_3re2_Pattern *__pyx_vtabptr_3re2_Pattern;


/* "match.pxi":1
 * cdef class Match:             # <<<<<<<<<<<<<<
 *     cdef readonly Pattern re
 *     cdef readonly object string
 */

struct __pyx_vtabstruct_3re2_Match {
  PyObject *(*_init_groups)(struct __pyx_obj_3re2_Match *);
  PyObject *(*_group)(struct __pyx_obj_3re2_Match *, PyObject *);
  PyObject *(*_groupdict)(struct __pyx_obj_3re2_Match *);
  PyObject *(*_expand)(struct __pyx_obj_3re2_Match *, PyObject *, PyObject *);
  PyObject *(*_make_spans)(struct __pyx_obj_3re2_Match *, char *, int, int *, int *);
  PyObject *(*_convert_spans)(struct __pyx_obj_3re2_Match *, PyObject *, char *, int, int *, int *);
};
static struct __pyx_vtabstruct_3re2_Match *__pyx_vtabptr_3re2_Match;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* ByteArrayAppend.proto */
static CYTHON_INLINE int __Pyx_PyByteArray_Append(PyObject* bytearray, int value);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* IterNext.proto */
#define __Pyx_PyIter_Next(obj) __Pyx_PyIter_Next2(obj, NULL)
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject *, PyObject *);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* CallableCheck.proto */
#if CYTHON_USE_TYPE_SLOTS && PY_MAJOR_VERSION >= 3
#define __Pyx_PyCallable_Check(obj)   ((obj)->ob_type->tp_call != NULL)
#else
#define __Pyx_PyCallable_Check(obj)   PyCallable_Check(obj)
#endif

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_bytearray.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_bytearray(
         PyObject* string, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        PyByteArray_AS_STRING(string), PyByteArray_GET_SIZE(string),
        start, stop, encoding, errors, decode_func);
}

/* decode_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_bytes(
         PyObject* string, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        PyBytes_AS_STRING(string), PyBytes_GET_SIZE(string),
        start, stop, encoding, errors, decode_func);
}

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* SliceTupleAndList.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
#else
#define __Pyx_PyList_GetSlice(seq, start, stop)   PySequence_GetSlice(seq, start, stop)
#define __Pyx_PyTuple_GetSlice(seq, start, stop)  PySequence_GetSlice(seq, start, stop)
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* ByteArrayAppendObject.proto */
static CYTHON_INLINE int __Pyx_PyByteArray_AppendObject(PyObject* bytearray, PyObject* value);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AndObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AndObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAnd(op1, op2) : PyNumber_And(op1, op2))
#endif

/* UnicodeAsUCS4.proto */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject*);

/* object_ord.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyObject_Ord(c)\
    (likely(PyUnicode_Check(c)) ? (long)__Pyx_PyUnicode_AsPy_UCS4(c) : __Pyx__PyObject_Ord(c))
#else
#define __Pyx_PyObject_Ord(c) __Pyx__PyObject_Ord(c)
#endif
static long __Pyx__PyObject_Ord(PyObject* c);

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_char(unsigned char value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ptrdiff_t(ptrdiff_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* BytesContains.proto */
static CYTHON_INLINE int __Pyx_BytesContains(PyObject* bytes, char character);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_3re2_7Pattern__search(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos, RE2::Anchor __pyx_v_anchoring); /* proto*/
static PyObject *__pyx_f_3re2_7Pattern__subn(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, int __pyx_v_count, int *__pyx_v_num_repl); /* proto*/
static PyObject *__pyx_f_3re2_7Pattern__subn_callback(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_callback, PyObject *__pyx_v_string, int __pyx_v_count, int *__pyx_v_num_repl); /* proto*/
static PyObject *__pyx_f_3re2_7Pattern__subn_expand(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, int __pyx_v_count, int *__pyx_v_num_repl); /* proto*/
static PyObject *__pyx_f_3re2_5Match__init_groups(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_3re2_5Match__group(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_groupnum); /* proto*/
static PyObject *__pyx_f_3re2_5Match__groupdict(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_3re2_5Match__expand(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_templ, PyObject *__pyx_v_result); /* proto*/
static PyObject *__pyx_f_3re2_5Match__make_spans(struct __pyx_obj_3re2_Match *__pyx_v_self, char *__pyx_v_cstring, int __pyx_v_size, int *__pyx_v_cpos, int *__pyx_v_upos); /* proto*/
static PyObject *__pyx_f_3re2_5Match__convert_spans(CYTHON_UNUSED struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_spans, char *__pyx_v_cstring, int __pyx_v_size, int *__pyx_v_cpos, int *__pyx_v_upos); /* proto*/

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.version' */

/* Module declarations from 're2' */
static PyTypeObject *__pyx_ptype_3re2_Pattern = 0;
static PyTypeObject *__pyx_ptype_3re2_Match = 0;
static PyTypeObject *__pyx_ptype_3re2___pyx_scope_struct___finditer = 0;
static int __pyx_v_3re2__I;
static int __pyx_v_3re2__M;
static int __pyx_v_3re2__S;
static int __pyx_v_3re2__U;
static int __pyx_v_3re2__X;
static int __pyx_v_3re2__L;
static int __pyx_v_3re2_current_notification;
static int __pyx_f_3re2_ishex(unsigned char); /*proto*/
static int __pyx_f_3re2_isoct(unsigned char); /*proto*/
static int __pyx_f_3re2_isdigit(unsigned char); /*proto*/
static int __pyx_f_3re2_isident(unsigned char); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_3re2_cpp_to_bytes(std::string); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_3re2_cpp_to_unicode(std::string); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_3re2_char_to_unicode(char const *, int); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_3re2_unicode_to_bytes(PyObject *, int *, int); /*proto*/
static CYTHON_INLINE int __pyx_f_3re2_pystring_to_cstring(PyObject *, char **, Py_ssize_t *, Py_buffer *); /*proto*/
static CYTHON_INLINE void __pyx_f_3re2_release_cstring(Py_buffer *); /*proto*/
static PyObject *__pyx_f_3re2_utf8indices(char *, int, int *, int *); /*proto*/
static void __pyx_f_3re2_unicodeindices(std::map<int,int>  &, char *, int, int *, int *); /*proto*/
#define __Pyx_MODULE_NAME "re2"
extern int __pyx_module_is_main_re2;
int __pyx_module_is_main_re2 = 0;

/* Implementation of 're2' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_IndexError;
static const char __pyx_k_I[] = "I";
static const char __pyx_k_L[] = "L";
static const char __pyx_k_M[] = "M";
static const char __pyx_k_S[] = "S";
static const char __pyx_k_U[] = "U";
static const char __pyx_k_X[] = "X";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_z[] = "\\z";
static const char __pyx_k__4[] = "(?";
static const char __pyx_k__5[] = ")";
static const char __pyx_k__7[] = "";
static const char __pyx_k__8[] = "\\";
static const char __pyx_k__9[] = ", ";
static const char __pyx_k_it[] = "it";
static const char __pyx_k_re[] = "re";
static const char __pyx_k_000[] = "\\000";
static const char __pyx_k_010[] = "\\010";
static const char __pyx_k__13[] = ">";
static const char __pyx_k__16[] = "\000";
static const char __pyx_k_all[] = "__all__";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_err[] = "err";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_re2[] = "re2";
static const char __pyx_k_sub[] = "sub";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_uni[] = "uni";
static const char __pyx_k_P_Nd[] = "\\P{Nd}";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_find[] = "find";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_opts[] = "opts";
static const char __pyx_k_p_Nd[] = "\\p{Nd}";
static const char __pyx_k_repl[] = "repl";
static const char __pyx_k_repr[] = "__repr__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_span[] = "span";
static const char __pyx_k_subn[] = "subn";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_that[] = "that";
static const char __pyx_k_this[] = "this";
static const char __pyx_k_utf8[] = "utf8";
static const char __pyx_k_warn[] = "warn";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_DEBUG[] = "DEBUG";
static const char __pyx_k_Match[] = "Match";
static const char __pyx_k_cache[] = "_cache";
static const char __pyx_k_clear[] = "clear";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_group[] = "group";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_level[] = "level";
static const char __pyx_k_match[] = "match";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_purge[] = "purge";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_s_p_Z[] = "\\s\\p{Z}";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_DOTALL[] = "DOTALL";
static const char __pyx_k_LOCALE[] = "LOCALE";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_endpos[] = "endpos";
static const char __pyx_k_escape[] = "escape";
static const char __pyx_k_extend[] = "extend";
static const char __pyx_k_groups[] = "groups";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_p_Nd_2[] = "[^\\p{Nd}]";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_search[] = "search";
static const char __pyx_k_string[] = "string";
static const char __pyx_k_Pattern[] = "Pattern";
static const char __pyx_k_UNICODE[] = "UNICODE";
static const char __pyx_k_VERBOSE[] = "VERBOSE";
static const char __pyx_k_VERSION[] = "VERSION";
static const char __pyx_k_compile[] = "_compile";
static const char __pyx_k_cstring[] = "cstring";
static const char __pyx_k_default[] = "default";
static const char __pyx_k_encoded[] = "encoded";
static const char __pyx_k_findall[] = "findall";
static const char __pyx_k_isalnum[] = "isalnum";
static const char __pyx_k_isdigit[] = "isdigit";
static const char __pyx_k_match_2[] = ", match=";
static const char __pyx_k_max_mem[] = "max_mem";
static const char __pyx_k_pattern[] = "pattern";
static const char __pyx_k_popitem[] = "popitem";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_re2_pyx[] = "re2.pyx";
static const char __pyx_k_s_p_Z_2[] = "[\\s\\p{Z}]";
static const char __pyx_k_s_p_Z_3[] = "[^\\s\\p{Z}]";
static const char __pyx_k_scanner[] = "scanner";
static const char __pyx_k_MAXCACHE[] = "_MAXCACHE";
static const char __pyx_k_cachekey[] = "cachekey";
static const char __pyx_k_contains[] = "contains";
static const char __pyx_k_fallback[] = "fallback";
static const char __pyx_k_finditer[] = "_finditer";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_maxsplit[] = "maxsplit";
static const char __pyx_k_newflags[] = "newflags";
static const char __pyx_k_p_L_p_Nd[] = "_\\p{L}\\p{Nd}";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_MULTILINE[] = "MULTILINE";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_compile_2[] = "compile";
static const char __pyx_k_error_msg[] = "error_msg";
static const char __pyx_k_fullmatch[] = "fullmatch";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_pattern_2[] = "_pattern";
static const char __pyx_k_pypattern[] = "pypattern";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_IGNORECASE[] = "IGNORECASE";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_RegexError[] = "RegexError";
static const char __pyx_k_SREPattern[] = "SREPattern";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_cache_repl[] = "_cache_repl";
static const char __pyx_k_error_code[] = "error_code";
static const char __pyx_k_finditer_2[] = "finditer";
static const char __pyx_k_groupindex[] = "groupindex";
static const char __pyx_k_num_groups[] = "num_groups";
static const char __pyx_k_p_L_p_Nd_2[] = "[_\\p{L}\\p{Nd}]";
static const char __pyx_k_p_L_p_Nd_3[] = "[^_\\p{L}\\p{Nd}]";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_re_pattern[] = "re_pattern";
static const char __pyx_k_VERSION_HEX[] = "VERSION_HEX";
static const char __pyx_k_compile_pxi[] = "compile.pxi";
static const char __pyx_k_pattern_pxi[] = "pattern.pxi";
static const char __pyx_k_re2_compile[] = "re2.compile(";
static const char __pyx_k_dump_pattern[] = "_dump_pattern";
static const char __pyx_k_named_groups[] = "named_groups";
static const char __pyx_k_no_such_group[] = "no such group ";
static const char __pyx_k_re2_compile_r[] = "re2.compile(%r)";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_pattern_object[] = "pattern_object";
static const char __pyx_k_PythonRePattern[] = "PythonRePattern";
static const char __pyx_k_prepare_pattern[] = "_prepare_pattern";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_FALLBACK_QUIETLY[] = "FALLBACK_QUIETLY";
static const char __pyx_k_FALLBACK_WARNING[] = "FALLBACK_WARNING";
static const char __pyx_k_available_groups[] = "; available groups: ";
static const char __pyx_k_original_pattern[] = "original_pattern";
static const char __pyx_k_Pattern__finditer[] = "Pattern._finditer";
static const char __pyx_k_FALLBACK_EXCEPTION[] = "FALLBACK_EXCEPTION";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_missing_group_name[] = "missing group name";
static const char __pyx_k_PythonRePattern_sub[] = "PythonRePattern.sub";
static const char __pyx_k_PythonRePattern_subn[] = "PythonRePattern.subn";
static const char __pyx_k_PythonRePattern_count[] = "PythonRePattern.count";
static const char __pyx_k_PythonRePattern_match[] = "PythonRePattern.match";
static const char __pyx_k_PythonRePattern_split[] = "PythonRePattern.split";
static const char __pyx_k_re2_Match_object_span[] = "<re2.Match object; span=";
static const char __pyx_k_PythonRePattern___init[] = "PythonRePattern.__init__";
static const char __pyx_k_PythonRePattern___repr[] = "PythonRePattern.__repr__";
static const char __pyx_k_PythonRePattern_search[] = "PythonRePattern.search";
static const char __pyx_k_BackreferencesException[] = "BackreferencesException";
static const char __pyx_k_PythonRePattern_findall[] = "PythonRePattern.findall";
static const char __pyx_k_PythonRePattern_scanner[] = "PythonRePattern.scanner";
static const char __pyx_k_compile_locals_fallback[] = "_compile.<locals>.fallback";
static const char __pyx_k_invalid_group_reference[] = "invalid group reference.";
static const char __pyx_k_re_LOCALE_not_supported[] = "re.LOCALE not supported";
static const char __pyx_k_unterminated_group_name[] = "unterminated group name";
static const char __pyx_k_PythonRePattern___reduce[] = "PythonRePattern.__reduce__";
static const char __pyx_k_PythonRePattern_contains[] = "PythonRePattern.contains";
static const char __pyx_k_PythonRePattern_finditer[] = "PythonRePattern.finditer";
static const char __pyx_k_CharClassProblemException[] = "CharClassProblemException";
static const char __pyx_k_PythonRePattern_fullmatch[] = "PythonRePattern.fullmatch";
static const char __pyx_k_expected_string_or_buffer[] = "expected string or buffer";
static const char __pyx_k_set_fallback_notification[] = "set_fallback_notification";
static const char __pyx_k_bad_character_in_group_name[] = "bad character in group name";
static const char __pyx_k_Backreferences_not_supported[] = "Backreferences not supported";
static const char __pyx_k_W_and_S_not_supported_inside_ch[] = "\\W and \\S not supported inside character classes";
static const char __pyx_k_can_t_use_a_string_pattern_on_a[] = "can't use a string pattern on a bytes-like object";
static const char __pyx_k_cannot_expand_bytes_template_on[] = "cannot expand bytes template on unicode pattern";
static const char __pyx_k_A_wrapper_for_re_Pattern_to_supp[] = "A wrapper for re.Pattern to support the extra methods defined by re2\n    (contains, count).";
static const char __pyx_k_Cannot_process_flags_argument_wi[] = "Cannot process flags argument with a compiled pattern";
static const char __pyx_k_Regular_expressions_using_Google[] = "Regular expressions using Google's RE2 engine.\n\nCompared to Python's ``re``, the RE2 engine compiles regular expressions to\ndeterministic finite automata, which guarantees linear-time behavior.\n\nIntended as a drop-in replacement for ``re``. Unicode is supported by encoding\nto UTF-8, and bytes strings are treated as UTF-8 when the UNICODE flag is given.\nFor best performance, work with UTF-8 encoded bytes strings.\n\nRegular expressions that are not compatible with RE2 are processed with\nfallback to ``re``. Examples of features not supported by RE2:\n\n    - lookahead assertions ``(?!...)``\n    - backreferences (``\\\\n`` in search pattern)\n    - \\W and \\S not supported inside character classes\n\nOn the other hand, unicode character classes are supported (e.g., ``\\p{Greek}``).\nSyntax reference: https://github.com/google/re2/wiki/Syntax\n\nWhat follows is a reference for the regular expression syntax supported by this\nmodule (i.e., without requiring fallback to `re`).\n\nRegular expressions can contain both special and ordinary characters.\nMost ordinary characters, like \"A\", \"a\", or \"0\", are the simplest\nregular expressions; they simply match themselves.\n\nThe special characters are::\n\n    \".\"      Matches any character except a newline.\n    \"^\"      Matches the start of the string.\n    \"$\"      Matches the end of the string or just before the newline at\n             the end of the string.\n    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.\n             Greedy means that it will match as many repetitions as possible.\n    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.\n    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.\n    *?,+?,\077\077 Non-greedy versions of the previous three special characters.\n    {m,n}    Matches from m to n repetitions of the preceding RE.\n    {m,n}?   Non-greedy version of the above.\n    \"\\\\\"     Either escapes special characters or signals a s""pecial sequence.\n    []       Indicates a set of characters.\n             A \"^\" as the first character indicates a complementing set.\n    \"|\"      A|B, creates an RE that will match either A or B.\n    (...)    Matches the RE inside the parentheses.\n             The contents can be retrieved or matched later in the string.\n    (?:...)  Non-grouping version of regular parentheses.\n    (?imsux) Set the I, M, S, U, or X flag for the RE (see below).\n\nThe special sequences consist of \"\\\\\" and a character from the list\nbelow.  If the ordinary character is not on the list, then the\nresulting RE will match the second character::\n\n    \\A         Matches only at the start of the string.\n    \\Z         Matches only at the end of the string.\n    \\b         Matches the empty string, but only at the start or end of a word.\n    \\B         Matches the empty string, but not at the start or end of a word.\n    \\d         Matches any decimal digit.\n    \\D         Matches any non-digit character.\n    \\s         Matches any whitespace character.\n    \\S         Matches any non-whitespace character.\n    \\w         Matches any alphanumeric character.\n    \\W         Matches the complement of \\w.\n    \\\\         Matches a literal backslash.\n    \\pN        Unicode character class (one-letter name)\n    \\p{Greek}  Unicode character class\n    \\PN        negated Unicode character class (one-letter name)\n    \\P{Greek}  negated Unicode character class\n\nThis module exports the following functions::\n\n    count     Count all occurrences of a pattern in a string.\n    match     Match a regular expression pattern to the beginning of a string.\n    fullmatch Match a regular expression pattern to all of a string.\n    search    Search a string for a pattern and return Match object.\n    contains  Same as search, but only return bool.\n    sub       Substitute occurrences of a pattern found in a string.\n    subn      Same as sub, but also return the num""ber of substitutions made.\n    split     Split a string by the occurrences of a pattern.\n    findall   Find all occurrences of a pattern in a string.\n    finditer  Return an iterator yielding a match object for each match.\n    compile   Compile a pattern into a RegexObject.\n    purge     Clear the regular expression cache.\n    escape    Backslash all non-alphanumerics in a string.\n\nSome of the functions in this module takes flags as optional parameters::\n\n    A  ASCII       Make \\w, \\W, \\b, \\B, \\d, \\D match the corresponding ASCII\n                   character categories (rather than the whole Unicode\n                   categories, which is the default).\n    I  IGNORECASE  Perform case-insensitive matching.\n    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)\n                   as well as the string.\n                   \"$\" matches the end of lines (before a newline) as well\n                   as the end of the string.\n    S  DOTALL      \".\" matches any character at all, including the newline.\n    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.\n    U  UNICODE     Enable Unicode character classes and make \\w, \\W, \\b, \\B,\n                   Unicode-aware (default for unicode patterns).\n\nThis module also defines an exception 'RegexError' (also available under the\nalias 'error').\n\n";
static const char __pyx_k_Search_pattern_contains_backrefe[] = "Search pattern contains backreferences.";
static const char __pyx_k_Search_pattern_contains_unsuppor[] = "Search pattern contains unsupported character class.";
static const char __pyx_k_This_function_expects_a_valid_no[] = "This function expects a valid notification level.";
static const char __pyx_k_WARNING_Using_re_module_Reason_s[] = "WARNING: Using re module. Reason: %s";
static const char __pyx_k_can_t_use_a_bytes_pattern_on_a_s[] = "can't use a bytes pattern on a string-like object";
static const char __pyx_k_cannot_expand_unicode_template_o[] = "cannot expand unicode template on bytes pattern";
static const char __pyx_k_self_matches_cannot_be_converted[] = "self.matches cannot be converted to a Python object for pickling";
static const char __pyx_k_unexpected_end_of_regular_expres[] = "unexpected end of regular expression";
static PyObject *__pyx_kp_b_000;
static PyObject *__pyx_kp_u_000;
static PyObject *__pyx_kp_b_010;
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_kp_s_A_wrapper_for_re_Pattern_to_supp;
static PyObject *__pyx_n_s_BackreferencesException;
static PyObject *__pyx_n_u_BackreferencesException;
static PyObject *__pyx_kp_u_Backreferences_not_supported;
static PyObject *__pyx_kp_u_Cannot_process_flags_argument_wi;
static PyObject *__pyx_n_s_CharClassProblemException;
static PyObject *__pyx_n_u_CharClassProblemException;
static PyObject *__pyx_n_s_DEBUG;
static PyObject *__pyx_n_u_DEBUG;
static PyObject *__pyx_n_s_DOTALL;
static PyObject *__pyx_n_u_DOTALL;
static PyObject *__pyx_n_s_FALLBACK_EXCEPTION;
static PyObject *__pyx_n_u_FALLBACK_EXCEPTION;
static PyObject *__pyx_n_s_FALLBACK_QUIETLY;
static PyObject *__pyx_n_u_FALLBACK_QUIETLY;
static PyObject *__pyx_n_s_FALLBACK_WARNING;
static PyObject *__pyx_n_u_FALLBACK_WARNING;
static PyObject *__pyx_n_s_I;
static PyObject *__pyx_n_u_I;
static PyObject *__pyx_n_s_IGNORECASE;
static PyObject *__pyx_n_u_IGNORECASE;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_n_s_L;
static PyObject *__pyx_n_u_L;
static PyObject *__pyx_n_s_LOCALE;
static PyObject *__pyx_n_u_LOCALE;
static PyObject *__pyx_n_s_M;
static PyObject *__pyx_n_u_M;
static PyObject *__pyx_n_s_MAXCACHE;
static PyObject *__pyx_n_s_MULTILINE;
static PyObject *__pyx_n_u_MULTILINE;
static PyObject *__pyx_n_s_Match;
static PyObject *__pyx_n_u_Match;
static PyObject *__pyx_kp_b_P_Nd;
static PyObject *__pyx_n_s_Pattern;
static PyObject *__pyx_n_u_Pattern;
static PyObject *__pyx_n_s_Pattern__finditer;
static PyObject *__pyx_n_s_PythonRePattern;
static PyObject *__pyx_n_s_PythonRePattern___init;
static PyObject *__pyx_n_s_PythonRePattern___reduce;
static PyObject *__pyx_n_s_PythonRePattern___repr;
static PyObject *__pyx_n_s_PythonRePattern_contains;
static PyObject *__pyx_n_s_PythonRePattern_count;
static PyObject *__pyx_n_s_PythonRePattern_findall;
static PyObject *__pyx_n_s_PythonRePattern_finditer;
static PyObject *__pyx_n_s_PythonRePattern_fullmatch;
static PyObject *__pyx_n_s_PythonRePattern_match;
static PyObject *__pyx_n_s_PythonRePattern_scanner;
static PyObject *__pyx_n_s_PythonRePattern_search;
static PyObject *__pyx_n_s_PythonRePattern_split;
static PyObject *__pyx_n_s_PythonRePattern_sub;
static PyObject *__pyx_n_s_PythonRePattern_subn;
static PyObject *__pyx_n_s_RegexError;
static PyObject *__pyx_n_u_RegexError;
static PyObject *__pyx_n_s_S;
static PyObject *__pyx_n_u_S;
static PyObject *__pyx_n_s_SREPattern;
static PyObject *__pyx_n_u_SREPattern;
static PyObject *__pyx_kp_s_Search_pattern_contains_backrefe;
static PyObject *__pyx_kp_s_Search_pattern_contains_unsuppor;
static PyObject *__pyx_kp_u_This_function_expects_a_valid_no;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_U;
static PyObject *__pyx_n_u_U;
static PyObject *__pyx_n_s_UNICODE;
static PyObject *__pyx_n_u_UNICODE;
static PyObject *__pyx_n_s_VERBOSE;
static PyObject *__pyx_n_u_VERBOSE;
static PyObject *__pyx_n_s_VERSION;
static PyObject *__pyx_n_u_VERSION;
static PyObject *__pyx_n_s_VERSION_HEX;
static PyObject *__pyx_n_u_VERSION_HEX;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_u_WARNING_Using_re_module_Reason_s;
static PyObject *__pyx_kp_u_W_and_S_not_supported_inside_ch;
static PyObject *__pyx_n_s_X;
static PyObject *__pyx_n_u_X;
static PyObject *__pyx_kp_u__13;
static PyObject *__pyx_kp_b__16;
static PyObject *__pyx_kp_u__16;
static PyObject *__pyx_kp_b__4;
static PyObject *__pyx_kp_b__5;
static PyObject *__pyx_kp_u__5;
static PyObject *__pyx_kp_b__7;
static PyObject *__pyx_kp_u__7;
static PyObject *__pyx_kp_b__8;
static PyObject *__pyx_kp_u__8;
static PyObject *__pyx_kp_u__9;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_kp_u_available_groups;
static PyObject *__pyx_kp_u_bad_character_in_group_name;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_cache;
static PyObject *__pyx_n_s_cache_repl;
static PyObject *__pyx_n_s_cachekey;
static PyObject *__pyx_kp_u_can_t_use_a_bytes_pattern_on_a_s;
static PyObject *__pyx_kp_u_can_t_use_a_string_pattern_on_a;
static PyObject *__pyx_kp_u_cannot_expand_bytes_template_on;
static PyObject *__pyx_kp_u_cannot_expand_unicode_template_o;
static PyObject *__pyx_n_s_clear;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_compile;
static PyObject *__pyx_n_s_compile_2;
static PyObject *__pyx_n_u_compile_2;
static PyObject *__pyx_n_s_compile_locals_fallback;
static PyObject *__pyx_kp_s_compile_pxi;
static PyObject *__pyx_n_s_contains;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_u_count;
static PyObject *__pyx_n_s_cstring;
static PyObject *__pyx_n_u_d;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_default;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_dump_pattern;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_encoded;
static PyObject *__pyx_n_s_endpos;
static PyObject *__pyx_n_s_err;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_u_error;
static PyObject *__pyx_n_s_error_code;
static PyObject *__pyx_n_s_error_msg;
static PyObject *__pyx_n_s_escape;
static PyObject *__pyx_n_u_escape;
static PyObject *__pyx_kp_u_expected_string_or_buffer;
static PyObject *__pyx_n_s_extend;
static PyObject *__pyx_n_s_fallback;
static PyObject *__pyx_n_s_find;
static PyObject *__pyx_n_s_findall;
static PyObject *__pyx_n_u_findall;
static PyObject *__pyx_n_s_finditer;
static PyObject *__pyx_n_s_finditer_2;
static PyObject *__pyx_n_u_finditer_2;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_fullmatch;
static PyObject *__pyx_n_u_fullmatch;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_group;
static PyObject *__pyx_n_s_groupindex;
static PyObject *__pyx_n_s_groups;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_kp_u_invalid_group_reference;
static PyObject *__pyx_n_s_isalnum;
static PyObject *__pyx_n_s_isdigit;
static PyObject *__pyx_n_s_it;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_level;
static PyObject *__pyx_n_b_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_match;
static PyObject *__pyx_n_u_match;
static PyObject *__pyx_kp_u_match_2;
static PyObject *__pyx_n_s_max_mem;
static PyObject *__pyx_n_s_maxsplit;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_kp_u_missing_group_name;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_named_groups;
static PyObject *__pyx_n_s_newflags;
static PyObject *__pyx_kp_u_no_such_group;
static PyObject *__pyx_n_s_num_groups;
static PyObject *__pyx_n_s_opts;
static PyObject *__pyx_n_s_original_pattern;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_kp_b_p_L_p_Nd;
static PyObject *__pyx_kp_b_p_L_p_Nd_2;
static PyObject *__pyx_kp_b_p_L_p_Nd_3;
static PyObject *__pyx_kp_b_p_Nd;
static PyObject *__pyx_kp_b_p_Nd_2;
static PyObject *__pyx_n_s_pattern;
static PyObject *__pyx_n_s_pattern_2;
static PyObject *__pyx_n_s_pattern_object;
static PyObject *__pyx_kp_s_pattern_pxi;
static PyObject *__pyx_n_s_popitem;
static PyObject *__pyx_n_s_pos;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_prepare_pattern;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_purge;
static PyObject *__pyx_n_u_purge;
static PyObject *__pyx_n_s_pypattern;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_re;
static PyObject *__pyx_n_s_re2;
static PyObject *__pyx_kp_u_re2_Match_object_span;
static PyObject *__pyx_kp_u_re2_compile;
static PyObject *__pyx_kp_u_re2_compile_r;
static PyObject *__pyx_kp_s_re2_pyx;
static PyObject *__pyx_kp_u_re_LOCALE_not_supported;
static PyObject *__pyx_n_s_re_pattern;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_repl;
static PyObject *__pyx_n_s_repr;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_b_s;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_kp_b_s_p_Z;
static PyObject *__pyx_kp_b_s_p_Z_2;
static PyObject *__pyx_kp_b_s_p_Z_3;
static PyObject *__pyx_n_s_scanner;
static PyObject *__pyx_n_s_search;
static PyObject *__pyx_n_u_search;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_kp_s_self_matches_cannot_be_converted;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_set_fallback_notification;
static PyObject *__pyx_n_u_set_fallback_notification;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_span;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_u_split;
static PyObject *__pyx_n_s_string;
static PyObject *__pyx_n_s_sub;
static PyObject *__pyx_n_u_sub;
static PyObject *__pyx_n_s_subn;
static PyObject *__pyx_n_u_subn;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_that;
static PyObject *__pyx_n_s_this;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_kp_u_unexpected_end_of_regular_expres;
static PyObject *__pyx_n_s_uni;
static PyObject *__pyx_kp_u_unterminated_group_name;
static PyObject *__pyx_n_u_utf8;
static PyObject *__pyx_n_s_warn;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_kp_b_z;
static PyObject *__pyx_pf_3re2_compile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, int __pyx_v_flags, int __pyx_v_max_mem); /* proto */
static PyObject *__pyx_pf_3re2_8_compile_fallback(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_flags, PyObject *__pyx_v_error_msg); /* proto */
static PyObject *__pyx_pf_3re2_2_compile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, int __pyx_v_flags, int __pyx_v_max_mem); /* proto */
static PyObject *__pyx_pf_3re2_4_prepare_pattern(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_search(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_2match(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_4fullmatch(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_6contains(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_8count(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_10findall(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_12finditer(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_14_finditer(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_17split(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_maxsplit); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_19sub(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, int __pyx_v_count); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_21subn(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, int __pyx_v_count); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_23scanner(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_arg); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_25_dump_pattern(struct __pyx_obj_3re2_Pattern *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_27__repr__(struct __pyx_obj_3re2_Pattern *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_29__reduce__(struct __pyx_obj_3re2_Pattern *__pyx_v_self); /* proto */
static void __pyx_pf_3re2_7Pattern_31__dealloc__(struct __pyx_obj_3re2_Pattern *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_7pattern___get__(struct __pyx_obj_3re2_Pattern *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_5flags___get__(struct __pyx_obj_3re2_Pattern *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_6groups___get__(struct __pyx_obj_3re2_Pattern *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_10groupindex___get__(struct __pyx_obj_3re2_Pattern *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_15PythonRePattern___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_flags); /* proto */
static PyObject *__pyx_pf_3re2_15PythonRePattern_2contains(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_string); /* proto */
static PyObject *__pyx_pf_3re2_15PythonRePattern_4count(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_string, PyObject *__pyx_v_pos, PyObject *__pyx_v_endpos); /* proto */
static PyObject *__pyx_pf_3re2_15PythonRePattern_6findall(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_string, PyObject *__pyx_v_pos, PyObject *__pyx_v_endpos); /* proto */
static PyObject *__pyx_pf_3re2_15PythonRePattern_8finditer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_string, PyObject *__pyx_v_pos, PyObject *__pyx_v_endpos); /* proto */
static PyObject *__pyx_pf_3re2_15PythonRePattern_10fullmatch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_string, PyObject *__pyx_v_pos, PyObject *__pyx_v_endpos); /* proto */
static PyObject *__pyx_pf_3re2_15PythonRePattern_12match(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_string, PyObject *__pyx_v_pos, PyObject *__pyx_v_endpos); /* proto */
static PyObject *__pyx_pf_3re2_15PythonRePattern_14scanner(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_string, PyObject *__pyx_v_pos, PyObject *__pyx_v_endpos); /* proto */
static PyObject *__pyx_pf_3re2_15PythonRePattern_16search(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_string, PyObject *__pyx_v_pos, PyObject *__pyx_v_endpos); /* proto */
static PyObject *__pyx_pf_3re2_15PythonRePattern_18split(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_string, PyObject *__pyx_v_maxsplit); /* proto */
static PyObject *__pyx_pf_3re2_15PythonRePattern_20sub(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, PyObject *__pyx_v_count); /* proto */
static PyObject *__pyx_pf_3re2_15PythonRePattern_22subn(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, PyObject *__pyx_v_count); /* proto */
static PyObject *__pyx_pf_3re2_15PythonRePattern_24__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_15PythonRePattern_26__reduce__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_5Match_9lastindex___get__(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_5Match_9lastgroup___get__(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto */
static int __pyx_pf_3re2_5Match___init__(struct __pyx_obj_3re2_Match *__pyx_v_self, struct __pyx_obj_3re2_Pattern *__pyx_v_pattern_object, int __pyx_v_num_groups); /* proto */
static PyObject *__pyx_pf_3re2_5Match_2groups(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_default); /* proto */
static PyObject *__pyx_pf_3re2_5Match_4group(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_3re2_5Match_6groupdict(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_5Match_8expand(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_template); /* proto */
static PyObject *__pyx_pf_3re2_5Match_10start(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_group); /* proto */
static PyObject *__pyx_pf_3re2_5Match_12end(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_group); /* proto */
static PyObject *__pyx_pf_3re2_5Match_14span(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_group); /* proto */
static void __pyx_pf_3re2_5Match_16__dealloc__(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_5Match_18__repr__(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_5Match_2re___get__(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_5Match_6string___get__(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_5Match_3pos___get__(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_5Match_6endpos___get__(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_5Match_4regs___get__(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_5Match_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_5Match_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3re2_Match *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_3re2_6purge(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3re2_8search(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_3re2_10match(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_3re2_12fullmatch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_3re2_14contains(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_3re2_16finditer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_3re2_18findall(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_3re2_20count(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_3re2_22split(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_maxsplit, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_3re2_24sub(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, int __pyx_v_count, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_3re2_26subn(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, int __pyx_v_count, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_3re2_28escape(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern); /* proto */
static PyObject *__pyx_pf_3re2_30set_fallback_notification(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_level); /* proto */
static PyObject *__pyx_tp_new_3re2_Pattern(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3re2_Match(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3re2___pyx_scope_struct___finditer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyByteArray_Type_extend = {0, &__pyx_n_s_extend, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyBytes_Type_find = {0, &__pyx_n_s_find, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_16;
static PyObject *__pyx_int_23;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_255;
static PyObject *__pyx_int_256;
static PyObject *__pyx_int_535;
static PyObject *__pyx_int_9223372036854775807;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_codeobj__2;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__46;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__61;
static PyObject *__pyx_codeobj__64;
static PyObject *__pyx_codeobj__66;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__91;
/* Late includes */

/* "compile.pxi":2
 * 
 * def compile(pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     cachekey = (type(pattern), pattern, flags)
 *     if cachekey in _cache:
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_1compile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3re2_1compile = {"compile", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_1compile, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3re2_1compile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  int __pyx_v_flags;
  int __pyx_v_max_mem;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_flags,&__pyx_n_s_max_mem,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_mem);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compile") < 0)) __PYX_ERR(0, 2, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pattern = values[0];
    if (values[1]) {
      __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((int)0);
    }
    if (values[2]) {
      __pyx_v_max_mem = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_max_mem == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2, __pyx_L3_error)
    } else {
      __pyx_v_max_mem = ((int)0x800000);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compile", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.compile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_compile(__pyx_self, __pyx_v_pattern, __pyx_v_flags, __pyx_v_max_mem);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_compile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, int __pyx_v_flags, int __pyx_v_max_mem) {
  PyObject *__pyx_v_cachekey = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compile", 0);

  /* "compile.pxi":3
 * 
 * def compile(pattern, int flags=0, int max_mem=8388608):
 *     cachekey = (type(pattern), pattern, flags)             # <<<<<<<<<<<<<<
 *     if cachekey in _cache:
 *         return _cache[cachekey]
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_pattern)));
  __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_pattern)));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(__pyx_v_pattern)));
  __Pyx_INCREF(__pyx_v_pattern);
  __Pyx_GIVEREF(__pyx_v_pattern);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_pattern);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_cachekey = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "compile.pxi":4
 * def compile(pattern, int flags=0, int max_mem=8388608):
 *     cachekey = (type(pattern), pattern, flags)
 *     if cachekey in _cache:             # <<<<<<<<<<<<<<
 *         return _cache[cachekey]
 *     p = _compile(pattern, flags, max_mem)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_cache); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_v_cachekey, __pyx_t_2, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "compile.pxi":5
 *     cachekey = (type(pattern), pattern, flags)
 *     if cachekey in _cache:
 *         return _cache[cachekey]             # <<<<<<<<<<<<<<
 *     p = _compile(pattern, flags, max_mem)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_cache); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_cachekey); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "compile.pxi":4
 * def compile(pattern, int flags=0, int max_mem=8388608):
 *     cachekey = (type(pattern), pattern, flags)
 *     if cachekey in _cache:             # <<<<<<<<<<<<<<
 *         return _cache[cachekey]
 *     p = _compile(pattern, flags, max_mem)
 */
  }

  /* "compile.pxi":6
 *     if cachekey in _cache:
 *         return _cache[cachekey]
 *     p = _compile(pattern, flags, max_mem)             # <<<<<<<<<<<<<<
 * 
 *     if len(_cache) >= _MAXCACHE:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compile); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_max_mem); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_pattern, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_pattern, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_v_pattern);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_6);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_p = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "compile.pxi":8
 *     p = _compile(pattern, flags, max_mem)
 * 
 *     if len(_cache) >= _MAXCACHE:             # <<<<<<<<<<<<<<
 *         _cache.popitem()
 *     _cache[cachekey] = p
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_cache); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MAXCACHE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_GE); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (__pyx_t_4) {

    /* "compile.pxi":9
 * 
 *     if len(_cache) >= _MAXCACHE:
 *         _cache.popitem()             # <<<<<<<<<<<<<<
 *     _cache[cachekey] = p
 *     return p
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_cache); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_popitem); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_9 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "compile.pxi":8
 *     p = _compile(pattern, flags, max_mem)
 * 
 *     if len(_cache) >= _MAXCACHE:             # <<<<<<<<<<<<<<
 *         _cache.popitem()
 *     _cache[cachekey] = p
 */
  }

  /* "compile.pxi":10
 *     if len(_cache) >= _MAXCACHE:
 *         _cache.popitem()
 *     _cache[cachekey] = p             # <<<<<<<<<<<<<<
 *     return p
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_cache); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (unlikely(PyObject_SetItem(__pyx_t_9, __pyx_v_cachekey, __pyx_v_p) < 0)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "compile.pxi":11
 *         _cache.popitem()
 *     _cache[cachekey] = p
 *     return p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_p);
  __pyx_r = __pyx_v_p;
  goto __pyx_L0;

  /* "compile.pxi":2
 * 
 * def compile(pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     cachekey = (type(pattern), pattern, flags)
 *     if cachekey in _cache:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("re2.compile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cachekey);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "compile.pxi":14
 * 
 * 
 * def _compile(object pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     """Compile a regular expression pattern, returning a pattern object."""
 *     def fallback(pattern, flags, error_msg):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_3_compile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_2_compile[] = "Compile a regular expression pattern, returning a pattern object.";
static PyMethodDef __pyx_mdef_3re2_3_compile = {"_compile", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_3_compile, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_2_compile};
static PyObject *__pyx_pw_3re2_3_compile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  int __pyx_v_flags;
  int __pyx_v_max_mem;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_compile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_flags,&__pyx_n_s_max_mem,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_mem);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_compile") < 0)) __PYX_ERR(0, 14, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pattern = values[0];
    if (values[1]) {
      __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 14, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((int)0);
    }
    if (values[2]) {
      __pyx_v_max_mem = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_max_mem == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 14, __pyx_L3_error)
    } else {
      __pyx_v_max_mem = ((int)0x800000);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_compile", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 14, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2._compile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_2_compile(__pyx_self, __pyx_v_pattern, __pyx_v_flags, __pyx_v_max_mem);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "compile.pxi":16
 * def _compile(object pattern, int flags=0, int max_mem=8388608):
 *     """Compile a regular expression pattern, returning a pattern object."""
 *     def fallback(pattern, flags, error_msg):             # <<<<<<<<<<<<<<
 *         """Raise error, warn, or simply return fallback from re module."""
 *         if current_notification == FALLBACK_EXCEPTION:
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_8_compile_1fallback(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_8_compile_fallback[] = "Raise error, warn, or simply return fallback from re module.";
static PyMethodDef __pyx_mdef_3re2_8_compile_1fallback = {"fallback", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_8_compile_1fallback, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_8_compile_fallback};
static PyObject *__pyx_pw_3re2_8_compile_1fallback(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  PyObject *__pyx_v_flags = 0;
  PyObject *__pyx_v_error_msg = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fallback (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_flags,&__pyx_n_s_error_msg,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fallback", 1, 3, 3, 1); __PYX_ERR(0, 16, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_error_msg)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fallback", 1, 3, 3, 2); __PYX_ERR(0, 16, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fallback") < 0)) __PYX_ERR(0, 16, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_pattern = values[0];
    __pyx_v_flags = values[1];
    __pyx_v_error_msg = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fallback", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 16, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2._compile.fallback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_8_compile_fallback(__pyx_self, __pyx_v_pattern, __pyx_v_flags, __pyx_v_error_msg);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_8_compile_fallback(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_flags, PyObject *__pyx_v_error_msg) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_err = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fallback", 0);

  /* "compile.pxi":18
 *     def fallback(pattern, flags, error_msg):
 *         """Raise error, warn, or simply return fallback from re module."""
 *         if current_notification == FALLBACK_EXCEPTION:             # <<<<<<<<<<<<<<
 *             raise RegexError(error_msg)
 *         elif current_notification == FALLBACK_WARNING:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_3re2_current_notification); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_FALLBACK_EXCEPTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "compile.pxi":19
 *         """Raise error, warn, or simply return fallback from re module."""
 *         if current_notification == FALLBACK_EXCEPTION:
 *             raise RegexError(error_msg)             # <<<<<<<<<<<<<<
 *         elif current_notification == FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_RegexError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_v_error_msg) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_error_msg);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 19, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 19, __pyx_L1_error)

    /* "compile.pxi":18
 *     def fallback(pattern, flags, error_msg):
 *         """Raise error, warn, or simply return fallback from re module."""
 *         if current_notification == FALLBACK_EXCEPTION:             # <<<<<<<<<<<<<<
 *             raise RegexError(error_msg)
 *         elif current_notification == FALLBACK_WARNING:
 */
  }

  /* "compile.pxi":20
 *         if current_notification == FALLBACK_EXCEPTION:
 *             raise RegexError(error_msg)
 *         elif current_notification == FALLBACK_WARNING:             # <<<<<<<<<<<<<<
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         try:
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_3re2_current_notification); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_FALLBACK_WARNING); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "compile.pxi":21
 *             raise RegexError(error_msg)
 *         elif current_notification == FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)             # <<<<<<<<<<<<<<
 *         try:
 *             result = PythonRePattern(pattern, flags)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_warnings); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_warn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 21, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_WARNING_Using_re_module_Reason_s, __pyx_v_error_msg); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "compile.pxi":20
 *         if current_notification == FALLBACK_EXCEPTION:
 *             raise RegexError(error_msg)
 *         elif current_notification == FALLBACK_WARNING:             # <<<<<<<<<<<<<<
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         try:
 */
  }

  /* "compile.pxi":22
 *         elif current_notification == FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         try:             # <<<<<<<<<<<<<<
 *             result = PythonRePattern(pattern, flags)
 *         except re.error as err:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_8);
    /*try:*/ {

      /* "compile.pxi":23
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         try:
 *             result = PythonRePattern(pattern, flags)             # <<<<<<<<<<<<<<
 *         except re.error as err:
 *             raise RegexError(*err.args)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_PythonRePattern); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 23, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_pattern, __pyx_v_flags};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L4_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_pattern, __pyx_v_flags};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L4_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 23, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (__pyx_t_2) {
          __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
        }
        __Pyx_INCREF(__pyx_v_pattern);
        __Pyx_GIVEREF(__pyx_v_pattern);
        PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_9, __pyx_v_pattern);
        __Pyx_INCREF(__pyx_v_flags);
        __Pyx_GIVEREF(__pyx_v_flags);
        PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_9, __pyx_v_flags);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "compile.pxi":22
 *         elif current_notification == FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         try:             # <<<<<<<<<<<<<<
 *             result = PythonRePattern(pattern, flags)
 *         except re.error as err:
 */
    }
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "compile.pxi":24
 *         try:
 *             result = PythonRePattern(pattern, flags)
 *         except re.error as err:             # <<<<<<<<<<<<<<
 *             raise RegexError(*err.args)
 *         return result
 */
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_3, &__pyx_t_5);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_re); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L6_except_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_error); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 24, __pyx_L6_except_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_10);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_3, __pyx_t_5);
    __pyx_t_1 = 0; __pyx_t_3 = 0; __pyx_t_5 = 0;
    if (__pyx_t_9) {
      __Pyx_AddTraceback("re2._compile.fallback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_3, &__pyx_t_1) < 0) __PYX_ERR(0, 24, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __pyx_v_err = __pyx_t_3;
      /*try:*/ {

        /* "compile.pxi":25
 *             result = PythonRePattern(pattern, flags)
 *         except re.error as err:
 *             raise RegexError(*err.args)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_RegexError); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 25, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_err, __pyx_n_s_args); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_11 = __Pyx_PySequence_Tuple(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 25, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __PYX_ERR(0, 25, __pyx_L15_error)
      }

      /* "compile.pxi":24
 *         try:
 *             result = PythonRePattern(pattern, flags)
 *         except re.error as err:             # <<<<<<<<<<<<<<
 *             raise RegexError(*err.args)
 *         return result
 */
      /*finally:*/ {
        __pyx_L15_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __pyx_t_9 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_err);
            __pyx_v_err = NULL;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
          }
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
          __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
          __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
          goto __pyx_L6_except_error;
        }
      }
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "compile.pxi":22
 *         elif current_notification == FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         try:             # <<<<<<<<<<<<<<
 *             result = PythonRePattern(pattern, flags)
 *         except re.error as err:
 */
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
    goto __pyx_L1_error;
    __pyx_L9_try_end:;
  }

  /* "compile.pxi":26
 *         except re.error as err:
 *             raise RegexError(*err.args)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     cdef StringPiece * s
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "compile.pxi":16
 * def _compile(object pattern, int flags=0, int max_mem=8388608):
 *     """Compile a regular expression pattern, returning a pattern object."""
 *     def fallback(pattern, flags, error_msg):             # <<<<<<<<<<<<<<
 *         """Raise error, warn, or simply return fallback from re module."""
 *         if current_notification == FALLBACK_EXCEPTION:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("re2._compile.fallback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_err);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "compile.pxi":14
 * 
 * 
 * def _compile(object pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     """Compile a regular expression pattern, returning a pattern object."""
 *     def fallback(pattern, flags, error_msg):
 */

static PyObject *__pyx_pf_3re2_2_compile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, int __pyx_v_flags, int __pyx_v_max_mem) {
  PyObject *__pyx_v_fallback = 0;
  re2::StringPiece *__pyx_v_s;
  RE2::Options __pyx_v_opts;
  int __pyx_v_error_code;
  int __pyx_v_encoded;
  PyObject *__pyx_v_original_pattern = 0;
  int __pyx_v_newflags;
  re2::RE2 *__pyx_v_re_pattern;
  PyObject *__pyx_v_error_msg = NULL;
  struct __pyx_obj_3re2_Pattern *__pyx_v_pypattern = 0;
  std::map<std::string,int>  __pyx_v_named_groups;
  std::pair<std::string,int>  __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  char *__pyx_t_13;
  Py_ssize_t __pyx_t_14;
  std::map<std::string,int> ::iterator __pyx_t_15;
  std::pair<std::string,int>  __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_compile", 0);
  __Pyx_INCREF(__pyx_v_pattern);

  /* "compile.pxi":16
 * def _compile(object pattern, int flags=0, int max_mem=8388608):
 *     """Compile a regular expression pattern, returning a pattern object."""
 *     def fallback(pattern, flags, error_msg):             # <<<<<<<<<<<<<<
 *         """Raise error, warn, or simply return fallback from re module."""
 *         if current_notification == FALLBACK_EXCEPTION:
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_3re2_8_compile_1fallback, 0, __pyx_n_s_compile_locals_fallback, NULL, __pyx_n_s_re2, __pyx_d, ((PyObject *)__pyx_codeobj__2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fallback = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "compile.pxi":31
 *     cdef Options opts
 *     cdef int error_code
 *     cdef int encoded = 0             # <<<<<<<<<<<<<<
 *     cdef object original_pattern
 * 
 */
  __pyx_v_encoded = 0;

  /* "compile.pxi":34
 *     cdef object original_pattern
 * 
 *     if isinstance(pattern, (Pattern, SREPattern)):             # <<<<<<<<<<<<<<
 *         if flags:
 *             raise ValueError(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_SREPattern); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_pattern, __pyx_ptype_3re2_Pattern); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_pattern, __pyx_t_1); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "compile.pxi":35
 * 
 *     if isinstance(pattern, (Pattern, SREPattern)):
 *         if flags:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                     'Cannot process flags argument with a compiled pattern')
 */
    __pyx_t_3 = (__pyx_v_flags != 0);
    if (unlikely(__pyx_t_3)) {

      /* "compile.pxi":36
 *     if isinstance(pattern, (Pattern, SREPattern)):
 *         if flags:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                     'Cannot process flags argument with a compiled pattern')
 *         return pattern
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 36, __pyx_L1_error)

      /* "compile.pxi":35
 * 
 *     if isinstance(pattern, (Pattern, SREPattern)):
 *         if flags:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                     'Cannot process flags argument with a compiled pattern')
 */
    }

    /* "compile.pxi":38
 *             raise ValueError(
 *                     'Cannot process flags argument with a compiled pattern')
 *         return pattern             # <<<<<<<<<<<<<<
 * 
 *     original_pattern = pattern
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_pattern);
    __pyx_r = __pyx_v_pattern;
    goto __pyx_L0;

    /* "compile.pxi":34
 *     cdef object original_pattern
 * 
 *     if isinstance(pattern, (Pattern, SREPattern)):             # <<<<<<<<<<<<<<
 *         if flags:
 *             raise ValueError(
 */
  }

  /* "compile.pxi":40
 *         return pattern
 * 
 *     original_pattern = pattern             # <<<<<<<<<<<<<<
 *     if flags & _L:
 *         return fallback(original_pattern, flags, "re.LOCALE not supported")
 */
  __Pyx_INCREF(__pyx_v_pattern);
  __pyx_v_original_pattern = __pyx_v_pattern;

  /* "compile.pxi":41
 * 
 *     original_pattern = pattern
 *     if flags & _L:             # <<<<<<<<<<<<<<
 *         return fallback(original_pattern, flags, "re.LOCALE not supported")
 *     pattern = unicode_to_bytes(pattern, &encoded, -1)
 */
  __pyx_t_3 = ((__pyx_v_flags & __pyx_v_3re2__L) != 0);
  if (__pyx_t_3) {

    /* "compile.pxi":42
 *     original_pattern = pattern
 *     if flags & _L:
 *         return fallback(original_pattern, flags, "re.LOCALE not supported")             # <<<<<<<<<<<<<<
 *     pattern = unicode_to_bytes(pattern, &encoded, -1)
 *     newflags = flags
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __pyx_pf_3re2_8_compile_fallback(__pyx_v_fallback, __pyx_v_original_pattern, __pyx_t_1, __pyx_kp_u_re_LOCALE_not_supported); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 42, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "compile.pxi":41
 * 
 *     original_pattern = pattern
 *     if flags & _L:             # <<<<<<<<<<<<<<
 *         return fallback(original_pattern, flags, "re.LOCALE not supported")
 *     pattern = unicode_to_bytes(pattern, &encoded, -1)
 */
  }

  /* "compile.pxi":43
 *     if flags & _L:
 *         return fallback(original_pattern, flags, "re.LOCALE not supported")
 *     pattern = unicode_to_bytes(pattern, &encoded, -1)             # <<<<<<<<<<<<<<
 *     newflags = flags
 *     if not PY2:
 */
  __pyx_t_5 = __pyx_f_3re2_unicode_to_bytes(__pyx_v_pattern, (&__pyx_v_encoded), -1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF_SET(__pyx_v_pattern, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "compile.pxi":44
 *         return fallback(original_pattern, flags, "re.LOCALE not supported")
 *     pattern = unicode_to_bytes(pattern, &encoded, -1)
 *     newflags = flags             # <<<<<<<<<<<<<<
 *     if not PY2:
 *         if not encoded and flags & _U:  # re.UNICODE
 */
  __pyx_v_newflags = __pyx_v_flags;

  /* "compile.pxi":45
 *     pattern = unicode_to_bytes(pattern, &encoded, -1)
 *     newflags = flags
 *     if not PY2:             # <<<<<<<<<<<<<<
 *         if not encoded and flags & _U:  # re.UNICODE
 *             pass  # can use UNICODE with bytes pattern, but assumes valid UTF-8
 */
  __pyx_t_3 = ((!(PY2 != 0)) != 0);
  if (__pyx_t_3) {

    /* "compile.pxi":46
 *     newflags = flags
 *     if not PY2:
 *         if not encoded and flags & _U:  # re.UNICODE             # <<<<<<<<<<<<<<
 *             pass  # can use UNICODE with bytes pattern, but assumes valid UTF-8
 *             # raise ValueError("can't use UNICODE flag with a bytes pattern")
 */
    __pyx_t_2 = ((!(__pyx_v_encoded != 0)) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_flags & __pyx_v_3re2__U) != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L10_bool_binop_done:;
    if (__pyx_t_3) {
      goto __pyx_L9;
    }

    /* "compile.pxi":49
 *             pass  # can use UNICODE with bytes pattern, but assumes valid UTF-8
 *             # raise ValueError("can't use UNICODE flag with a bytes pattern")
 *         elif encoded and not (flags & re.ASCII):             # <<<<<<<<<<<<<<
 *             newflags = flags | _U  # re.UNICODE
 *         elif encoded and flags & re.ASCII:
 */
    __pyx_t_2 = (__pyx_v_encoded != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_re); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ASCII); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_And(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = ((!__pyx_t_2) != 0);
    __pyx_t_3 = __pyx_t_4;
    __pyx_L12_bool_binop_done:;
    if (__pyx_t_3) {

      /* "compile.pxi":50
 *             # raise ValueError("can't use UNICODE flag with a bytes pattern")
 *         elif encoded and not (flags & re.ASCII):
 *             newflags = flags | _U  # re.UNICODE             # <<<<<<<<<<<<<<
 *         elif encoded and flags & re.ASCII:
 *             newflags = flags & ~_U  # re.UNICODE
 */
      __pyx_v_newflags = (__pyx_v_flags | __pyx_v_3re2__U);

      /* "compile.pxi":49
 *             pass  # can use UNICODE with bytes pattern, but assumes valid UTF-8
 *             # raise ValueError("can't use UNICODE flag with a bytes pattern")
 *         elif encoded and not (flags & re.ASCII):             # <<<<<<<<<<<<<<
 *             newflags = flags | _U  # re.UNICODE
 *         elif encoded and flags & re.ASCII:
 */
      goto __pyx_L9;
    }

    /* "compile.pxi":51
 *         elif encoded and not (flags & re.ASCII):
 *             newflags = flags | _U  # re.UNICODE
 *         elif encoded and flags & re.ASCII:             # <<<<<<<<<<<<<<
 *             newflags = flags & ~_U  # re.UNICODE
 *     try:
 */
    __pyx_t_4 = (__pyx_v_encoded != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_re); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_ASCII); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_And(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_3 = __pyx_t_4;
    __pyx_L14_bool_binop_done:;
    if (__pyx_t_3) {

      /* "compile.pxi":52
 *             newflags = flags | _U  # re.UNICODE
 *         elif encoded and flags & re.ASCII:
 *             newflags = flags & ~_U  # re.UNICODE             # <<<<<<<<<<<<<<
 *     try:
 *         pattern = _prepare_pattern(pattern, newflags)
 */
      __pyx_v_newflags = (__pyx_v_flags & (~__pyx_v_3re2__U));

      /* "compile.pxi":51
 *         elif encoded and not (flags & re.ASCII):
 *             newflags = flags | _U  # re.UNICODE
 *         elif encoded and flags & re.ASCII:             # <<<<<<<<<<<<<<
 *             newflags = flags & ~_U  # re.UNICODE
 *     try:
 */
    }
    __pyx_L9:;

    /* "compile.pxi":45
 *     pattern = unicode_to_bytes(pattern, &encoded, -1)
 *     newflags = flags
 *     if not PY2:             # <<<<<<<<<<<<<<
 *         if not encoded and flags & _U:  # re.UNICODE
 *             pass  # can use UNICODE with bytes pattern, but assumes valid UTF-8
 */
  }

  /* "compile.pxi":53
 *         elif encoded and flags & re.ASCII:
 *             newflags = flags & ~_U  # re.UNICODE
 *     try:             # <<<<<<<<<<<<<<
 *         pattern = _prepare_pattern(pattern, newflags)
 *     except BackreferencesException:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_9);
    /*try:*/ {

      /* "compile.pxi":54
 *             newflags = flags & ~_U  # re.UNICODE
 *     try:
 *         pattern = _prepare_pattern(pattern, newflags)             # <<<<<<<<<<<<<<
 *     except BackreferencesException:
 *         return fallback(original_pattern, flags, "Backreferences not supported")
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_prepare_pattern); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 54, __pyx_L16_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_newflags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L16_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_11 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_pattern, __pyx_t_1};
        __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 54, __pyx_L16_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_pattern, __pyx_t_1};
        __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 54, __pyx_L16_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_12 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 54, __pyx_L16_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (__pyx_t_10) {
          __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10); __pyx_t_10 = NULL;
        }
        __Pyx_INCREF(__pyx_v_pattern);
        __Pyx_GIVEREF(__pyx_v_pattern);
        PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_11, __pyx_v_pattern);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_11, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_12, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 54, __pyx_L16_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_pattern, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "compile.pxi":53
 *         elif encoded and flags & re.ASCII:
 *             newflags = flags & ~_U  # re.UNICODE
 *     try:             # <<<<<<<<<<<<<<
 *         pattern = _prepare_pattern(pattern, newflags)
 *     except BackreferencesException:
 */
    }
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    goto __pyx_L21_try_end;
    __pyx_L16_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "compile.pxi":55
 *     try:
 *         pattern = _prepare_pattern(pattern, newflags)
 *     except BackreferencesException:             # <<<<<<<<<<<<<<
 *         return fallback(original_pattern, flags, "Backreferences not supported")
 *     except CharClassProblemException:
 */
    __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_5, &__pyx_t_12);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BackreferencesException); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L18_except_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_6, __pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_ErrRestore(__pyx_t_6, __pyx_t_5, __pyx_t_12);
    __pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_12 = 0;
    if (__pyx_t_11) {
      __Pyx_AddTraceback("re2._compile", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_12, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 55, __pyx_L18_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);

      /* "compile.pxi":56
 *         pattern = _prepare_pattern(pattern, newflags)
 *     except BackreferencesException:
 *         return fallback(original_pattern, flags, "Backreferences not supported")             # <<<<<<<<<<<<<<
 *     except CharClassProblemException:
 *         return fallback(original_pattern, flags,
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L18_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __pyx_pf_3re2_8_compile_fallback(__pyx_v_fallback, __pyx_v_original_pattern, __pyx_t_1, __pyx_kp_u_Backreferences_not_supported); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 56, __pyx_L18_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_r = __pyx_t_10;
      __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      goto __pyx_L19_except_return;
    }

    /* "compile.pxi":57
 *     except BackreferencesException:
 *         return fallback(original_pattern, flags, "Backreferences not supported")
 *     except CharClassProblemException:             # <<<<<<<<<<<<<<
 *         return fallback(original_pattern, flags,
 *                 "\W and \S not supported inside character classes")
 */
    __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_5, &__pyx_t_12);
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_CharClassProblemException); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 57, __pyx_L18_except_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_6, __pyx_t_10);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_ErrRestore(__pyx_t_6, __pyx_t_5, __pyx_t_12);
    __pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_12 = 0;
    if (__pyx_t_11) {
      __Pyx_AddTraceback("re2._compile", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_12, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 57, __pyx_L18_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);

      /* "compile.pxi":58
 *         return fallback(original_pattern, flags, "Backreferences not supported")
 *     except CharClassProblemException:
 *         return fallback(original_pattern, flags,             # <<<<<<<<<<<<<<
 *                 "\W and \S not supported inside character classes")
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 58, __pyx_L18_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_1 = __pyx_pf_3re2_8_compile_fallback(__pyx_v_fallback, __pyx_v_original_pattern, __pyx_t_10, __pyx_kp_u_W_and_S_not_supported_inside_ch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L18_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      goto __pyx_L19_except_return;
    }
    goto __pyx_L18_except_error;
    __pyx_L18_except_error:;

    /* "compile.pxi":53
 *         elif encoded and flags & re.ASCII:
 *             newflags = flags & ~_U  # re.UNICODE
 *     try:             # <<<<<<<<<<<<<<
 *         pattern = _prepare_pattern(pattern, newflags)
 *     except BackreferencesException:
 */
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
    goto __pyx_L1_error;
    __pyx_L19_except_return:;
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
    goto __pyx_L0;
    __pyx_L21_try_end:;
  }

  /* "compile.pxi":62
 * 
 *     # Set the options given the flags above.
 *     if flags & _I:             # <<<<<<<<<<<<<<
 *         opts.set_case_sensitive(0);
 * 
 */
  __pyx_t_3 = ((__pyx_v_flags & __pyx_v_3re2__I) != 0);
  if (__pyx_t_3) {

    /* "compile.pxi":63
 *     # Set the options given the flags above.
 *     if flags & _I:
 *         opts.set_case_sensitive(0);             # <<<<<<<<<<<<<<
 * 
 *     opts.set_max_mem(max_mem)
 */
    __pyx_v_opts.set_case_sensitive(0);

    /* "compile.pxi":62
 * 
 *     # Set the options given the flags above.
 *     if flags & _I:             # <<<<<<<<<<<<<<
 *         opts.set_case_sensitive(0);
 * 
 */
  }

  /* "compile.pxi":65
 *         opts.set_case_sensitive(0);
 * 
 *     opts.set_max_mem(max_mem)             # <<<<<<<<<<<<<<
 *     opts.set_log_errors(0)
 *     if flags & _U or encoded:
 */
  __pyx_v_opts.set_max_mem(__pyx_v_max_mem);

  /* "compile.pxi":66
 * 
 *     opts.set_max_mem(max_mem)
 *     opts.set_log_errors(0)             # <<<<<<<<<<<<<<
 *     if flags & _U or encoded:
 *         opts.set_encoding(EncodingUTF8)
 */
  __pyx_v_opts.set_log_errors(0);

  /* "compile.pxi":67
 *     opts.set_max_mem(max_mem)
 *     opts.set_log_errors(0)
 *     if flags & _U or encoded:             # <<<<<<<<<<<<<<
 *         opts.set_encoding(EncodingUTF8)
 *     else:  # re.UNICODE flag not passed, and pattern is bytes,
 */
  __pyx_t_4 = ((__pyx_v_flags & __pyx_v_3re2__U) != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L28_bool_binop_done;
  }
  __pyx_t_4 = (__pyx_v_encoded != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L28_bool_binop_done:;
  if (__pyx_t_3) {

    /* "compile.pxi":68
 *     opts.set_log_errors(0)
 *     if flags & _U or encoded:
 *         opts.set_encoding(EncodingUTF8)             # <<<<<<<<<<<<<<
 *     else:  # re.UNICODE flag not passed, and pattern is bytes,
 *         # so allow matching of arbitrary byte sequences.
 */
    __pyx_v_opts.set_encoding(RE2::Options::EncodingUTF8);

    /* "compile.pxi":67
 *     opts.set_max_mem(max_mem)
 *     opts.set_log_errors(0)
 *     if flags & _U or encoded:             # <<<<<<<<<<<<<<
 *         opts.set_encoding(EncodingUTF8)
 *     else:  # re.UNICODE flag not passed, and pattern is bytes,
 */
    goto __pyx_L27;
  }

  /* "compile.pxi":71
 *     else:  # re.UNICODE flag not passed, and pattern is bytes,
 *         # so allow matching of arbitrary byte sequences.
 *         opts.set_encoding(EncodingLatin1)             # <<<<<<<<<<<<<<
 * 
 *     s = new StringPiece(<char *><bytes>pattern, len(pattern))
 */
  /*else*/ {
    __pyx_v_opts.set_encoding(RE2::Options::EncodingLatin1);
  }
  __pyx_L27:;

  /* "compile.pxi":73
 *         opts.set_encoding(EncodingLatin1)
 * 
 *     s = new StringPiece(<char *><bytes>pattern, len(pattern))             # <<<<<<<<<<<<<<
 * 
 *     cdef RE2 *re_pattern
 */
  if (unlikely(__pyx_v_pattern == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 73, __pyx_L1_error)
  }
  __pyx_t_13 = __Pyx_PyBytes_AsWritableString(__pyx_v_pattern); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L1_error)
  __pyx_t_14 = PyObject_Length(__pyx_v_pattern); if (unlikely(__pyx_t_14 == ((Py_ssize_t)-1))) __PYX_ERR(0, 73, __pyx_L1_error)
  __pyx_v_s = new re2::StringPiece(((char *)__pyx_t_13), __pyx_t_14);

  /* "compile.pxi":76
 * 
 *     cdef RE2 *re_pattern
 *     with nogil:             # <<<<<<<<<<<<<<
 *          re_pattern = new RE2(s[0], opts)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "compile.pxi":77
 *     cdef RE2 *re_pattern
 *     with nogil:
 *          re_pattern = new RE2(s[0], opts)             # <<<<<<<<<<<<<<
 * 
 *     if not re_pattern.ok():
 */
        __pyx_v_re_pattern = new re2::RE2((__pyx_v_s[0]), __pyx_v_opts);
      }

      /* "compile.pxi":76
 * 
 *     cdef RE2 *re_pattern
 *     with nogil:             # <<<<<<<<<<<<<<
 *          re_pattern = new RE2(s[0], opts)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L32;
        }
        __pyx_L32:;
      }
  }

  /* "compile.pxi":79
 *          re_pattern = new RE2(s[0], opts)
 * 
 *     if not re_pattern.ok():             # <<<<<<<<<<<<<<
 *         # Something went wrong with the compilation.
 *         del s
 */
  __pyx_t_3 = ((!(__pyx_v_re_pattern->ok() != 0)) != 0);
  if (__pyx_t_3) {

    /* "compile.pxi":81
 *     if not re_pattern.ok():
 *         # Something went wrong with the compilation.
 *         del s             # <<<<<<<<<<<<<<
 *         error_msg = cpp_to_unicode(re_pattern.error())
 *         error_code = re_pattern.error_code()
 */
    delete __pyx_v_s;

    /* "compile.pxi":82
 *         # Something went wrong with the compilation.
 *         del s
 *         error_msg = cpp_to_unicode(re_pattern.error())             # <<<<<<<<<<<<<<
 *         error_code = re_pattern.error_code()
 *         del re_pattern
 */
    __pyx_t_6 = __pyx_f_3re2_cpp_to_unicode(__pyx_v_re_pattern->error()); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_v_error_msg = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "compile.pxi":83
 *         del s
 *         error_msg = cpp_to_unicode(re_pattern.error())
 *         error_code = re_pattern.error_code()             # <<<<<<<<<<<<<<
 *         del re_pattern
 *         if current_notification == FALLBACK_EXCEPTION:
 */
    __pyx_v_error_code = __pyx_v_re_pattern->error_code();

    /* "compile.pxi":84
 *         error_msg = cpp_to_unicode(re_pattern.error())
 *         error_code = re_pattern.error_code()
 *         del re_pattern             # <<<<<<<<<<<<<<
 *         if current_notification == FALLBACK_EXCEPTION:
 *             # Raise an exception regardless of the type of error.
 */
    delete __pyx_v_re_pattern;

    /* "compile.pxi":85
 *         error_code = re_pattern.error_code()
 *         del re_pattern
 *         if current_notification == FALLBACK_EXCEPTION:             # <<<<<<<<<<<<<<
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 */
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_3re2_current_notification); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_FALLBACK_EXCEPTION); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_12 = PyObject_RichCompare(__pyx_t_6, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(__pyx_t_3)) {

      /* "compile.pxi":87
 *         if current_notification == FALLBACK_EXCEPTION:
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)             # <<<<<<<<<<<<<<
 *         elif error_code not in (ErrorBadPerlOp, ErrorRepeatSize,
 *                 # ErrorBadEscape,
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_RegexError); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_12 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_error_msg) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_error_msg);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_12, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __PYX_ERR(0, 87, __pyx_L1_error)

      /* "compile.pxi":85
 *         error_code = re_pattern.error_code()
 *         del re_pattern
 *         if current_notification == FALLBACK_EXCEPTION:             # <<<<<<<<<<<<<<
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 */
    }

    /* "compile.pxi":88
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 *         elif error_code not in (ErrorBadPerlOp, ErrorRepeatSize,             # <<<<<<<<<<<<<<
 *                 # ErrorBadEscape,
 *                 ErrorPatternTooLarge):
 */
    switch (__pyx_v_error_code) {
      case RE2::ErrorBadPerlOp:
      case RE2::ErrorRepeatSize:
      case RE2::ErrorPatternTooLarge:

      /* "compile.pxi":90
 *         elif error_code not in (ErrorBadPerlOp, ErrorRepeatSize,
 *                 # ErrorBadEscape,
 *                 ErrorPatternTooLarge):             # <<<<<<<<<<<<<<
 *             # Raise an error because these will not be fixed by using the
 *             # ``re`` module.
 */
      __pyx_t_3 = 0;

      /* "compile.pxi":88
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 *         elif error_code not in (ErrorBadPerlOp, ErrorRepeatSize,             # <<<<<<<<<<<<<<
 *                 # ErrorBadEscape,
 *                 ErrorPatternTooLarge):
 */
      break;
      default:
      __pyx_t_3 = 1;
      break;
    }
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (unlikely(__pyx_t_4)) {

      /* "compile.pxi":93
 *             # Raise an error because these will not be fixed by using the
 *             # ``re`` module.
 *             raise RegexError(error_msg)             # <<<<<<<<<<<<<<
 *         elif current_notification == FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_RegexError); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 93, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_12 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_error_msg) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_error_msg);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 93, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_12, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __PYX_ERR(0, 93, __pyx_L1_error)

      /* "compile.pxi":88
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 *         elif error_code not in (ErrorBadPerlOp, ErrorRepeatSize,             # <<<<<<<<<<<<<<
 *                 # ErrorBadEscape,
 *                 ErrorPatternTooLarge):
 */
    }

    /* "compile.pxi":94
 *             # ``re`` module.
 *             raise RegexError(error_msg)
 *         elif current_notification == FALLBACK_WARNING:             # <<<<<<<<<<<<<<
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         return PythonRePattern(original_pattern, flags)
 */
    __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_3re2_current_notification); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_FALLBACK_WARNING); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_12, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_4) {

      /* "compile.pxi":95
 *             raise RegexError(error_msg)
 *         elif current_notification == FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)             # <<<<<<<<<<<<<<
 *         return PythonRePattern(original_pattern, flags)
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_warnings); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 95, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_warn); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 95, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyUnicode_Format(__pyx_kp_u_WARNING_Using_re_module_Reason_s, __pyx_v_error_msg); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 95, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_12);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_12, function);
        }
      }
      __pyx_t_6 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_5);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 95, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "compile.pxi":94
 *             # ``re`` module.
 *             raise RegexError(error_msg)
 *         elif current_notification == FALLBACK_WARNING:             # <<<<<<<<<<<<<<
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         return PythonRePattern(original_pattern, flags)
 */
    }

    /* "compile.pxi":96
 *         elif current_notification == FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         return PythonRePattern(original_pattern, flags)             # <<<<<<<<<<<<<<
 * 
 *     cdef Pattern pypattern = Pattern()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_PythonRePattern); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_12)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_original_pattern, __pyx_t_5};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 96, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_original_pattern, __pyx_t_5};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 96, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 96, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_v_original_pattern);
      __Pyx_GIVEREF(__pyx_v_original_pattern);
      PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_11, __pyx_v_original_pattern);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_11, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_10, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 96, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "compile.pxi":79
 *          re_pattern = new RE2(s[0], opts)
 * 
 *     if not re_pattern.ok():             # <<<<<<<<<<<<<<
 *         # Something went wrong with the compilation.
 *         del s
 */
  }

  /* "compile.pxi":98
 *         return PythonRePattern(original_pattern, flags)
 * 
 *     cdef Pattern pypattern = Pattern()             # <<<<<<<<<<<<<<
 *     cdef map[cpp_string, int] named_groups = re_pattern.NamedCapturingGroups()
 *     pypattern.pattern = original_pattern
 */
  __pyx_t_6 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_3re2_Pattern)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_pypattern = ((struct __pyx_obj_3re2_Pattern *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "compile.pxi":99
 * 
 *     cdef Pattern pypattern = Pattern()
 *     cdef map[cpp_string, int] named_groups = re_pattern.NamedCapturingGroups()             # <<<<<<<<<<<<<<
 *     pypattern.pattern = original_pattern
 *     pypattern.re_pattern = re_pattern
 */
  __pyx_v_named_groups = __pyx_v_re_pattern->NamedCapturingGroups();

  /* "compile.pxi":100
 *     cdef Pattern pypattern = Pattern()
 *     cdef map[cpp_string, int] named_groups = re_pattern.NamedCapturingGroups()
 *     pypattern.pattern = original_pattern             # <<<<<<<<<<<<<<
 *     pypattern.re_pattern = re_pattern
 *     pypattern.groups = re_pattern.NumberOfCapturingGroups()
 */
  __Pyx_INCREF(__pyx_v_original_pattern);
  __Pyx_GIVEREF(__pyx_v_original_pattern);
  __Pyx_GOTREF(__pyx_v_pypattern->pattern);
  __Pyx_DECREF(__pyx_v_pypattern->pattern);
  __pyx_v_pypattern->pattern = __pyx_v_original_pattern;

  /* "compile.pxi":101
 *     cdef map[cpp_string, int] named_groups = re_pattern.NamedCapturingGroups()
 *     pypattern.pattern = original_pattern
 *     pypattern.re_pattern = re_pattern             # <<<<<<<<<<<<<<
 *     pypattern.groups = re_pattern.NumberOfCapturingGroups()
 *     pypattern.encoded = encoded
 */
  __pyx_v_pypattern->re_pattern = __pyx_v_re_pattern;

  /* "compile.pxi":102
 *     pypattern.pattern = original_pattern
 *     pypattern.re_pattern = re_pattern
 *     pypattern.groups = re_pattern.NumberOfCapturingGroups()             # <<<<<<<<<<<<<<
 *     pypattern.encoded = encoded
 *     pypattern.flags = flags
 */
  __pyx_v_pypattern->groups = __pyx_v_re_pattern->NumberOfCapturingGroups();

  /* "compile.pxi":103
 *     pypattern.re_pattern = re_pattern
 *     pypattern.groups = re_pattern.NumberOfCapturingGroups()
 *     pypattern.encoded = encoded             # <<<<<<<<<<<<<<
 *     pypattern.flags = flags
 *     pypattern.groupindex = {}
 */
  __pyx_v_pypattern->encoded = __pyx_v_encoded;

  /* "compile.pxi":104
 *     pypattern.groups = re_pattern.NumberOfCapturingGroups()
 *     pypattern.encoded = encoded
 *     pypattern.flags = flags             # <<<<<<<<<<<<<<
 *     pypattern.groupindex = {}
 *     for it in named_groups:
 */
  __pyx_v_pypattern->flags = __pyx_v_flags;

  /* "compile.pxi":105
 *     pypattern.encoded = encoded
 *     pypattern.flags = flags
 *     pypattern.groupindex = {}             # <<<<<<<<<<<<<<
 *     for it in named_groups:
 *         pypattern.groupindex[cpp_to_unicode(it.first)] = it.second
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_pypattern->groupindex);
  __Pyx_DECREF(__pyx_v_pypattern->groupindex);
  __pyx_v_pypattern->groupindex = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "compile.pxi":106
 *     pypattern.flags = flags
 *     pypattern.groupindex = {}
 *     for it in named_groups:             # <<<<<<<<<<<<<<
 *         pypattern.groupindex[cpp_to_unicode(it.first)] = it.second
 * 
 */
  __pyx_t_15 = __pyx_v_named_groups.begin();
  for (;;) {
    if (!(__pyx_t_15 != __pyx_v_named_groups.end())) break;
    __pyx_t_16 = *__pyx_t_15;
    ++__pyx_t_15;
    __pyx_v_it = __pyx_t_16;

    /* "compile.pxi":107
 *     pypattern.groupindex = {}
 *     for it in named_groups:
 *         pypattern.groupindex[cpp_to_unicode(it.first)] = it.second             # <<<<<<<<<<<<<<
 * 
 *     if flags & DEBUG:
 */
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_it.second); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__pyx_v_pypattern->groupindex == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 107, __pyx_L1_error)
    }
    __pyx_t_12 = __pyx_f_3re2_cpp_to_unicode(__pyx_v_it.first); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (unlikely(PyDict_SetItem(__pyx_v_pypattern->groupindex, __pyx_t_12, __pyx_t_6) < 0)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "compile.pxi":106
 *     pypattern.flags = flags
 *     pypattern.groupindex = {}
 *     for it in named_groups:             # <<<<<<<<<<<<<<
 *         pypattern.groupindex[cpp_to_unicode(it.first)] = it.second
 * 
 */
  }

  /* "compile.pxi":109
 *         pypattern.groupindex[cpp_to_unicode(it.first)] = it.second
 * 
 *     if flags & DEBUG:             # <<<<<<<<<<<<<<
 *         print(repr(pypattern._dump_pattern()))
 *     del s
 */
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_DEBUG); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_10 = PyNumber_And(__pyx_t_6, __pyx_t_12); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (__pyx_t_4) {

    /* "compile.pxi":110
 * 
 *     if flags & DEBUG:
 *         print(repr(pypattern._dump_pattern()))             # <<<<<<<<<<<<<<
 *     del s
 *     return pypattern
 */
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_pypattern), __pyx_n_s_dump_pattern); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
      }
    }
    __pyx_t_10 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = PyObject_Repr(__pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_12); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "compile.pxi":109
 *         pypattern.groupindex[cpp_to_unicode(it.first)] = it.second
 * 
 *     if flags & DEBUG:             # <<<<<<<<<<<<<<
 *         print(repr(pypattern._dump_pattern()))
 *     del s
 */
  }

  /* "compile.pxi":111
 *     if flags & DEBUG:
 *         print(repr(pypattern._dump_pattern()))
 *     del s             # <<<<<<<<<<<<<<
 *     return pypattern
 * 
 */
  delete __pyx_v_s;

  /* "compile.pxi":112
 *         print(repr(pypattern._dump_pattern()))
 *     del s
 *     return pypattern             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pypattern));
  __pyx_r = ((PyObject *)__pyx_v_pypattern);
  goto __pyx_L0;

  /* "compile.pxi":14
 * 
 * 
 * def _compile(object pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     """Compile a regular expression pattern, returning a pattern object."""
 *     def fallback(pattern, flags, error_msg):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("re2._compile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fallback);
  __Pyx_XDECREF(__pyx_v_original_pattern);
  __Pyx_XDECREF(__pyx_v_error_msg);
  __Pyx_XDECREF((PyObject *)__pyx_v_pypattern);
  __Pyx_XDECREF(__pyx_v_pattern);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "compile.pxi":115
 * 
 * 
 * def _prepare_pattern(bytes pattern, int flags):             # <<<<<<<<<<<<<<
 *     """Translate pattern to RE2 syntax."""
 *     cdef bytearray result = bytearray()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_5_prepare_pattern(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_4_prepare_pattern[] = "Translate pattern to RE2 syntax.";
static PyMethodDef __pyx_mdef_3re2_5_prepare_pattern = {"_prepare_pattern", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_5_prepare_pattern, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_4_prepare_pattern};
static PyObject *__pyx_pw_3re2_5_prepare_pattern(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  int __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_prepare_pattern (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_flags,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_prepare_pattern", 1, 2, 2, 1); __PYX_ERR(0, 115, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_prepare_pattern") < 0)) __PYX_ERR(0, 115, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_pattern = ((PyObject*)values[0]);
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 115, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_prepare_pattern", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 115, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2._prepare_pattern", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pattern), (&PyBytes_Type), 1, "pattern", 1))) __PYX_ERR(0, 115, __pyx_L1_error)
  __pyx_r = __pyx_pf_3re2_4_prepare_pattern(__pyx_self, __pyx_v_pattern, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_4_prepare_pattern(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, int __pyx_v_flags) {
  PyObject *__pyx_v_result = 0;
  unsigned char *__pyx_v_cstring;
  unsigned char __pyx_v_this;
  unsigned char __pyx_v_that;
  int __pyx_v_size;
  int __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned char *__pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_prepare_pattern", 0);

  /* "compile.pxi":117
 * def _prepare_pattern(bytes pattern, int flags):
 *     """Translate pattern to RE2 syntax."""
 *     cdef bytearray result = bytearray()             # <<<<<<<<<<<<<<
 *     cdef unsigned char * cstring = pattern
 *     cdef unsigned char this, that
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)(&PyByteArray_Type))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "compile.pxi":118
 *     """Translate pattern to RE2 syntax."""
 *     cdef bytearray result = bytearray()
 *     cdef unsigned char * cstring = pattern             # <<<<<<<<<<<<<<
 *     cdef unsigned char this, that
 *     cdef int size = len(pattern)
 */
  if (unlikely(__pyx_v_pattern == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 118, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsWritableUString(__pyx_v_pattern); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 118, __pyx_L1_error)
  __pyx_v_cstring = __pyx_t_2;

  /* "compile.pxi":120
 *     cdef unsigned char * cstring = pattern
 *     cdef unsigned char this, that
 *     cdef int size = len(pattern)             # <<<<<<<<<<<<<<
 *     cdef int n = 0
 * 
 */
  if (unlikely(__pyx_v_pattern == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 120, __pyx_L1_error)
  }
  __pyx_t_3 = PyBytes_GET_SIZE(__pyx_v_pattern); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 120, __pyx_L1_error)
  __pyx_v_size = __pyx_t_3;

  /* "compile.pxi":121
 *     cdef unsigned char this, that
 *     cdef int size = len(pattern)
 *     cdef int n = 0             # <<<<<<<<<<<<<<
 * 
 *     if flags & (_S | _M):
 */
  __pyx_v_n = 0;

  /* "compile.pxi":123
 *     cdef int n = 0
 * 
 *     if flags & (_S | _M):             # <<<<<<<<<<<<<<
 *         result.extend(b'(?')
 *         if flags & _S:
 */
  __pyx_t_4 = ((__pyx_v_flags & (__pyx_v_3re2__S | __pyx_v_3re2__M)) != 0);
  if (__pyx_t_4) {

    /* "compile.pxi":124
 * 
 *     if flags & (_S | _M):
 *         result.extend(b'(?')             # <<<<<<<<<<<<<<
 *         if flags & _S:
 *             result.extend(b's')
 */
    __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_kp_b__4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "compile.pxi":125
 *     if flags & (_S | _M):
 *         result.extend(b'(?')
 *         if flags & _S:             # <<<<<<<<<<<<<<
 *             result.extend(b's')
 *         if flags & _M:
 */
    __pyx_t_4 = ((__pyx_v_flags & __pyx_v_3re2__S) != 0);
    if (__pyx_t_4) {

      /* "compile.pxi":126
 *         result.extend(b'(?')
 *         if flags & _S:
 *             result.extend(b's')             # <<<<<<<<<<<<<<
 *         if flags & _M:
 *             result.extend(b'm')
 */
      __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_n_b_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "compile.pxi":125
 *     if flags & (_S | _M):
 *         result.extend(b'(?')
 *         if flags & _S:             # <<<<<<<<<<<<<<
 *             result.extend(b's')
 *         if flags & _M:
 */
    }

    /* "compile.pxi":127
 *         if flags & _S:
 *             result.extend(b's')
 *         if flags & _M:             # <<<<<<<<<<<<<<
 *             result.extend(b'm')
 *         result.extend(b')')
 */
    __pyx_t_4 = ((__pyx_v_flags & __pyx_v_3re2__M) != 0);
    if (__pyx_t_4) {

      /* "compile.pxi":128
 *             result.extend(b's')
 *         if flags & _M:
 *             result.extend(b'm')             # <<<<<<<<<<<<<<
 *         result.extend(b')')
 *     while n < size:
 */
      __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_n_b_m); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "compile.pxi":127
 *         if flags & _S:
 *             result.extend(b's')
 *         if flags & _M:             # <<<<<<<<<<<<<<
 *             result.extend(b'm')
 *         result.extend(b')')
 */
    }

    /* "compile.pxi":129
 *         if flags & _M:
 *             result.extend(b'm')
 *         result.extend(b')')             # <<<<<<<<<<<<<<
 *     while n < size:
 *         this = cstring[n]
 */
    __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_kp_b__5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "compile.pxi":123
 *     cdef int n = 0
 * 
 *     if flags & (_S | _M):             # <<<<<<<<<<<<<<
 *         result.extend(b'(?')
 *         if flags & _S:
 */
  }

  /* "compile.pxi":130
 *             result.extend(b'm')
 *         result.extend(b')')
 *     while n < size:             # <<<<<<<<<<<<<<
 *         this = cstring[n]
 *         if flags & _X:
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_n < __pyx_v_size) != 0);
    if (!__pyx_t_4) break;

    /* "compile.pxi":131
 *         result.extend(b')')
 *     while n < size:
 *         this = cstring[n]             # <<<<<<<<<<<<<<
 *         if flags & _X:
 *             if this in b' \t\n\r\f\v':
 */
    __pyx_v_this = (__pyx_v_cstring[__pyx_v_n]);

    /* "compile.pxi":132
 *     while n < size:
 *         this = cstring[n]
 *         if flags & _X:             # <<<<<<<<<<<<<<
 *             if this in b' \t\n\r\f\v':
 *                 n += 1
 */
    __pyx_t_4 = ((__pyx_v_flags & __pyx_v_3re2__X) != 0);
    if (__pyx_t_4) {

      /* "compile.pxi":133
 *         this = cstring[n]
 *         if flags & _X:
 *             if this in b' \t\n\r\f\v':             # <<<<<<<<<<<<<<
 *                 n += 1
 *                 continue
 */
      switch (__pyx_v_this) {
        case '\t':
        case '\n':
        case '\x0B':
        case '\x0C':
        case '\r':
        case ' ':

        /* "compile.pxi":134
 *         if flags & _X:
 *             if this in b' \t\n\r\f\v':
 *                 n += 1             # <<<<<<<<<<<<<<
 *                 continue
 *             elif this == b'#':
 */
        __pyx_v_n = (__pyx_v_n + 1);

        /* "compile.pxi":135
 *             if this in b' \t\n\r\f\v':
 *                 n += 1
 *                 continue             # <<<<<<<<<<<<<<
 *             elif this == b'#':
 *                 while True:
 */
        goto __pyx_L6_continue;

        /* "compile.pxi":133
 *         this = cstring[n]
 *         if flags & _X:
 *             if this in b' \t\n\r\f\v':             # <<<<<<<<<<<<<<
 *                 n += 1
 *                 continue
 */
        break;
        case '#':

        /* "compile.pxi":137
 *                 continue
 *             elif this == b'#':
 *                 while True:             # <<<<<<<<<<<<<<
 *                     n += 1
 *                     if n >= size:
 */
        while (1) {

          /* "compile.pxi":138
 *             elif this == b'#':
 *                 while True:
 *                     n += 1             # <<<<<<<<<<<<<<
 *                     if n >= size:
 *                         break
 */
          __pyx_v_n = (__pyx_v_n + 1);

          /* "compile.pxi":139
 *                 while True:
 *                     n += 1
 *                     if n >= size:             # <<<<<<<<<<<<<<
 *                         break
 *                     this = cstring[n]
 */
          __pyx_t_4 = ((__pyx_v_n >= __pyx_v_size) != 0);
          if (__pyx_t_4) {

            /* "compile.pxi":140
 *                     n += 1
 *                     if n >= size:
 *                         break             # <<<<<<<<<<<<<<
 *                     this = cstring[n]
 *                     if this == b'\n':
 */
            goto __pyx_L10_break;

            /* "compile.pxi":139
 *                 while True:
 *                     n += 1
 *                     if n >= size:             # <<<<<<<<<<<<<<
 *                         break
 *                     this = cstring[n]
 */
          }

          /* "compile.pxi":141
 *                     if n >= size:
 *                         break
 *                     this = cstring[n]             # <<<<<<<<<<<<<<
 *                     if this == b'\n':
 *                         break
 */
          __pyx_v_this = (__pyx_v_cstring[__pyx_v_n]);

          /* "compile.pxi":142
 *                         break
 *                     this = cstring[n]
 *                     if this == b'\n':             # <<<<<<<<<<<<<<
 *                         break
 *                 n += 1
 */
          __pyx_t_4 = ((__pyx_v_this == '\n') != 0);
          if (__pyx_t_4) {

            /* "compile.pxi":143
 *                     this = cstring[n]
 *                     if this == b'\n':
 *                         break             # <<<<<<<<<<<<<<
 *                 n += 1
 *                 continue
 */
            goto __pyx_L10_break;

            /* "compile.pxi":142
 *                         break
 *                     this = cstring[n]
 *                     if this == b'\n':             # <<<<<<<<<<<<<<
 *                         break
 *                 n += 1
 */
          }
        }
        __pyx_L10_break:;

        /* "compile.pxi":144
 *                     if this == b'\n':
 *                         break
 *                 n += 1             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
        __pyx_v_n = (__pyx_v_n + 1);

        /* "compile.pxi":145
 *                         break
 *                 n += 1
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *         if this != b'[' and this != b'\\':
 */
        goto __pyx_L6_continue;

        /* "compile.pxi":136
 *                 n += 1
 *                 continue
 *             elif this == b'#':             # <<<<<<<<<<<<<<
 *                 while True:
 *                     n += 1
 */
        break;
        default: break;
      }

      /* "compile.pxi":132
 *     while n < size:
 *         this = cstring[n]
 *         if flags & _X:             # <<<<<<<<<<<<<<
 *             if this in b' \t\n\r\f\v':
 *                 n += 1
 */
    }

    /* "compile.pxi":147
 *                 continue
 * 
 *         if this != b'[' and this != b'\\':             # <<<<<<<<<<<<<<
 *             result.append(this)
 *             n += 1
 */
    switch (__pyx_v_this) {
      case '[':
      case '\\':
      __pyx_t_4 = 0;
      break;
      default:
      __pyx_t_4 = 1;
      break;
    }
    if (__pyx_t_4) {

      /* "compile.pxi":148
 * 
 *         if this != b'[' and this != b'\\':
 *             result.append(this)             # <<<<<<<<<<<<<<
 *             n += 1
 *             continue
 */
      __pyx_t_5 = __Pyx_PyByteArray_Append(__pyx_v_result, __pyx_v_this); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 148, __pyx_L1_error)

      /* "compile.pxi":149
 *         if this != b'[' and this != b'\\':
 *             result.append(this)
 *             n += 1             # <<<<<<<<<<<<<<
 *             continue
 *         elif this == b'[':
 */
      __pyx_v_n = (__pyx_v_n + 1);

      /* "compile.pxi":150
 *             result.append(this)
 *             n += 1
 *             continue             # <<<<<<<<<<<<<<
 *         elif this == b'[':
 *             result.append(this)
 */
      goto __pyx_L6_continue;

      /* "compile.pxi":147
 *                 continue
 * 
 *         if this != b'[' and this != b'\\':             # <<<<<<<<<<<<<<
 *             result.append(this)
 *             n += 1
 */
    }

    /* "compile.pxi":151
 *             n += 1
 *             continue
 *         elif this == b'[':             # <<<<<<<<<<<<<<
 *             result.append(this)
 *             while True:
 */
    __pyx_t_4 = ((__pyx_v_this == '[') != 0);
    if (__pyx_t_4) {

      /* "compile.pxi":152
 *             continue
 *         elif this == b'[':
 *             result.append(this)             # <<<<<<<<<<<<<<
 *             while True:
 *                 n += 1
 */
      __pyx_t_5 = __Pyx_PyByteArray_Append(__pyx_v_result, __pyx_v_this); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 152, __pyx_L1_error)

      /* "compile.pxi":153
 *         elif this == b'[':
 *             result.append(this)
 *             while True:             # <<<<<<<<<<<<<<
 *                 n += 1
 *                 if n >= size:
 */
      while (1) {

        /* "compile.pxi":154
 *             result.append(this)
 *             while True:
 *                 n += 1             # <<<<<<<<<<<<<<
 *                 if n >= size:
 *                     raise RegexError("unexpected end of regular expression")
 */
        __pyx_v_n = (__pyx_v_n + 1);

        /* "compile.pxi":155
 *             while True:
 *                 n += 1
 *                 if n >= size:             # <<<<<<<<<<<<<<
 *                     raise RegexError("unexpected end of regular expression")
 *                 this = cstring[n]
 */
        __pyx_t_4 = ((__pyx_v_n >= __pyx_v_size) != 0);
        if (unlikely(__pyx_t_4)) {

          /* "compile.pxi":156
 *                 n += 1
 *                 if n >= size:
 *                     raise RegexError("unexpected end of regular expression")             # <<<<<<<<<<<<<<
 *                 this = cstring[n]
 *                 if this == b']':
 */
          __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_RegexError); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 156, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_kp_u_unexpected_end_of_regular_expres) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_u_unexpected_end_of_regular_expres);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_Raise(__pyx_t_1, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __PYX_ERR(0, 156, __pyx_L1_error)

          /* "compile.pxi":155
 *             while True:
 *                 n += 1
 *                 if n >= size:             # <<<<<<<<<<<<<<
 *                     raise RegexError("unexpected end of regular expression")
 *                 this = cstring[n]
 */
        }

        /* "compile.pxi":157
 *                 if n >= size:
 *                     raise RegexError("unexpected end of regular expression")
 *                 this = cstring[n]             # <<<<<<<<<<<<<<
 *                 if this == b']':
 *                     result.append(this)
 */
        __pyx_v_this = (__pyx_v_cstring[__pyx_v_n]);

        /* "compile.pxi":158
 *                     raise RegexError("unexpected end of regular expression")
 *                 this = cstring[n]
 *                 if this == b']':             # <<<<<<<<<<<<<<
 *                     result.append(this)
 *                     break
 */
        switch (__pyx_v_this) {
          case ']':

          /* "compile.pxi":159
 *                 this = cstring[n]
 *                 if this == b']':
 *                     result.append(this)             # <<<<<<<<<<<<<<
 *                     break
 *                 elif this == b'\\':
 */
          __pyx_t_5 = __Pyx_PyByteArray_Append(__pyx_v_result, __pyx_v_this); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 159, __pyx_L1_error)

          /* "compile.pxi":160
 *                 if this == b']':
 *                     result.append(this)
 *                     break             # <<<<<<<<<<<<<<
 *                 elif this == b'\\':
 *                     n += 1
 */
          goto __pyx_L15_break;

          /* "compile.pxi":158
 *                     raise RegexError("unexpected end of regular expression")
 *                 this = cstring[n]
 *                 if this == b']':             # <<<<<<<<<<<<<<
 *                     result.append(this)
 *                     break
 */
          break;
          case '\\':

          /* "compile.pxi":162
 *                     break
 *                 elif this == b'\\':
 *                     n += 1             # <<<<<<<<<<<<<<
 *                     that = cstring[n]
 *                     if that == b'b':
 */
          __pyx_v_n = (__pyx_v_n + 1);

          /* "compile.pxi":163
 *                 elif this == b'\\':
 *                     n += 1
 *                     that = cstring[n]             # <<<<<<<<<<<<<<
 *                     if that == b'b':
 *                         result.extend(br'\010')
 */
          __pyx_v_that = (__pyx_v_cstring[__pyx_v_n]);

          /* "compile.pxi":164
 *                     n += 1
 *                     that = cstring[n]
 *                     if that == b'b':             # <<<<<<<<<<<<<<
 *                         result.extend(br'\010')
 *                     elif flags & _U:
 */
          __pyx_t_4 = ((__pyx_v_that == 'b') != 0);
          if (__pyx_t_4) {

            /* "compile.pxi":165
 *                     that = cstring[n]
 *                     if that == b'b':
 *                         result.extend(br'\010')             # <<<<<<<<<<<<<<
 *                     elif flags & _U:
 *                         if that == b'd':
 */
            __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_kp_b_010); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "compile.pxi":164
 *                     n += 1
 *                     that = cstring[n]
 *                     if that == b'b':             # <<<<<<<<<<<<<<
 *                         result.extend(br'\010')
 *                     elif flags & _U:
 */
            goto __pyx_L17;
          }

          /* "compile.pxi":166
 *                     if that == b'b':
 *                         result.extend(br'\010')
 *                     elif flags & _U:             # <<<<<<<<<<<<<<
 *                         if that == b'd':
 *                             result.extend(br'\p{Nd}')
 */
          __pyx_t_4 = ((__pyx_v_flags & __pyx_v_3re2__U) != 0);
          if (__pyx_t_4) {

            /* "compile.pxi":167
 *                         result.extend(br'\010')
 *                     elif flags & _U:
 *                         if that == b'd':             # <<<<<<<<<<<<<<
 *                             result.extend(br'\p{Nd}')
 *                         elif that == b'w':
 */
            switch (__pyx_v_that) {
              case 'd':

              /* "compile.pxi":168
 *                     elif flags & _U:
 *                         if that == b'd':
 *                             result.extend(br'\p{Nd}')             # <<<<<<<<<<<<<<
 *                         elif that == b'w':
 *                             result.extend(br'_\p{L}\p{Nd}')
 */
              __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_kp_b_p_Nd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

              /* "compile.pxi":167
 *                         result.extend(br'\010')
 *                     elif flags & _U:
 *                         if that == b'd':             # <<<<<<<<<<<<<<
 *                             result.extend(br'\p{Nd}')
 *                         elif that == b'w':
 */
              break;
              case 'w':

              /* "compile.pxi":170
 *                             result.extend(br'\p{Nd}')
 *                         elif that == b'w':
 *                             result.extend(br'_\p{L}\p{Nd}')             # <<<<<<<<<<<<<<
 *                         elif that == b's':
 *                             result.extend(br'\s\p{Z}')
 */
              __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_kp_b_p_L_p_Nd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

              /* "compile.pxi":169
 *                         if that == b'd':
 *                             result.extend(br'\p{Nd}')
 *                         elif that == b'w':             # <<<<<<<<<<<<<<
 *                             result.extend(br'_\p{L}\p{Nd}')
 *                         elif that == b's':
 */
              break;
              case 's':

              /* "compile.pxi":172
 *                             result.extend(br'_\p{L}\p{Nd}')
 *                         elif that == b's':
 *                             result.extend(br'\s\p{Z}')             # <<<<<<<<<<<<<<
 *                         elif that == b'D':
 *                             result.extend(br'\P{Nd}')
 */
              __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_kp_b_s_p_Z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

              /* "compile.pxi":171
 *                         elif that == b'w':
 *                             result.extend(br'_\p{L}\p{Nd}')
 *                         elif that == b's':             # <<<<<<<<<<<<<<
 *                             result.extend(br'\s\p{Z}')
 *                         elif that == b'D':
 */
              break;
              case 'D':

              /* "compile.pxi":174
 *                             result.extend(br'\s\p{Z}')
 *                         elif that == b'D':
 *                             result.extend(br'\P{Nd}')             # <<<<<<<<<<<<<<
 *                         elif that == b'W':
 *                             # Since \w and \s are made out of several character
 */
              __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_kp_b_P_Nd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

              /* "compile.pxi":173
 *                         elif that == b's':
 *                             result.extend(br'\s\p{Z}')
 *                         elif that == b'D':             # <<<<<<<<<<<<<<
 *                             result.extend(br'\P{Nd}')
 *                         elif that == b'W':
 */
              break;
              case 'W':

              /* "compile.pxi":180
 *                             # complements into a group without rewriting the
 *                             # whole expression, which seems too complicated.
 *                             raise CharClassProblemException()             # <<<<<<<<<<<<<<
 *                         elif that == b'S':
 *                             raise CharClassProblemException()
 */
              __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_CharClassProblemException); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 180, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_7 = NULL;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
                __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
                if (likely(__pyx_t_7)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                  __Pyx_INCREF(__pyx_t_7);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_6, function);
                }
              }
              __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
              __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
              if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __Pyx_Raise(__pyx_t_1, 0, 0, 0);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __PYX_ERR(0, 180, __pyx_L1_error)

              /* "compile.pxi":175
 *                         elif that == b'D':
 *                             result.extend(br'\P{Nd}')
 *                         elif that == b'W':             # <<<<<<<<<<<<<<
 *                             # Since \w and \s are made out of several character
 *                             # groups, I don't see a way to convert their
 */
              break;
              case 'S':

              /* "compile.pxi":182
 *                             raise CharClassProblemException()
 *                         elif that == b'S':
 *                             raise CharClassProblemException()             # <<<<<<<<<<<<<<
 *                         else:
 *                             result.append(this)
 */
              __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_CharClassProblemException); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 182, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_7 = NULL;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
                __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
                if (likely(__pyx_t_7)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                  __Pyx_INCREF(__pyx_t_7);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_6, function);
                }
              }
              __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
              __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
              if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 182, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __Pyx_Raise(__pyx_t_1, 0, 0, 0);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __PYX_ERR(0, 182, __pyx_L1_error)

              /* "compile.pxi":181
 *                             # whole expression, which seems too complicated.
 *                             raise CharClassProblemException()
 *                         elif that == b'S':             # <<<<<<<<<<<<<<
 *                             raise CharClassProblemException()
 *                         else:
 */
              break;
              default:

              /* "compile.pxi":184
 *                             raise CharClassProblemException()
 *                         else:
 *                             result.append(this)             # <<<<<<<<<<<<<<
 *                             result.append(that)
 *                     else:
 */
              __pyx_t_5 = __Pyx_PyByteArray_Append(__pyx_v_result, __pyx_v_this); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 184, __pyx_L1_error)

              /* "compile.pxi":185
 *                         else:
 *                             result.append(this)
 *                             result.append(that)             # <<<<<<<<<<<<<<
 *                     else:
 *                         result.append(this)
 */
              __pyx_t_5 = __Pyx_PyByteArray_Append(__pyx_v_result, __pyx_v_that); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 185, __pyx_L1_error)
              break;
            }

            /* "compile.pxi":166
 *                     if that == b'b':
 *                         result.extend(br'\010')
 *                     elif flags & _U:             # <<<<<<<<<<<<<<
 *                         if that == b'd':
 *                             result.extend(br'\p{Nd}')
 */
            goto __pyx_L17;
          }

          /* "compile.pxi":187
 *                             result.append(that)
 *                     else:
 *                         result.append(this)             # <<<<<<<<<<<<<<
 *                         result.append(that)
 *                 else:
 */
          /*else*/ {
            __pyx_t_5 = __Pyx_PyByteArray_Append(__pyx_v_result, __pyx_v_this); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 187, __pyx_L1_error)

            /* "compile.pxi":188
 *                     else:
 *                         result.append(this)
 *                         result.append(that)             # <<<<<<<<<<<<<<
 *                 else:
 *                     result.append(this)
 */
            __pyx_t_5 = __Pyx_PyByteArray_Append(__pyx_v_result, __pyx_v_that); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 188, __pyx_L1_error)
          }
          __pyx_L17:;

          /* "compile.pxi":161
 *                     result.append(this)
 *                     break
 *                 elif this == b'\\':             # <<<<<<<<<<<<<<
 *                     n += 1
 *                     that = cstring[n]
 */
          break;
          default:

          /* "compile.pxi":190
 *                         result.append(that)
 *                 else:
 *                     result.append(this)             # <<<<<<<<<<<<<<
 *         elif this == b'\\':
 *             n += 1
 */
          __pyx_t_5 = __Pyx_PyByteArray_Append(__pyx_v_result, __pyx_v_this); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 190, __pyx_L1_error)
          break;
        }
      }
      __pyx_L15_break:;

      /* "compile.pxi":151
 *             n += 1
 *             continue
 *         elif this == b'[':             # <<<<<<<<<<<<<<
 *             result.append(this)
 *             while True:
 */
      goto __pyx_L13;
    }

    /* "compile.pxi":191
 *                 else:
 *                     result.append(this)
 *         elif this == b'\\':             # <<<<<<<<<<<<<<
 *             n += 1
 *             that = cstring[n]
 */
    __pyx_t_4 = ((__pyx_v_this == '\\') != 0);
    if (__pyx_t_4) {

      /* "compile.pxi":192
 *                     result.append(this)
 *         elif this == b'\\':
 *             n += 1             # <<<<<<<<<<<<<<
 *             that = cstring[n]
 *             if b'8' <= that <= b'9':
 */
      __pyx_v_n = (__pyx_v_n + 1);

      /* "compile.pxi":193
 *         elif this == b'\\':
 *             n += 1
 *             that = cstring[n]             # <<<<<<<<<<<<<<
 *             if b'8' <= that <= b'9':
 *                 raise BackreferencesException()
 */
      __pyx_v_that = (__pyx_v_cstring[__pyx_v_n]);

      /* "compile.pxi":194
 *             n += 1
 *             that = cstring[n]
 *             if b'8' <= that <= b'9':             # <<<<<<<<<<<<<<
 *                 raise BackreferencesException()
 *             elif isoct(that):
 */
      __pyx_t_4 = ('8' <= __pyx_v_that);
      if (__pyx_t_4) {
        __pyx_t_4 = (__pyx_v_that <= '9');
      }
      __pyx_t_8 = (__pyx_t_4 != 0);
      if (unlikely(__pyx_t_8)) {

        /* "compile.pxi":195
 *             that = cstring[n]
 *             if b'8' <= that <= b'9':
 *                 raise BackreferencesException()             # <<<<<<<<<<<<<<
 *             elif isoct(that):
 *                 if (n + 2 < size and isoct(cstring[n + 1])
 */
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_BackreferencesException); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 195, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_Raise(__pyx_t_1, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __PYX_ERR(0, 195, __pyx_L1_error)

        /* "compile.pxi":194
 *             n += 1
 *             that = cstring[n]
 *             if b'8' <= that <= b'9':             # <<<<<<<<<<<<<<
 *                 raise BackreferencesException()
 *             elif isoct(that):
 */
      }

      /* "compile.pxi":196
 *             if b'8' <= that <= b'9':
 *                 raise BackreferencesException()
 *             elif isoct(that):             # <<<<<<<<<<<<<<
 *                 if (n + 2 < size and isoct(cstring[n + 1])
 *                         and isoct(cstring[n + 2])):
 */
      __pyx_t_8 = (__pyx_f_3re2_isoct(__pyx_v_that) != 0);
      if (__pyx_t_8) {

        /* "compile.pxi":197
 *                 raise BackreferencesException()
 *             elif isoct(that):
 *                 if (n + 2 < size and isoct(cstring[n + 1])             # <<<<<<<<<<<<<<
 *                         and isoct(cstring[n + 2])):
 *                     # all clear, this is an octal escape
 */
        __pyx_t_4 = (((__pyx_v_n + 2) < __pyx_v_size) != 0);
        if (__pyx_t_4) {
        } else {
          __pyx_t_8 = __pyx_t_4;
          goto __pyx_L20_bool_binop_done;
        }

        /* "compile.pxi":198
 *             elif isoct(that):
 *                 if (n + 2 < size and isoct(cstring[n + 1])
 *                         and isoct(cstring[n + 2])):             # <<<<<<<<<<<<<<
 *                     # all clear, this is an octal escape
 *                     result.extend(cstring[n - 1:n + 3])
 */
        __pyx_t_4 = (__pyx_f_3re2_isoct((__pyx_v_cstring[(__pyx_v_n + 1)])) != 0);
        if (__pyx_t_4) {
        } else {
          __pyx_t_8 = __pyx_t_4;
          goto __pyx_L20_bool_binop_done;
        }
        __pyx_t_4 = (__pyx_f_3re2_isoct((__pyx_v_cstring[(__pyx_v_n + 2)])) != 0);
        __pyx_t_8 = __pyx_t_4;
        __pyx_L20_bool_binop_done:;

        /* "compile.pxi":197
 *                 raise BackreferencesException()
 *             elif isoct(that):
 *                 if (n + 2 < size and isoct(cstring[n + 1])             # <<<<<<<<<<<<<<
 *                         and isoct(cstring[n + 2])):
 *                     # all clear, this is an octal escape
 */
        if (likely(__pyx_t_8)) {

          /* "compile.pxi":200
 *                         and isoct(cstring[n + 2])):
 *                     # all clear, this is an octal escape
 *                     result.extend(cstring[n - 1:n + 3])             # <<<<<<<<<<<<<<
 *                     n += 2
 *                 else:
 */
          __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(((const char*)__pyx_v_cstring) + (__pyx_v_n - 1), (__pyx_v_n + 3) - (__pyx_v_n - 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_6 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 200, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "compile.pxi":201
 *                     # all clear, this is an octal escape
 *                     result.extend(cstring[n - 1:n + 3])
 *                     n += 2             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise BackreferencesException()
 */
          __pyx_v_n = (__pyx_v_n + 2);

          /* "compile.pxi":197
 *                 raise BackreferencesException()
 *             elif isoct(that):
 *                 if (n + 2 < size and isoct(cstring[n + 1])             # <<<<<<<<<<<<<<
 *                         and isoct(cstring[n + 2])):
 *                     # all clear, this is an octal escape
 */
          goto __pyx_L19;
        }

        /* "compile.pxi":203
 *                     n += 2
 *                 else:
 *                     raise BackreferencesException()             # <<<<<<<<<<<<<<
 *             elif that == b'x':
 *                 if (n + 2 < size and ishex(cstring[n + 1])
 */
        /*else*/ {
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BackreferencesException); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
            }
          }
          __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 203, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_Raise(__pyx_t_6, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __PYX_ERR(0, 203, __pyx_L1_error)
        }
        __pyx_L19:;

        /* "compile.pxi":196
 *             if b'8' <= that <= b'9':
 *                 raise BackreferencesException()
 *             elif isoct(that):             # <<<<<<<<<<<<<<
 *                 if (n + 2 < size and isoct(cstring[n + 1])
 *                         and isoct(cstring[n + 2])):
 */
        goto __pyx_L18;
      }

      /* "compile.pxi":204
 *                 else:
 *                     raise BackreferencesException()
 *             elif that == b'x':             # <<<<<<<<<<<<<<
 *                 if (n + 2 < size and ishex(cstring[n + 1])
 *                         and ishex(cstring[n + 2])):
 */
      __pyx_t_8 = ((__pyx_v_that == 'x') != 0);
      if (__pyx_t_8) {

        /* "compile.pxi":205
 *                     raise BackreferencesException()
 *             elif that == b'x':
 *                 if (n + 2 < size and ishex(cstring[n + 1])             # <<<<<<<<<<<<<<
 *                         and ishex(cstring[n + 2])):
 *                     # hex escape
 */
        __pyx_t_4 = (((__pyx_v_n + 2) < __pyx_v_size) != 0);
        if (__pyx_t_4) {
        } else {
          __pyx_t_8 = __pyx_t_4;
          goto __pyx_L24_bool_binop_done;
        }

        /* "compile.pxi":206
 *             elif that == b'x':
 *                 if (n + 2 < size and ishex(cstring[n + 1])
 *                         and ishex(cstring[n + 2])):             # <<<<<<<<<<<<<<
 *                     # hex escape
 *                     result.extend(cstring[n - 1:n + 3])
 */
        __pyx_t_4 = (__pyx_f_3re2_ishex((__pyx_v_cstring[(__pyx_v_n + 1)])) != 0);
        if (__pyx_t_4) {
        } else {
          __pyx_t_8 = __pyx_t_4;
          goto __pyx_L24_bool_binop_done;
        }
        __pyx_t_4 = (__pyx_f_3re2_ishex((__pyx_v_cstring[(__pyx_v_n + 2)])) != 0);
        __pyx_t_8 = __pyx_t_4;
        __pyx_L24_bool_binop_done:;

        /* "compile.pxi":205
 *                     raise BackreferencesException()
 *             elif that == b'x':
 *                 if (n + 2 < size and ishex(cstring[n + 1])             # <<<<<<<<<<<<<<
 *                         and ishex(cstring[n + 2])):
 *                     # hex escape
 */
        if (likely(__pyx_t_8)) {

          /* "compile.pxi":208
 *                         and ishex(cstring[n + 2])):
 *                     # hex escape
 *                     result.extend(cstring[n - 1:n + 3])             # <<<<<<<<<<<<<<
 *                     n += 2
 *                 else:
 */
          __pyx_t_6 = __Pyx_PyBytes_FromStringAndSize(((const char*)__pyx_v_cstring) + (__pyx_v_n - 1), (__pyx_v_n + 3) - (__pyx_v_n - 1)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 208, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "compile.pxi":209
 *                     # hex escape
 *                     result.extend(cstring[n - 1:n + 3])
 *                     n += 2             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise BackreferencesException()
 */
          __pyx_v_n = (__pyx_v_n + 2);

          /* "compile.pxi":205
 *                     raise BackreferencesException()
 *             elif that == b'x':
 *                 if (n + 2 < size and ishex(cstring[n + 1])             # <<<<<<<<<<<<<<
 *                         and ishex(cstring[n + 2])):
 *                     # hex escape
 */
          goto __pyx_L23;
        }

        /* "compile.pxi":211
 *                     n += 2
 *                 else:
 *                     raise BackreferencesException()             # <<<<<<<<<<<<<<
 *             elif that == b'Z':
 *                 result.extend(b'\\z')
 */
        /*else*/ {
          __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_BackreferencesException); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 211, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_Raise(__pyx_t_1, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __PYX_ERR(0, 211, __pyx_L1_error)
        }
        __pyx_L23:;

        /* "compile.pxi":204
 *                 else:
 *                     raise BackreferencesException()
 *             elif that == b'x':             # <<<<<<<<<<<<<<
 *                 if (n + 2 < size and ishex(cstring[n + 1])
 *                         and ishex(cstring[n + 2])):
 */
        goto __pyx_L18;
      }

      /* "compile.pxi":212
 *                 else:
 *                     raise BackreferencesException()
 *             elif that == b'Z':             # <<<<<<<<<<<<<<
 *                 result.extend(b'\\z')
 *             elif flags & _U:
 */
      __pyx_t_8 = ((__pyx_v_that == 'Z') != 0);
      if (__pyx_t_8) {

        /* "compile.pxi":213
 *                     raise BackreferencesException()
 *             elif that == b'Z':
 *                 result.extend(b'\\z')             # <<<<<<<<<<<<<<
 *             elif flags & _U:
 *                 if that == b'd':
 */
        __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_kp_b_z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "compile.pxi":212
 *                 else:
 *                     raise BackreferencesException()
 *             elif that == b'Z':             # <<<<<<<<<<<<<<
 *                 result.extend(b'\\z')
 *             elif flags & _U:
 */
        goto __pyx_L18;
      }

      /* "compile.pxi":214
 *             elif that == b'Z':
 *                 result.extend(b'\\z')
 *             elif flags & _U:             # <<<<<<<<<<<<<<
 *                 if that == b'd':
 *                     result.extend(br'\p{Nd}')
 */
      __pyx_t_8 = ((__pyx_v_flags & __pyx_v_3re2__U) != 0);
      if (__pyx_t_8) {

        /* "compile.pxi":215
 *                 result.extend(b'\\z')
 *             elif flags & _U:
 *                 if that == b'd':             # <<<<<<<<<<<<<<
 *                     result.extend(br'\p{Nd}')
 *                 elif that == b'w':
 */
        switch (__pyx_v_that) {
          case 'd':

          /* "compile.pxi":216
 *             elif flags & _U:
 *                 if that == b'd':
 *                     result.extend(br'\p{Nd}')             # <<<<<<<<<<<<<<
 *                 elif that == b'w':
 *                     result.extend(br'[_\p{L}\p{Nd}]')
 */
          __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_kp_b_p_Nd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "compile.pxi":215
 *                 result.extend(b'\\z')
 *             elif flags & _U:
 *                 if that == b'd':             # <<<<<<<<<<<<<<
 *                     result.extend(br'\p{Nd}')
 *                 elif that == b'w':
 */
          break;
          case 'w':

          /* "compile.pxi":218
 *                     result.extend(br'\p{Nd}')
 *                 elif that == b'w':
 *                     result.extend(br'[_\p{L}\p{Nd}]')             # <<<<<<<<<<<<<<
 *                 elif that == b's':
 *                     result.extend(br'[\s\p{Z}]')
 */
          __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_kp_b_p_L_p_Nd_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "compile.pxi":217
 *                 if that == b'd':
 *                     result.extend(br'\p{Nd}')
 *                 elif that == b'w':             # <<<<<<<<<<<<<<
 *                     result.extend(br'[_\p{L}\p{Nd}]')
 *                 elif that == b's':
 */
          break;
          case 's':

          /* "compile.pxi":220
 *                     result.extend(br'[_\p{L}\p{Nd}]')
 *                 elif that == b's':
 *                     result.extend(br'[\s\p{Z}]')             # <<<<<<<<<<<<<<
 *                 elif that == b'D':
 *                     result.extend(br'[^\p{Nd}]')
 */
          __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_kp_b_s_p_Z_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "compile.pxi":219
 *                 elif that == b'w':
 *                     result.extend(br'[_\p{L}\p{Nd}]')
 *                 elif that == b's':             # <<<<<<<<<<<<<<
 *                     result.extend(br'[\s\p{Z}]')
 *                 elif that == b'D':
 */
          break;
          case 'D':

          /* "compile.pxi":222
 *                     result.extend(br'[\s\p{Z}]')
 *                 elif that == b'D':
 *                     result.extend(br'[^\p{Nd}]')             # <<<<<<<<<<<<<<
 *                 elif that == b'W':
 *                     result.extend(br'[^_\p{L}\p{Nd}]')
 */
          __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_kp_b_p_Nd_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "compile.pxi":221
 *                 elif that == b's':
 *                     result.extend(br'[\s\p{Z}]')
 *                 elif that == b'D':             # <<<<<<<<<<<<<<
 *                     result.extend(br'[^\p{Nd}]')
 *                 elif that == b'W':
 */
          break;
          case 'W':

          /* "compile.pxi":224
 *                     result.extend(br'[^\p{Nd}]')
 *                 elif that == b'W':
 *                     result.extend(br'[^_\p{L}\p{Nd}]')             # <<<<<<<<<<<<<<
 *                 elif that == b'S':
 *                     result.extend(br'[^\s\p{Z}]')
 */
          __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_kp_b_p_L_p_Nd_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "compile.pxi":223
 *                 elif that == b'D':
 *                     result.extend(br'[^\p{Nd}]')
 *                 elif that == b'W':             # <<<<<<<<<<<<<<
 *                     result.extend(br'[^_\p{L}\p{Nd}]')
 *                 elif that == b'S':
 */
          break;
          case 'S':

          /* "compile.pxi":226
 *                     result.extend(br'[^_\p{L}\p{Nd}]')
 *                 elif that == b'S':
 *                     result.extend(br'[^\s\p{Z}]')             # <<<<<<<<<<<<<<
 *                 else:
 *                     result.append(this)
 */
          __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_kp_b_s_p_Z_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "compile.pxi":225
 *                 elif that == b'W':
 *                     result.extend(br'[^_\p{L}\p{Nd}]')
 *                 elif that == b'S':             # <<<<<<<<<<<<<<
 *                     result.extend(br'[^\s\p{Z}]')
 *                 else:
 */
          break;
          default:

          /* "compile.pxi":228
 *                     result.extend(br'[^\s\p{Z}]')
 *                 else:
 *                     result.append(this)             # <<<<<<<<<<<<<<
 *                     result.append(that)
 *             else:
 */
          __pyx_t_5 = __Pyx_PyByteArray_Append(__pyx_v_result, __pyx_v_this); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 228, __pyx_L1_error)

          /* "compile.pxi":229
 *                 else:
 *                     result.append(this)
 *                     result.append(that)             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(this)
 */
          __pyx_t_5 = __Pyx_PyByteArray_Append(__pyx_v_result, __pyx_v_that); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 229, __pyx_L1_error)
          break;
        }

        /* "compile.pxi":214
 *             elif that == b'Z':
 *                 result.extend(b'\\z')
 *             elif flags & _U:             # <<<<<<<<<<<<<<
 *                 if that == b'd':
 *                     result.extend(br'\p{Nd}')
 */
        goto __pyx_L18;
      }

      /* "compile.pxi":231
 *                     result.append(that)
 *             else:
 *                 result.append(this)             # <<<<<<<<<<<<<<
 *                 result.append(that)
 *         n += 1
 */
      /*else*/ {
        __pyx_t_5 = __Pyx_PyByteArray_Append(__pyx_v_result, __pyx_v_this); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 231, __pyx_L1_error)

        /* "compile.pxi":232
 *             else:
 *                 result.append(this)
 *                 result.append(that)             # <<<<<<<<<<<<<<
 *         n += 1
 *     return bytes(result)
 */
        __pyx_t_5 = __Pyx_PyByteArray_Append(__pyx_v_result, __pyx_v_that); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 232, __pyx_L1_error)
      }
      __pyx_L18:;

      /* "compile.pxi":191
 *                 else:
 *                     result.append(this)
 *         elif this == b'\\':             # <<<<<<<<<<<<<<
 *             n += 1
 *             that = cstring[n]
 */
    }
    __pyx_L13:;

    /* "compile.pxi":233
 *                 result.append(this)
 *                 result.append(that)
 *         n += 1             # <<<<<<<<<<<<<<
 *     return bytes(result)
 */
    __pyx_v_n = (__pyx_v_n + 1);
    __pyx_L6_continue:;
  }

  /* "compile.pxi":234
 *                 result.append(that)
 *         n += 1
 *     return bytes(result)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "compile.pxi":115
 * 
 * 
 * def _prepare_pattern(bytes pattern, int flags):             # <<<<<<<<<<<<<<
 *     """Translate pattern to RE2 syntax."""
 *     cdef bytearray result = bytearray()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("re2._prepare_pattern", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":11
 *     cdef RE2 * re_pattern
 * 
 *     def search(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """Scan through string looking for a match, and return a corresponding
 *         Match instance. Return None if no position in the string matches."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_7Pattern_1search(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_7Pattern_search[] = "Scan through string looking for a match, and return a corresponding\n        Match instance. Return None if no position in the string matches.";
static PyObject *__pyx_pw_3re2_7Pattern_1search(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_string = 0;
  int __pyx_v_pos;
  int __pyx_v_endpos;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("search (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_string,&__pyx_n_s_pos,&__pyx_n_s_endpos,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_endpos);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "search") < 0)) __PYX_ERR(1, 11, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_string = values[0];
    if (values[1]) {
      __pyx_v_pos = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 11, __pyx_L3_error)
    } else {
      __pyx_v_pos = ((int)0);
    }
    if (values[2]) {
      __pyx_v_endpos = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 11, __pyx_L3_error)
    } else {
      __pyx_v_endpos = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("search", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 11, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Pattern.search", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_7Pattern_search(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_string, __pyx_v_pos, __pyx_v_endpos);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_7Pattern_search(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("search", 0);

  /* "pattern.pxi":14
 *         """Scan through string looking for a match, and return a corresponding
 *         Match instance. Return None if no position in the string matches."""
 *         return self._search(string, pos, endpos, UNANCHORED)             # <<<<<<<<<<<<<<
 * 
 *     def match(self, object string, int pos=0, int endpos=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Pattern *)__pyx_v_self->__pyx_vtab)->_search(__pyx_v_self, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos, RE2::UNANCHORED); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":11
 *     cdef RE2 * re_pattern
 * 
 *     def search(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """Scan through string looking for a match, and return a corresponding
 *         Match instance. Return None if no position in the string matches."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Pattern.search", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":16
 *         return self._search(string, pos, endpos, UNANCHORED)
 * 
 *     def match(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """Matches zero or more characters at the beginning of the string."""
 *         return self._search(string, pos, endpos, ANCHOR_START)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_7Pattern_3match(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_7Pattern_2match[] = "Matches zero or more characters at the beginning of the string.";
static PyObject *__pyx_pw_3re2_7Pattern_3match(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_string = 0;
  int __pyx_v_pos;
  int __pyx_v_endpos;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("match (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_string,&__pyx_n_s_pos,&__pyx_n_s_endpos,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_endpos);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "match") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_string = values[0];
    if (values[1]) {
      __pyx_v_pos = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
    } else {
      __pyx_v_pos = ((int)0);
    }
    if (values[2]) {
      __pyx_v_endpos = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
    } else {
      __pyx_v_endpos = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("match", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Pattern.match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_7Pattern_2match(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_string, __pyx_v_pos, __pyx_v_endpos);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_7Pattern_2match(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("match", 0);

  /* "pattern.pxi":18
 *     def match(self, object string, int pos=0, int endpos=-1):
 *         """Matches zero or more characters at the beginning of the string."""
 *         return self._search(string, pos, endpos, ANCHOR_START)             # <<<<<<<<<<<<<<
 * 
 *     def fullmatch(self, object string, int pos=0, int endpos=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Pattern *)__pyx_v_self->__pyx_vtab)->_search(__pyx_v_self, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos, RE2::ANCHOR_START); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":16
 *         return self._search(string, pos, endpos, UNANCHORED)
 * 
 *     def match(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """Matches zero or more characters at the beginning of the string."""
 *         return self._search(string, pos, endpos, ANCHOR_START)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Pattern.match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":20
 *         return self._search(string, pos, endpos, ANCHOR_START)
 * 
 *     def fullmatch(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """"fullmatch(string[, pos[, endpos]]) --> Match object or None."
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_7Pattern_5fullmatch(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_7Pattern_4fullmatch[] = "\"fullmatch(string[, pos[, endpos]]) --> Match object or None.\"\n\n        Matches the entire string.";
static PyObject *__pyx_pw_3re2_7Pattern_5fullmatch(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_string = 0;
  int __pyx_v_pos;
  int __pyx_v_endpos;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fullmatch (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_string,&__pyx_n_s_pos,&__pyx_n_s_endpos,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_endpos);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fullmatch") < 0)) __PYX_ERR(1, 20, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_string = values[0];
    if (values[1]) {
      __pyx_v_pos = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 20, __pyx_L3_error)
    } else {
      __pyx_v_pos = ((int)0);
    }
    if (values[2]) {
      __pyx_v_endpos = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 20, __pyx_L3_error)
    } else {
      __pyx_v_endpos = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fullmatch", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 20, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Pattern.fullmatch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_7Pattern_4fullmatch(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_string, __pyx_v_pos, __pyx_v_endpos);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_7Pattern_4fullmatch(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fullmatch", 0);

  /* "pattern.pxi":24
 * 
 *         Matches the entire string."""
 *         return self._search(string, pos, endpos, ANCHOR_BOTH)             # <<<<<<<<<<<<<<
 * 
 *     cdef _search(self, object string, int pos, int endpos,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Pattern *)__pyx_v_self->__pyx_vtab)->_search(__pyx_v_self, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos, RE2::ANCHOR_BOTH); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":20
 *         return self._search(string, pos, endpos, ANCHOR_START)
 * 
 *     def fullmatch(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """"fullmatch(string[, pos[, endpos]]) --> Match object or None."
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Pattern.fullmatch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":26
 *         return self._search(string, pos, endpos, ANCHOR_BOTH)
 * 
 *     cdef _search(self, object string, int pos, int endpos,             # <<<<<<<<<<<<<<
 *             re2_Anchor anchoring):
 *         """Scan through string looking for a match, and return a corresponding
 */

static PyObject *__pyx_f_3re2_7Pattern__search(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos, RE2::Anchor __pyx_v_anchoring) {
  char *__pyx_v_cstring;
  Py_ssize_t __pyx_v_size;
  Py_buffer __pyx_v_buf;
  int __pyx_v_retval;
  int __pyx_v_encoded;
  re2::StringPiece *__pyx_v_sp;
  struct __pyx_obj_3re2_Match *__pyx_v_m = 0;
  int __pyx_v_cpos;
  int __pyx_v_upos;
  PyObject *__pyx_v_bytestr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_search", 0);

  /* "pattern.pxi":34
 *         cdef Py_buffer buf
 *         cdef int retval
 *         cdef int encoded = 0             # <<<<<<<<<<<<<<
 *         cdef StringPiece * sp
 *         cdef Match m = Match(self, self.groups + 1)
 */
  __pyx_v_encoded = 0;

  /* "pattern.pxi":36
 *         cdef int encoded = 0
 *         cdef StringPiece * sp
 *         cdef Match m = Match(self, self.groups + 1)             # <<<<<<<<<<<<<<
 *         cdef int cpos = 0, upos = pos
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_self->groups + 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3re2_Match), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_m = ((struct __pyx_obj_3re2_Match *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pattern.pxi":37
 *         cdef StringPiece * sp
 *         cdef Match m = Match(self, self.groups + 1)
 *         cdef int cpos = 0, upos = pos             # <<<<<<<<<<<<<<
 * 
 *         if 0 <= endpos <= pos:
 */
  __pyx_v_cpos = 0;
  __pyx_v_upos = __pyx_v_pos;

  /* "pattern.pxi":39
 *         cdef int cpos = 0, upos = pos
 * 
 *         if 0 <= endpos <= pos:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_3 = (0 <= __pyx_v_endpos);
  if (__pyx_t_3) {
    __pyx_t_3 = (__pyx_v_endpos <= __pyx_v_pos);
  }
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "pattern.pxi":40
 * 
 *         if 0 <= endpos <= pos:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "pattern.pxi":39
 *         cdef int cpos = 0, upos = pos
 * 
 *         if 0 <= endpos <= pos:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "pattern.pxi":42
 *             return None
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)             # <<<<<<<<<<<<<<
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')
 */
  __pyx_t_1 = __pyx_f_3re2_unicode_to_bytes(__pyx_v_string, (&__pyx_v_encoded), __pyx_v_self->encoded); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytestr = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pattern.pxi":43
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError('expected string or buffer')
 *         try:
 */
  __pyx_t_4 = ((__pyx_f_3re2_pystring_to_cstring(__pyx_v_bytestr, (&__pyx_v_cstring), (&__pyx_v_size), (&__pyx_v_buf)) == -1L) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "pattern.pxi":44
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')             # <<<<<<<<<<<<<<
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 44, __pyx_L1_error)

    /* "pattern.pxi":43
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError('expected string or buffer')
 *         try:
 */
  }

  /* "pattern.pxi":45
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')
 *         try:             # <<<<<<<<<<<<<<
 *             if encoded == 2 and (pos or endpos != -1):
 *                 utf8indices(cstring, size, &pos, &endpos)
 */
  /*try:*/ {

    /* "pattern.pxi":46
 *             raise TypeError('expected string or buffer')
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):             # <<<<<<<<<<<<<<
 *                 utf8indices(cstring, size, &pos, &endpos)
 *                 cpos = pos
 */
    __pyx_t_3 = ((__pyx_v_encoded == 2) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_4 = __pyx_t_3;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_v_pos != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_4 = __pyx_t_3;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_v_endpos != -1L) != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_4) {

      /* "pattern.pxi":47
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):
 *                 utf8indices(cstring, size, &pos, &endpos)             # <<<<<<<<<<<<<<
 *                 cpos = pos
 *             if pos > size:
 */
      __pyx_t_1 = __pyx_f_3re2_utf8indices(__pyx_v_cstring, __pyx_v_size, (&__pyx_v_pos), (&__pyx_v_endpos)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pattern.pxi":48
 *             if encoded == 2 and (pos or endpos != -1):
 *                 utf8indices(cstring, size, &pos, &endpos)
 *                 cpos = pos             # <<<<<<<<<<<<<<
 *             if pos > size:
 *                 return None
 */
      __pyx_v_cpos = __pyx_v_pos;

      /* "pattern.pxi":46
 *             raise TypeError('expected string or buffer')
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):             # <<<<<<<<<<<<<<
 *                 utf8indices(cstring, size, &pos, &endpos)
 *                 cpos = pos
 */
    }

    /* "pattern.pxi":49
 *                 utf8indices(cstring, size, &pos, &endpos)
 *                 cpos = pos
 *             if pos > size:             # <<<<<<<<<<<<<<
 *                 return None
 *             if 0 <= endpos < size:
 */
    __pyx_t_4 = ((__pyx_v_pos > __pyx_v_size) != 0);
    if (__pyx_t_4) {

      /* "pattern.pxi":50
 *                 cpos = pos
 *             if pos > size:
 *                 return None             # <<<<<<<<<<<<<<
 *             if 0 <= endpos < size:
 *                 size = endpos
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L5_return;

      /* "pattern.pxi":49
 *                 utf8indices(cstring, size, &pos, &endpos)
 *                 cpos = pos
 *             if pos > size:             # <<<<<<<<<<<<<<
 *                 return None
 *             if 0 <= endpos < size:
 */
    }

    /* "pattern.pxi":51
 *             if pos > size:
 *                 return None
 *             if 0 <= endpos < size:             # <<<<<<<<<<<<<<
 *                 size = endpos
 * 
 */
    __pyx_t_4 = (0 <= __pyx_v_endpos);
    if (__pyx_t_4) {
      __pyx_t_4 = (__pyx_v_endpos < __pyx_v_size);
    }
    __pyx_t_3 = (__pyx_t_4 != 0);
    if (__pyx_t_3) {

      /* "pattern.pxi":52
 *                 return None
 *             if 0 <= endpos < size:
 *                 size = endpos             # <<<<<<<<<<<<<<
 * 
 *             sp = new StringPiece(cstring, size)
 */
      __pyx_v_size = __pyx_v_endpos;

      /* "pattern.pxi":51
 *             if pos > size:
 *                 return None
 *             if 0 <= endpos < size:             # <<<<<<<<<<<<<<
 *                 size = endpos
 * 
 */
    }

    /* "pattern.pxi":54
 *                 size = endpos
 * 
 *             sp = new StringPiece(cstring, size)             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 retval = self.re_pattern.Match(
 */
    __pyx_v_sp = new re2::StringPiece(__pyx_v_cstring, __pyx_v_size);

    /* "pattern.pxi":55
 * 
 *             sp = new StringPiece(cstring, size)
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 retval = self.re_pattern.Match(
 *                         sp[0],
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "pattern.pxi":56
 *             sp = new StringPiece(cstring, size)
 *             with nogil:
 *                 retval = self.re_pattern.Match(             # <<<<<<<<<<<<<<
 *                         sp[0],
 *                         pos,
 */
          __pyx_v_retval = __pyx_v_self->re_pattern->Match((__pyx_v_sp[0]), __pyx_v_pos, __pyx_v_size, __pyx_v_anchoring, __pyx_v_m->matches, (__pyx_v_self->groups + 1));
        }

        /* "pattern.pxi":55
 * 
 *             sp = new StringPiece(cstring, size)
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 retval = self.re_pattern.Match(
 *                         sp[0],
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L16;
          }
          __pyx_L16:;
        }
    }

    /* "pattern.pxi":63
 *                         m.matches,
 *                         self.groups + 1)
 *             del sp             # <<<<<<<<<<<<<<
 *             if retval == 0:
 *                 return None
 */
    delete __pyx_v_sp;

    /* "pattern.pxi":64
 *                         self.groups + 1)
 *             del sp
 *             if retval == 0:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
    __pyx_t_3 = ((__pyx_v_retval == 0) != 0);
    if (__pyx_t_3) {

      /* "pattern.pxi":65
 *             del sp
 *             if retval == 0:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *             m.encoded = encoded
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L5_return;

      /* "pattern.pxi":64
 *                         self.groups + 1)
 *             del sp
 *             if retval == 0:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
    }

    /* "pattern.pxi":67
 *                 return None
 * 
 *             m.encoded = encoded             # <<<<<<<<<<<<<<
 *             m.nmatches = self.groups + 1
 *             m.string = string
 */
    __pyx_v_m->encoded = __pyx_v_encoded;

    /* "pattern.pxi":68
 * 
 *             m.encoded = encoded
 *             m.nmatches = self.groups + 1             # <<<<<<<<<<<<<<
 *             m.string = string
 *             m.pos = pos
 */
    __pyx_v_m->nmatches = (__pyx_v_self->groups + 1);

    /* "pattern.pxi":69
 *             m.encoded = encoded
 *             m.nmatches = self.groups + 1
 *             m.string = string             # <<<<<<<<<<<<<<
 *             m.pos = pos
 *             if endpos == -1:
 */
    __Pyx_INCREF(__pyx_v_string);
    __Pyx_GIVEREF(__pyx_v_string);
    __Pyx_GOTREF(__pyx_v_m->string);
    __Pyx_DECREF(__pyx_v_m->string);
    __pyx_v_m->string = __pyx_v_string;

    /* "pattern.pxi":70
 *             m.nmatches = self.groups + 1
 *             m.string = string
 *             m.pos = pos             # <<<<<<<<<<<<<<
 *             if endpos == -1:
 *                 m.endpos = size
 */
    __pyx_v_m->pos = __pyx_v_pos;

    /* "pattern.pxi":71
 *             m.string = string
 *             m.pos = pos
 *             if endpos == -1:             # <<<<<<<<<<<<<<
 *                 m.endpos = size
 *             else:
 */
    __pyx_t_3 = ((__pyx_v_endpos == -1L) != 0);
    if (__pyx_t_3) {

      /* "pattern.pxi":72
 *             m.pos = pos
 *             if endpos == -1:
 *                 m.endpos = size             # <<<<<<<<<<<<<<
 *             else:
 *                 m.endpos = endpos
 */
      __pyx_v_m->endpos = __pyx_v_size;

      /* "pattern.pxi":71
 *             m.string = string
 *             m.pos = pos
 *             if endpos == -1:             # <<<<<<<<<<<<<<
 *                 m.endpos = size
 *             else:
 */
      goto __pyx_L18;
    }

    /* "pattern.pxi":74
 *                 m.endpos = size
 *             else:
 *                 m.endpos = endpos             # <<<<<<<<<<<<<<
 *             m._make_spans(cstring, size, &cpos, &upos)
 *             m._init_groups()
 */
    /*else*/ {
      __pyx_v_m->endpos = __pyx_v_endpos;
    }
    __pyx_L18:;

    /* "pattern.pxi":75
 *             else:
 *                 m.endpos = endpos
 *             m._make_spans(cstring, size, &cpos, &upos)             # <<<<<<<<<<<<<<
 *             m._init_groups()
 *         finally:
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_m->__pyx_vtab)->_make_spans(__pyx_v_m, __pyx_v_cstring, __pyx_v_size, (&__pyx_v_cpos), (&__pyx_v_upos)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 75, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pattern.pxi":76
 *                 m.endpos = endpos
 *             m._make_spans(cstring, size, &cpos, &upos)
 *             m._init_groups()             # <<<<<<<<<<<<<<
 *         finally:
 *             release_cstring(&buf)
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_m->__pyx_vtab)->_init_groups(__pyx_v_m); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 76, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pattern.pxi":78
 *             m._init_groups()
 *         finally:
 *             release_cstring(&buf)             # <<<<<<<<<<<<<<
 *         return m
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_f_3re2_release_cstring((&__pyx_v_buf));
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_5 = __pyx_lineno; __pyx_t_6 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        __pyx_f_3re2_release_cstring((&__pyx_v_buf));
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_6; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L5_return: {
      __pyx_t_13 = __pyx_r;
      __pyx_r = 0;
      __pyx_f_3re2_release_cstring((&__pyx_v_buf));
      __pyx_r = __pyx_t_13;
      __pyx_t_13 = 0;
      goto __pyx_L0;
    }
    __pyx_L7:;
  }

  /* "pattern.pxi":79
 *         finally:
 *             release_cstring(&buf)
 *         return m             # <<<<<<<<<<<<<<
 * 
 *     def contains(self, object string, int pos=0, int endpos=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_m));
  __pyx_r = ((PyObject *)__pyx_v_m);
  goto __pyx_L0;

  /* "pattern.pxi":26
 *         return self._search(string, pos, endpos, ANCHOR_BOTH)
 * 
 *     cdef _search(self, object string, int pos, int endpos,             # <<<<<<<<<<<<<<
 *             re2_Anchor anchoring):
 *         """Scan through string looking for a match, and return a corresponding
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("re2.Pattern._search", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_bytestr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":81
 *         return m
 * 
 *     def contains(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """"contains(string[, pos[, endpos]]) --> bool."
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_7Pattern_7contains(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_7Pattern_6contains[] = "\"contains(string[, pos[, endpos]]) --> bool.\"\n\n        Scan through string looking for a match, and return True or False.";
static PyObject *__pyx_pw_3re2_7Pattern_7contains(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_string = 0;
  int __pyx_v_pos;
  int __pyx_v_endpos;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("contains (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_string,&__pyx_n_s_pos,&__pyx_n_s_endpos,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_endpos);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "contains") < 0)) __PYX_ERR(1, 81, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_string = values[0];
    if (values[1]) {
      __pyx_v_pos = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 81, __pyx_L3_error)
    } else {
      __pyx_v_pos = ((int)0);
    }
    if (values[2]) {
      __pyx_v_endpos = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 81, __pyx_L3_error)
    } else {
      __pyx_v_endpos = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("contains", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 81, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Pattern.contains", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_7Pattern_6contains(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_string, __pyx_v_pos, __pyx_v_endpos);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_7Pattern_6contains(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos) {
  char *__pyx_v_cstring;
  Py_ssize_t __pyx_v_size;
  Py_buffer __pyx_v_buf;
  int __pyx_v_retval;
  int __pyx_v_encoded;
  re2::StringPiece *__pyx_v_sp;
  PyObject *__pyx_v_bytestr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("contains", 0);

  /* "pattern.pxi":89
 *         cdef Py_buffer buf
 *         cdef int retval
 *         cdef int encoded = 0             # <<<<<<<<<<<<<<
 *         cdef StringPiece * sp
 * 
 */
  __pyx_v_encoded = 0;

  /* "pattern.pxi":92
 *         cdef StringPiece * sp
 * 
 *         if 0 <= endpos <= pos:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  __pyx_t_1 = (0 <= __pyx_v_endpos);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_endpos <= __pyx_v_pos);
  }
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pattern.pxi":93
 * 
 *         if 0 <= endpos <= pos:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "pattern.pxi":92
 *         cdef StringPiece * sp
 * 
 *         if 0 <= endpos <= pos:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  }

  /* "pattern.pxi":95
 *             return False
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)             # <<<<<<<<<<<<<<
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')
 */
  __pyx_t_3 = __pyx_f_3re2_unicode_to_bytes(__pyx_v_string, (&__pyx_v_encoded), __pyx_v_self->encoded); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_bytestr = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pattern.pxi":96
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError('expected string or buffer')
 *         try:
 */
  __pyx_t_2 = ((__pyx_f_3re2_pystring_to_cstring(__pyx_v_bytestr, (&__pyx_v_cstring), (&__pyx_v_size), (&__pyx_v_buf)) == -1L) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pattern.pxi":97
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')             # <<<<<<<<<<<<<<
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 97, __pyx_L1_error)

    /* "pattern.pxi":96
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError('expected string or buffer')
 *         try:
 */
  }

  /* "pattern.pxi":98
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')
 *         try:             # <<<<<<<<<<<<<<
 *             if encoded == 2 and (pos or endpos != -1):
 *                 utf8indices(cstring, size, &pos, &endpos)
 */
  /*try:*/ {

    /* "pattern.pxi":99
 *             raise TypeError('expected string or buffer')
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):             # <<<<<<<<<<<<<<
 *                 utf8indices(cstring, size, &pos, &endpos)
 *             if pos > size:
 */
    __pyx_t_1 = ((__pyx_v_encoded == 2) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = (__pyx_v_pos != 0);
    if (!__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_endpos != -1L) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "pattern.pxi":100
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):
 *                 utf8indices(cstring, size, &pos, &endpos)             # <<<<<<<<<<<<<<
 *             if pos > size:
 *                 return False
 */
      __pyx_t_3 = __pyx_f_3re2_utf8indices(__pyx_v_cstring, __pyx_v_size, (&__pyx_v_pos), (&__pyx_v_endpos)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 100, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pattern.pxi":99
 *             raise TypeError('expected string or buffer')
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):             # <<<<<<<<<<<<<<
 *                 utf8indices(cstring, size, &pos, &endpos)
 *             if pos > size:
 */
    }

    /* "pattern.pxi":101
 *             if encoded == 2 and (pos or endpos != -1):
 *                 utf8indices(cstring, size, &pos, &endpos)
 *             if pos > size:             # <<<<<<<<<<<<<<
 *                 return False
 *             if 0 <= endpos < size:
 */
    __pyx_t_2 = ((__pyx_v_pos > __pyx_v_size) != 0);
    if (__pyx_t_2) {

      /* "pattern.pxi":102
 *                 utf8indices(cstring, size, &pos, &endpos)
 *             if pos > size:
 *                 return False             # <<<<<<<<<<<<<<
 *             if 0 <= endpos < size:
 *                 size = endpos
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L5_return;

      /* "pattern.pxi":101
 *             if encoded == 2 and (pos or endpos != -1):
 *                 utf8indices(cstring, size, &pos, &endpos)
 *             if pos > size:             # <<<<<<<<<<<<<<
 *                 return False
 *             if 0 <= endpos < size:
 */
    }

    /* "pattern.pxi":103
 *             if pos > size:
 *                 return False
 *             if 0 <= endpos < size:             # <<<<<<<<<<<<<<
 *                 size = endpos
 * 
 */
    __pyx_t_2 = (0 <= __pyx_v_endpos);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_endpos < __pyx_v_size);
    }
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "pattern.pxi":104
 *                 return False
 *             if 0 <= endpos < size:
 *                 size = endpos             # <<<<<<<<<<<<<<
 * 
 *             sp = new StringPiece(cstring, size)
 */
      __pyx_v_size = __pyx_v_endpos;

      /* "pattern.pxi":103
 *             if pos > size:
 *                 return False
 *             if 0 <= endpos < size:             # <<<<<<<<<<<<<<
 *                 size = endpos
 * 
 */
    }

    /* "pattern.pxi":106
 *                 size = endpos
 * 
 *             sp = new StringPiece(cstring, size)             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 retval = self.re_pattern.Match(
 */
    __pyx_v_sp = new re2::StringPiece(__pyx_v_cstring, __pyx_v_size);

    /* "pattern.pxi":107
 * 
 *             sp = new StringPiece(cstring, size)
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 retval = self.re_pattern.Match(
 *                         sp[0],
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "pattern.pxi":108
 *             sp = new StringPiece(cstring, size)
 *             with nogil:
 *                 retval = self.re_pattern.Match(             # <<<<<<<<<<<<<<
 *                         sp[0],
 *                         pos,
 */
          __pyx_v_retval = __pyx_v_self->re_pattern->Match((__pyx_v_sp[0]), __pyx_v_pos, __pyx_v_size, RE2::UNANCHORED, NULL, 0);
        }

        /* "pattern.pxi":107
 * 
 *             sp = new StringPiece(cstring, size)
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 retval = self.re_pattern.Match(
 *                         sp[0],
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L16;
          }
          __pyx_L16:;
        }
    }

    /* "pattern.pxi":115
 *                         NULL,
 *                         0)
 *             del sp             # <<<<<<<<<<<<<<
 *         finally:
 *             release_cstring(&buf)
 */
    delete __pyx_v_sp;
  }

  /* "pattern.pxi":117
 *             del sp
 *         finally:
 *             release_cstring(&buf)             # <<<<<<<<<<<<<<
 *         return retval != 0
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_f_3re2_release_cstring((&__pyx_v_buf));
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        __pyx_f_3re2_release_cstring((&__pyx_v_buf));
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L5_return: {
      __pyx_t_12 = __pyx_r;
      __pyx_r = 0;
      __pyx_f_3re2_release_cstring((&__pyx_v_buf));
      __pyx_r = __pyx_t_12;
      __pyx_t_12 = 0;
      goto __pyx_L0;
    }
    __pyx_L7:;
  }

  /* "pattern.pxi":118
 *         finally:
 *             release_cstring(&buf)
 *         return retval != 0             # <<<<<<<<<<<<<<
 * 
 *     def count(self, object string, int pos=0, int endpos=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_v_retval != 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":81
 *         return m
 * 
 *     def contains(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """"contains(string[, pos[, endpos]]) --> bool."
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.Pattern.contains", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bytestr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":120
 *         return retval != 0
 * 
 *     def count(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """Return number of non-overlapping matches of pattern in string."""
 *         cdef char * cstring
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_7Pattern_9count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_7Pattern_8count[] = "Return number of non-overlapping matches of pattern in string.";
static PyObject *__pyx_pw_3re2_7Pattern_9count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_string = 0;
  int __pyx_v_pos;
  int __pyx_v_endpos;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_string,&__pyx_n_s_pos,&__pyx_n_s_endpos,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_endpos);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "count") < 0)) __PYX_ERR(1, 120, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_string = values[0];
    if (values[1]) {
      __pyx_v_pos = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 120, __pyx_L3_error)
    } else {
      __pyx_v_pos = ((int)0);
    }
    if (values[2]) {
      __pyx_v_endpos = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 120, __pyx_L3_error)
    } else {
      __pyx_v_endpos = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("count", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 120, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Pattern.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_7Pattern_8count(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_string, __pyx_v_pos, __pyx_v_endpos);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_7Pattern_8count(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos) {
  char *__pyx_v_cstring;
  Py_ssize_t __pyx_v_size;
  Py_buffer __pyx_v_buf;
  int __pyx_v_retval;
  int __pyx_v_encoded;
  int __pyx_v_result;
  re2::StringPiece *__pyx_v_sp;
  re2::StringPiece *__pyx_v_matches;
  PyObject *__pyx_v_bytestr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  ptrdiff_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count", 0);

  /* "pattern.pxi":126
 *         cdef Py_buffer buf
 *         cdef int retval
 *         cdef int encoded = 0             # <<<<<<<<<<<<<<
 *         cdef int result = 0
 *         cdef StringPiece * sp = NULL
 */
  __pyx_v_encoded = 0;

  /* "pattern.pxi":127
 *         cdef int retval
 *         cdef int encoded = 0
 *         cdef int result = 0             # <<<<<<<<<<<<<<
 *         cdef StringPiece * sp = NULL
 *         cdef StringPiece * matches = NULL
 */
  __pyx_v_result = 0;

  /* "pattern.pxi":128
 *         cdef int encoded = 0
 *         cdef int result = 0
 *         cdef StringPiece * sp = NULL             # <<<<<<<<<<<<<<
 *         cdef StringPiece * matches = NULL
 * 
 */
  __pyx_v_sp = NULL;

  /* "pattern.pxi":129
 *         cdef int result = 0
 *         cdef StringPiece * sp = NULL
 *         cdef StringPiece * matches = NULL             # <<<<<<<<<<<<<<
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 */
  __pyx_v_matches = NULL;

  /* "pattern.pxi":131
 *         cdef StringPiece * matches = NULL
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)             # <<<<<<<<<<<<<<
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')
 */
  __pyx_t_1 = __pyx_f_3re2_unicode_to_bytes(__pyx_v_string, (&__pyx_v_encoded), __pyx_v_self->encoded); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytestr = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pattern.pxi":132
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError('expected string or buffer')
 *         try:
 */
  __pyx_t_2 = ((__pyx_f_3re2_pystring_to_cstring(__pyx_v_bytestr, (&__pyx_v_cstring), (&__pyx_v_size), (&__pyx_v_buf)) == -1L) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pattern.pxi":133
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')             # <<<<<<<<<<<<<<
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 133, __pyx_L1_error)

    /* "pattern.pxi":132
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError('expected string or buffer')
 *         try:
 */
  }

  /* "pattern.pxi":134
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')
 *         try:             # <<<<<<<<<<<<<<
 *             if encoded == 2 and (pos or endpos != -1):
 *                 utf8indices(cstring, size, &pos, &endpos)
 */
  /*try:*/ {

    /* "pattern.pxi":135
 *             raise TypeError('expected string or buffer')
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):             # <<<<<<<<<<<<<<
 *                 utf8indices(cstring, size, &pos, &endpos)
 *             if pos > size:
 */
    __pyx_t_3 = ((__pyx_v_encoded == 2) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_v_pos != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_v_endpos != -1L) != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_2) {

      /* "pattern.pxi":136
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):
 *                 utf8indices(cstring, size, &pos, &endpos)             # <<<<<<<<<<<<<<
 *             if pos > size:
 *                 return 0
 */
      __pyx_t_1 = __pyx_f_3re2_utf8indices(__pyx_v_cstring, __pyx_v_size, (&__pyx_v_pos), (&__pyx_v_endpos)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 136, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pattern.pxi":135
 *             raise TypeError('expected string or buffer')
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):             # <<<<<<<<<<<<<<
 *                 utf8indices(cstring, size, &pos, &endpos)
 *             if pos > size:
 */
    }

    /* "pattern.pxi":137
 *             if encoded == 2 and (pos or endpos != -1):
 *                 utf8indices(cstring, size, &pos, &endpos)
 *             if pos > size:             # <<<<<<<<<<<<<<
 *                 return 0
 *             if 0 <= endpos < size:
 */
    __pyx_t_2 = ((__pyx_v_pos > __pyx_v_size) != 0);
    if (__pyx_t_2) {

      /* "pattern.pxi":138
 *                 utf8indices(cstring, size, &pos, &endpos)
 *             if pos > size:
 *                 return 0             # <<<<<<<<<<<<<<
 *             if 0 <= endpos < size:
 *                 size = endpos
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_int_0);
      __pyx_r = __pyx_int_0;
      goto __pyx_L4_return;

      /* "pattern.pxi":137
 *             if encoded == 2 and (pos or endpos != -1):
 *                 utf8indices(cstring, size, &pos, &endpos)
 *             if pos > size:             # <<<<<<<<<<<<<<
 *                 return 0
 *             if 0 <= endpos < size:
 */
    }

    /* "pattern.pxi":139
 *             if pos > size:
 *                 return 0
 *             if 0 <= endpos < size:             # <<<<<<<<<<<<<<
 *                 size = endpos
 * 
 */
    __pyx_t_2 = (0 <= __pyx_v_endpos);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_endpos < __pyx_v_size);
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "pattern.pxi":140
 *                 return 0
 *             if 0 <= endpos < size:
 *                 size = endpos             # <<<<<<<<<<<<<<
 * 
 *             sp = new StringPiece(cstring, size)
 */
      __pyx_v_size = __pyx_v_endpos;

      /* "pattern.pxi":139
 *             if pos > size:
 *                 return 0
 *             if 0 <= endpos < size:             # <<<<<<<<<<<<<<
 *                 size = endpos
 * 
 */
    }

    /* "pattern.pxi":142
 *                 size = endpos
 * 
 *             sp = new StringPiece(cstring, size)             # <<<<<<<<<<<<<<
 *             matches = new_StringPiece_array(1)
 *             try:
 */
    __pyx_v_sp = new re2::StringPiece(__pyx_v_cstring, __pyx_v_size);

    /* "pattern.pxi":143
 * 
 *             sp = new StringPiece(cstring, size)
 *             matches = new_StringPiece_array(1)             # <<<<<<<<<<<<<<
 *             try:
 *                 while True:
 */
    __pyx_v_matches = new_StringPiece_array(1);

    /* "pattern.pxi":144
 *             sp = new StringPiece(cstring, size)
 *             matches = new_StringPiece_array(1)
 *             try:             # <<<<<<<<<<<<<<
 *                 while True:
 *                     with nogil:
 */
    /*try:*/ {

      /* "pattern.pxi":145
 *             matches = new_StringPiece_array(1)
 *             try:
 *                 while True:             # <<<<<<<<<<<<<<
 *                     with nogil:
 *                         retval = self.re_pattern.Match(
 */
      while (1) {

        /* "pattern.pxi":146
 *             try:
 *                 while True:
 *                     with nogil:             # <<<<<<<<<<<<<<
 *                         retval = self.re_pattern.Match(
 *                                 sp[0],
 */
        {
            #ifdef WITH_THREAD
            PyThreadState *_save;
            Py_UNBLOCK_THREADS
            __Pyx_FastGIL_Remember();
            #endif
            /*try:*/ {

              /* "pattern.pxi":147
 *                 while True:
 *                     with nogil:
 *                         retval = self.re_pattern.Match(             # <<<<<<<<<<<<<<
 *                                 sp[0],
 *                                 pos,
 */
              __pyx_v_retval = __pyx_v_self->re_pattern->Match((__pyx_v_sp[0]), __pyx_v_pos, __pyx_v_size, RE2::UNANCHORED, __pyx_v_matches, 1);
            }

            /* "pattern.pxi":146
 *             try:
 *                 while True:
 *                     with nogil:             # <<<<<<<<<<<<<<
 *                         retval = self.re_pattern.Match(
 *                                 sp[0],
 */
            /*finally:*/ {
              /*normal exit:*/{
                #ifdef WITH_THREAD
                __Pyx_FastGIL_Forget();
                Py_BLOCK_THREADS
                #endif
                goto __pyx_L22;
              }
              __pyx_L22:;
            }
        }

        /* "pattern.pxi":154
 *                                 matches,
 *                                 1)
 *                     if retval == 0:             # <<<<<<<<<<<<<<
 *                         break
 *                     result += 1
 */
        __pyx_t_3 = ((__pyx_v_retval == 0) != 0);
        if (__pyx_t_3) {

          /* "pattern.pxi":155
 *                                 1)
 *                     if retval == 0:
 *                         break             # <<<<<<<<<<<<<<
 *                     result += 1
 *                     if pos == size:
 */
          goto __pyx_L17_break;

          /* "pattern.pxi":154
 *                                 matches,
 *                                 1)
 *                     if retval == 0:             # <<<<<<<<<<<<<<
 *                         break
 *                     result += 1
 */
        }

        /* "pattern.pxi":156
 *                     if retval == 0:
 *                         break
 *                     result += 1             # <<<<<<<<<<<<<<
 *                     if pos == size:
 *                         break
 */
        __pyx_v_result = (__pyx_v_result + 1);

        /* "pattern.pxi":157
 *                         break
 *                     result += 1
 *                     if pos == size:             # <<<<<<<<<<<<<<
 *                         break
 *                     # offset the pos to move to the next point
 */
        __pyx_t_3 = ((__pyx_v_pos == __pyx_v_size) != 0);
        if (__pyx_t_3) {

          /* "pattern.pxi":158
 *                     result += 1
 *                     if pos == size:
 *                         break             # <<<<<<<<<<<<<<
 *                     # offset the pos to move to the next point
 *                     pos = matches[0].data() - cstring + (
 */
          goto __pyx_L17_break;

          /* "pattern.pxi":157
 *                         break
 *                     result += 1
 *                     if pos == size:             # <<<<<<<<<<<<<<
 *                         break
 *                     # offset the pos to move to the next point
 */
        }

        /* "pattern.pxi":161
 *                     # offset the pos to move to the next point
 *                     pos = matches[0].data() - cstring + (
 *                             matches[0].length() or 1)             # <<<<<<<<<<<<<<
 *             finally:
 *                 del sp
 */
        __pyx_t_5 = (__pyx_v_matches[0]).length();
        if (!__pyx_t_5) {
        } else {
          __pyx_t_4 = __pyx_t_5;
          goto __pyx_L25_bool_binop_done;
        }
        __pyx_t_4 = 1;
        __pyx_L25_bool_binop_done:;

        /* "pattern.pxi":160
 *                         break
 *                     # offset the pos to move to the next point
 *                     pos = matches[0].data() - cstring + (             # <<<<<<<<<<<<<<
 *                             matches[0].length() or 1)
 *             finally:
 */
        __pyx_v_pos = (((__pyx_v_matches[0]).data() - __pyx_v_cstring) + __pyx_t_4);
      }
      __pyx_L17_break:;
    }

    /* "pattern.pxi":163
 *                             matches[0].length() or 1)
 *             finally:
 *                 del sp             # <<<<<<<<<<<<<<
 *                 delete_StringPiece_array(matches)
 *         finally:
 */
    /*finally:*/ {
      /*normal exit:*/{
        delete __pyx_v_sp;

        /* "pattern.pxi":164
 *             finally:
 *                 del sp
 *                 delete_StringPiece_array(matches)             # <<<<<<<<<<<<<<
 *         finally:
 *             release_cstring(&buf)
 */
        delete[](__pyx_v_matches);
        goto __pyx_L15;
      }
      __pyx_L15:;
    }
  }

  /* "pattern.pxi":166
 *                 delete_StringPiece_array(matches)
 *         finally:
 *             release_cstring(&buf)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_f_3re2_release_cstring((&__pyx_v_buf));
      goto __pyx_L6;
    }
    __pyx_L5_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_5 = __pyx_lineno; __pyx_t_6 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        __pyx_f_3re2_release_cstring((&__pyx_v_buf));
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_6; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L4_return: {
      __pyx_t_13 = __pyx_r;
      __pyx_r = 0;
      __pyx_f_3re2_release_cstring((&__pyx_v_buf));
      __pyx_r = __pyx_t_13;
      __pyx_t_13 = 0;
      goto __pyx_L0;
    }
    __pyx_L6:;
  }

  /* "pattern.pxi":167
 *         finally:
 *             release_cstring(&buf)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def findall(self, object string, int pos=0, int endpos=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":120
 *         return retval != 0
 * 
 *     def count(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """Return number of non-overlapping matches of pattern in string."""
 *         cdef char * cstring
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Pattern.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bytestr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":169
 *         return result
 * 
 *     def findall(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """Return all non-overlapping matches of pattern in string as a list
 *         of strings."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_7Pattern_11findall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_7Pattern_10findall[] = "Return all non-overlapping matches of pattern in string as a list\n        of strings.";
static PyObject *__pyx_pw_3re2_7Pattern_11findall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_string = 0;
  int __pyx_v_pos;
  int __pyx_v_endpos;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("findall (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_string,&__pyx_n_s_pos,&__pyx_n_s_endpos,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_endpos);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "findall") < 0)) __PYX_ERR(1, 169, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_string = values[0];
    if (values[1]) {
      __pyx_v_pos = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 169, __pyx_L3_error)
    } else {
      __pyx_v_pos = ((int)0);
    }
    if (values[2]) {
      __pyx_v_endpos = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 169, __pyx_L3_error)
    } else {
      __pyx_v_endpos = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findall", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 169, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Pattern.findall", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_7Pattern_10findall(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_string, __pyx_v_pos, __pyx_v_endpos);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_7Pattern_10findall(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos) {
  char *__pyx_v_cstring;
  Py_ssize_t __pyx_v_size;
  Py_buffer __pyx_v_buf;
  int __pyx_v_encoded;
  int __pyx_v_retval;
  PyObject *__pyx_v_resultlist = 0;
  re2::StringPiece *__pyx_v_sp;
  re2::StringPiece *__pyx_v_matches;
  PyObject *__pyx_v_bytestr = NULL;
  long __pyx_7genexpr__pyx_v_i;
  long __pyx_8genexpr1__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  long __pyx_t_5;
  long __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  ptrdiff_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("findall", 0);

  /* "pattern.pxi":175
 *         cdef Py_ssize_t size
 *         cdef Py_buffer buf
 *         cdef int encoded = 0             # <<<<<<<<<<<<<<
 *         cdef int retval
 *         cdef list resultlist = []
 */
  __pyx_v_encoded = 0;

  /* "pattern.pxi":177
 *         cdef int encoded = 0
 *         cdef int retval
 *         cdef list resultlist = []             # <<<<<<<<<<<<<<
 *         cdef StringPiece * sp = NULL
 *         cdef StringPiece * matches = NULL
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_resultlist = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pattern.pxi":178
 *         cdef int retval
 *         cdef list resultlist = []
 *         cdef StringPiece * sp = NULL             # <<<<<<<<<<<<<<
 *         cdef StringPiece * matches = NULL
 * 
 */
  __pyx_v_sp = NULL;

  /* "pattern.pxi":179
 *         cdef list resultlist = []
 *         cdef StringPiece * sp = NULL
 *         cdef StringPiece * matches = NULL             # <<<<<<<<<<<<<<
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 */
  __pyx_v_matches = NULL;

  /* "pattern.pxi":181
 *         cdef StringPiece * matches = NULL
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)             # <<<<<<<<<<<<<<
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')
 */
  __pyx_t_1 = __pyx_f_3re2_unicode_to_bytes(__pyx_v_string, (&__pyx_v_encoded), __pyx_v_self->encoded); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytestr = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pattern.pxi":182
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError('expected string or buffer')
 *         try:
 */
  __pyx_t_2 = ((__pyx_f_3re2_pystring_to_cstring(__pyx_v_bytestr, (&__pyx_v_cstring), (&__pyx_v_size), (&__pyx_v_buf)) == -1L) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pattern.pxi":183
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')             # <<<<<<<<<<<<<<
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 183, __pyx_L1_error)

    /* "pattern.pxi":182
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError('expected string or buffer')
 *         try:
 */
  }

  /* "pattern.pxi":184
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')
 *         try:             # <<<<<<<<<<<<<<
 *             if encoded == 2 and (pos or endpos != -1):
 *                 utf8indices(cstring, size, &pos, &endpos)
 */
  /*try:*/ {

    /* "pattern.pxi":185
 *             raise TypeError('expected string or buffer')
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):             # <<<<<<<<<<<<<<
 *                 utf8indices(cstring, size, &pos, &endpos)
 *             if pos > size:
 */
    __pyx_t_3 = ((__pyx_v_encoded == 2) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_v_pos != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_v_endpos != -1L) != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_2) {

      /* "pattern.pxi":186
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):
 *                 utf8indices(cstring, size, &pos, &endpos)             # <<<<<<<<<<<<<<
 *             if pos > size:
 *                 return []
 */
      __pyx_t_1 = __pyx_f_3re2_utf8indices(__pyx_v_cstring, __pyx_v_size, (&__pyx_v_pos), (&__pyx_v_endpos)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 186, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pattern.pxi":185
 *             raise TypeError('expected string or buffer')
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):             # <<<<<<<<<<<<<<
 *                 utf8indices(cstring, size, &pos, &endpos)
 *             if pos > size:
 */
    }

    /* "pattern.pxi":187
 *             if encoded == 2 and (pos or endpos != -1):
 *                 utf8indices(cstring, size, &pos, &endpos)
 *             if pos > size:             # <<<<<<<<<<<<<<
 *                 return []
 *             if 0 <= endpos < size:
 */
    __pyx_t_2 = ((__pyx_v_pos > __pyx_v_size) != 0);
    if (__pyx_t_2) {

      /* "pattern.pxi":188
 *                 utf8indices(cstring, size, &pos, &endpos)
 *             if pos > size:
 *                 return []             # <<<<<<<<<<<<<<
 *             if 0 <= endpos < size:
 *                 size = endpos
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 188, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L4_return;

      /* "pattern.pxi":187
 *             if encoded == 2 and (pos or endpos != -1):
 *                 utf8indices(cstring, size, &pos, &endpos)
 *             if pos > size:             # <<<<<<<<<<<<<<
 *                 return []
 *             if 0 <= endpos < size:
 */
    }

    /* "pattern.pxi":189
 *             if pos > size:
 *                 return []
 *             if 0 <= endpos < size:             # <<<<<<<<<<<<<<
 *                 size = endpos
 * 
 */
    __pyx_t_2 = (0 <= __pyx_v_endpos);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_endpos < __pyx_v_size);
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "pattern.pxi":190
 *                 return []
 *             if 0 <= endpos < size:
 *                 size = endpos             # <<<<<<<<<<<<<<
 * 
 *             sp = new StringPiece(cstring, size)
 */
      __pyx_v_size = __pyx_v_endpos;

      /* "pattern.pxi":189
 *             if pos > size:
 *                 return []
 *             if 0 <= endpos < size:             # <<<<<<<<<<<<<<
 *                 size = endpos
 * 
 */
    }

    /* "pattern.pxi":192
 *                 size = endpos
 * 
 *             sp = new StringPiece(cstring, size)             # <<<<<<<<<<<<<<
 *             matches = new_StringPiece_array(self.groups + 1)
 * 
 */
    __pyx_v_sp = new re2::StringPiece(__pyx_v_cstring, __pyx_v_size);

    /* "pattern.pxi":193
 * 
 *             sp = new StringPiece(cstring, size)
 *             matches = new_StringPiece_array(self.groups + 1)             # <<<<<<<<<<<<<<
 * 
 *             while True:
 */
    __pyx_v_matches = new_StringPiece_array((__pyx_v_self->groups + 1));

    /* "pattern.pxi":195
 *             matches = new_StringPiece_array(self.groups + 1)
 * 
 *             while True:             # <<<<<<<<<<<<<<
 *                 with nogil:
 *                     retval = self.re_pattern.Match(
 */
    while (1) {

      /* "pattern.pxi":196
 * 
 *             while True:
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     retval = self.re_pattern.Match(
 *                             sp[0],
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          __Pyx_FastGIL_Remember();
          #endif
          /*try:*/ {

            /* "pattern.pxi":197
 *             while True:
 *                 with nogil:
 *                     retval = self.re_pattern.Match(             # <<<<<<<<<<<<<<
 *                             sp[0],
 *                             pos,
 */
            __pyx_v_retval = __pyx_v_self->re_pattern->Match((__pyx_v_sp[0]), __pyx_v_pos, __pyx_v_size, RE2::UNANCHORED, __pyx_v_matches, (__pyx_v_self->groups + 1));
          }

          /* "pattern.pxi":196
 * 
 *             while True:
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     retval = self.re_pattern.Match(
 *                             sp[0],
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              __Pyx_FastGIL_Forget();
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L19;
            }
            __pyx_L19:;
          }
      }

      /* "pattern.pxi":204
 *                             matches,
 *                             self.groups + 1)
 *                 if retval == 0:             # <<<<<<<<<<<<<<
 *                     break
 *                 if self.groups > 1:
 */
      __pyx_t_3 = ((__pyx_v_retval == 0) != 0);
      if (__pyx_t_3) {

        /* "pattern.pxi":205
 *                             self.groups + 1)
 *                 if retval == 0:
 *                     break             # <<<<<<<<<<<<<<
 *                 if self.groups > 1:
 *                     if encoded:
 */
        goto __pyx_L14_break;

        /* "pattern.pxi":204
 *                             matches,
 *                             self.groups + 1)
 *                 if retval == 0:             # <<<<<<<<<<<<<<
 *                     break
 *                 if self.groups > 1:
 */
      }

      /* "pattern.pxi":206
 *                 if retval == 0:
 *                     break
 *                 if self.groups > 1:             # <<<<<<<<<<<<<<
 *                     if encoded:
 *                         resultlist.append(tuple([
 */
      __pyx_t_3 = ((__pyx_v_self->groups > 1) != 0);
      if (__pyx_t_3) {

        /* "pattern.pxi":207
 *                     break
 *                 if self.groups > 1:
 *                     if encoded:             # <<<<<<<<<<<<<<
 *                         resultlist.append(tuple([
 *                             '' if matches[i].data() is NULL else
 */
        __pyx_t_3 = (__pyx_v_encoded != 0);
        if (__pyx_t_3) {

          /* "pattern.pxi":208
 *                 if self.groups > 1:
 *                     if encoded:
 *                         resultlist.append(tuple([             # <<<<<<<<<<<<<<
 *                             '' if matches[i].data() is NULL else
 *                             matches[i].data()[:matches[i].length()
 */
          { /* enter inner scope */
            __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 208, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_1);

            /* "pattern.pxi":212
 *                             matches[i].data()[:matches[i].length()
 *                                 ].decode('utf8')
 *                             for i in range(1, self.groups + 1)]))             # <<<<<<<<<<<<<<
 *                     else:
 *                         resultlist.append(tuple([
 */
            __pyx_t_4 = (__pyx_v_self->groups + 1);
            __pyx_t_5 = __pyx_t_4;
            for (__pyx_t_6 = 1; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
              __pyx_7genexpr__pyx_v_i = __pyx_t_6;

              /* "pattern.pxi":209
 *                     if encoded:
 *                         resultlist.append(tuple([
 *                             '' if matches[i].data() is NULL else             # <<<<<<<<<<<<<<
 *                             matches[i].data()[:matches[i].length()
 *                                 ].decode('utf8')
 */
              if ((((__pyx_v_matches[__pyx_7genexpr__pyx_v_i]).data() == NULL) != 0)) {
                __Pyx_INCREF(__pyx_kp_u__7);
                __pyx_t_7 = __pyx_kp_u__7;
              } else {

                /* "pattern.pxi":211
 *                             '' if matches[i].data() is NULL else
 *                             matches[i].data()[:matches[i].length()
 *                                 ].decode('utf8')             # <<<<<<<<<<<<<<
 *                             for i in range(1, self.groups + 1)]))
 *                     else:
 */
                __pyx_t_8 = __Pyx_decode_c_string((__pyx_v_matches[__pyx_7genexpr__pyx_v_i]).data(), 0, (__pyx_v_matches[__pyx_7genexpr__pyx_v_i]).length(), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 211, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_8);
                __pyx_t_7 = __pyx_t_8;
                __pyx_t_8 = 0;
              }
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_7))) __PYX_ERR(1, 208, __pyx_L5_error)
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            }
          } /* exit inner scope */

          /* "pattern.pxi":208
 *                 if self.groups > 1:
 *                     if encoded:
 *                         resultlist.append(tuple([             # <<<<<<<<<<<<<<
 *                             '' if matches[i].data() is NULL else
 *                             matches[i].data()[:matches[i].length()
 */
          __pyx_t_7 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 208, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 208, __pyx_L5_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "pattern.pxi":207
 *                     break
 *                 if self.groups > 1:
 *                     if encoded:             # <<<<<<<<<<<<<<
 *                         resultlist.append(tuple([
 *                             '' if matches[i].data() is NULL else
 */
          goto __pyx_L22;
        }

        /* "pattern.pxi":214
 *                             for i in range(1, self.groups + 1)]))
 *                     else:
 *                         resultlist.append(tuple([             # <<<<<<<<<<<<<<
 *                             b'' if matches[i].data() is NULL
 *                             else matches[i].data()[:matches[i].length()]
 */
        /*else*/ {
          { /* enter inner scope */
            __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 214, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_7);

            /* "pattern.pxi":217
 *                             b'' if matches[i].data() is NULL
 *                             else matches[i].data()[:matches[i].length()]
 *                             for i in range(1, self.groups + 1)]))             # <<<<<<<<<<<<<<
 *                 else:  # 0 or 1 group; return list of strings
 *                     if encoded:
 */
            __pyx_t_4 = (__pyx_v_self->groups + 1);
            __pyx_t_5 = __pyx_t_4;
            for (__pyx_t_6 = 1; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
              __pyx_8genexpr1__pyx_v_i = __pyx_t_6;

              /* "pattern.pxi":215
 *                     else:
 *                         resultlist.append(tuple([
 *                             b'' if matches[i].data() is NULL             # <<<<<<<<<<<<<<
 *                             else matches[i].data()[:matches[i].length()]
 *                             for i in range(1, self.groups + 1)]))
 */
              if ((((__pyx_v_matches[__pyx_8genexpr1__pyx_v_i]).data() == NULL) != 0)) {
                __Pyx_INCREF(__pyx_kp_b__7);
                __pyx_t_1 = __pyx_kp_b__7;
              } else {

                /* "pattern.pxi":216
 *                         resultlist.append(tuple([
 *                             b'' if matches[i].data() is NULL
 *                             else matches[i].data()[:matches[i].length()]             # <<<<<<<<<<<<<<
 *                             for i in range(1, self.groups + 1)]))
 *                 else:  # 0 or 1 group; return list of strings
 */
                __pyx_t_8 = __Pyx_PyBytes_FromStringAndSize((__pyx_v_matches[__pyx_8genexpr1__pyx_v_i]).data() + 0, (__pyx_v_matches[__pyx_8genexpr1__pyx_v_i]).length() - 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 216, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_8);
                __pyx_t_1 = __pyx_t_8;
                __pyx_t_8 = 0;
              }
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_1))) __PYX_ERR(1, 214, __pyx_L5_error)
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            }
          } /* exit inner scope */

          /* "pattern.pxi":214
 *                             for i in range(1, self.groups + 1)]))
 *                     else:
 *                         resultlist.append(tuple([             # <<<<<<<<<<<<<<
 *                             b'' if matches[i].data() is NULL
 *                             else matches[i].data()[:matches[i].length()]
 */
          __pyx_t_1 = PyList_AsTuple(((PyObject*)__pyx_t_7)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 214, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 214, __pyx_L5_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __pyx_L22:;

        /* "pattern.pxi":206
 *                 if retval == 0:
 *                     break
 *                 if self.groups > 1:             # <<<<<<<<<<<<<<
 *                     if encoded:
 *                         resultlist.append(tuple([
 */
        goto __pyx_L21;
      }

      /* "pattern.pxi":219
 *                             for i in range(1, self.groups + 1)]))
 *                 else:  # 0 or 1 group; return list of strings
 *                     if encoded:             # <<<<<<<<<<<<<<
 *                         resultlist.append(matches[self.groups].data()[
 *                             :matches[self.groups].length()].decode('utf8'))
 */
      /*else*/ {
        __pyx_t_3 = (__pyx_v_encoded != 0);
        if (__pyx_t_3) {

          /* "pattern.pxi":221
 *                     if encoded:
 *                         resultlist.append(matches[self.groups].data()[
 *                             :matches[self.groups].length()].decode('utf8'))             # <<<<<<<<<<<<<<
 *                     else:
 *                         resultlist.append(matches[self.groups].data()[
 */
          __pyx_t_1 = __Pyx_decode_c_string((__pyx_v_matches[__pyx_v_self->groups]).data(), 0, (__pyx_v_matches[__pyx_v_self->groups]).length(), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 221, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_1);

          /* "pattern.pxi":220
 *                 else:  # 0 or 1 group; return list of strings
 *                     if encoded:
 *                         resultlist.append(matches[self.groups].data()[             # <<<<<<<<<<<<<<
 *                             :matches[self.groups].length()].decode('utf8'))
 *                     else:
 */
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 220, __pyx_L5_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "pattern.pxi":219
 *                             for i in range(1, self.groups + 1)]))
 *                 else:  # 0 or 1 group; return list of strings
 *                     if encoded:             # <<<<<<<<<<<<<<
 *                         resultlist.append(matches[self.groups].data()[
 *                             :matches[self.groups].length()].decode('utf8'))
 */
          goto __pyx_L27;
        }

        /* "pattern.pxi":223
 *                             :matches[self.groups].length()].decode('utf8'))
 *                     else:
 *                         resultlist.append(matches[self.groups].data()[             # <<<<<<<<<<<<<<
 *                             :matches[self.groups].length()])
 *                 if pos == size:
 */
        /*else*/ {

          /* "pattern.pxi":224
 *                     else:
 *                         resultlist.append(matches[self.groups].data()[
 *                             :matches[self.groups].length()])             # <<<<<<<<<<<<<<
 *                 if pos == size:
 *                     break
 */
          __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize((__pyx_v_matches[__pyx_v_self->groups]).data() + 0, (__pyx_v_matches[__pyx_v_self->groups]).length() - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 223, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_1);

          /* "pattern.pxi":223
 *                             :matches[self.groups].length()].decode('utf8'))
 *                     else:
 *                         resultlist.append(matches[self.groups].data()[             # <<<<<<<<<<<<<<
 *                             :matches[self.groups].length()])
 *                 if pos == size:
 */
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 223, __pyx_L5_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __pyx_L27:;
      }
      __pyx_L21:;

      /* "pattern.pxi":225
 *                         resultlist.append(matches[self.groups].data()[
 *                             :matches[self.groups].length()])
 *                 if pos == size:             # <<<<<<<<<<<<<<
 *                     break
 *                 # offset the pos to move to the next point
 */
      __pyx_t_3 = ((__pyx_v_pos == __pyx_v_size) != 0);
      if (__pyx_t_3) {

        /* "pattern.pxi":226
 *                             :matches[self.groups].length()])
 *                 if pos == size:
 *                     break             # <<<<<<<<<<<<<<
 *                 # offset the pos to move to the next point
 *                 pos = matches[0].data() - cstring + (matches[0].length() or 1)
 */
        goto __pyx_L14_break;

        /* "pattern.pxi":225
 *                         resultlist.append(matches[self.groups].data()[
 *                             :matches[self.groups].length()])
 *                 if pos == size:             # <<<<<<<<<<<<<<
 *                     break
 *                 # offset the pos to move to the next point
 */
      }

      /* "pattern.pxi":228
 *                     break
 *                 # offset the pos to move to the next point
 *                 pos = matches[0].data() - cstring + (matches[0].length() or 1)             # <<<<<<<<<<<<<<
 *         finally:
 *             del sp
 */
      __pyx_t_11 = (__pyx_v_matches[0]).length();
      if (!__pyx_t_11) {
      } else {
        __pyx_t_10 = __pyx_t_11;
        goto __pyx_L29_bool_binop_done;
      }
      __pyx_t_10 = 1;
      __pyx_L29_bool_binop_done:;
      __pyx_v_pos = (((__pyx_v_matches[0]).data() - __pyx_v_cstring) + __pyx_t_10);
    }
    __pyx_L14_break:;
  }

  /* "pattern.pxi":230
 *                 pos = matches[0].data() - cstring + (matches[0].length() or 1)
 *         finally:
 *             del sp             # <<<<<<<<<<<<<<
 *             delete_StringPiece_array(matches)
 *             release_cstring(&buf)
 */
  /*finally:*/ {
    /*normal exit:*/{
      delete __pyx_v_sp;

      /* "pattern.pxi":231
 *         finally:
 *             del sp
 *             delete_StringPiece_array(matches)             # <<<<<<<<<<<<<<
 *             release_cstring(&buf)
 *         return resultlist
 */
      delete[](__pyx_v_matches);

      /* "pattern.pxi":232
 *             del sp
 *             delete_StringPiece_array(matches)
 *             release_cstring(&buf)             # <<<<<<<<<<<<<<
 *         return resultlist
 * 
 */
      __pyx_f_3re2_release_cstring((&__pyx_v_buf));
      goto __pyx_L6;
    }
    __pyx_L5_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __pyx_t_11 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
      {

        /* "pattern.pxi":230
 *                 pos = matches[0].data() - cstring + (matches[0].length() or 1)
 *         finally:
 *             del sp             # <<<<<<<<<<<<<<
 *             delete_StringPiece_array(matches)
 *             release_cstring(&buf)
 */
        delete __pyx_v_sp;

        /* "pattern.pxi":231
 *         finally:
 *             del sp
 *             delete_StringPiece_array(matches)             # <<<<<<<<<<<<<<
 *             release_cstring(&buf)
 *         return resultlist
 */
        delete[](__pyx_v_matches);

        /* "pattern.pxi":232
 *             del sp
 *             delete_StringPiece_array(matches)
 *             release_cstring(&buf)             # <<<<<<<<<<<<<<
 *         return resultlist
 * 
 */
        __pyx_f_3re2_release_cstring((&__pyx_v_buf));
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_17);
        __Pyx_XGIVEREF(__pyx_t_18);
        __Pyx_XGIVEREF(__pyx_t_19);
        __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
      }
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
      __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
      __pyx_lineno = __pyx_t_11; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
      goto __pyx_L1_error;
    }
    __pyx_L4_return: {
      __pyx_t_19 = __pyx_r;
      __pyx_r = 0;

      /* "pattern.pxi":230
 *                 pos = matches[0].data() - cstring + (matches[0].length() or 1)
 *         finally:
 *             del sp             # <<<<<<<<<<<<<<
 *             delete_StringPiece_array(matches)
 *             release_cstring(&buf)
 */
      delete __pyx_v_sp;

      /* "pattern.pxi":231
 *         finally:
 *             del sp
 *             delete_StringPiece_array(matches)             # <<<<<<<<<<<<<<
 *             release_cstring(&buf)
 *         return resultlist
 */
      delete[](__pyx_v_matches);

      /* "pattern.pxi":232
 *             del sp
 *             delete_StringPiece_array(matches)
 *             release_cstring(&buf)             # <<<<<<<<<<<<<<
 *         return resultlist
 * 
 */
      __pyx_f_3re2_release_cstring((&__pyx_v_buf));
      __pyx_r = __pyx_t_19;
      __pyx_t_19 = 0;
      goto __pyx_L0;
    }
    __pyx_L6:;
  }

  /* "pattern.pxi":233
 *             delete_StringPiece_array(matches)
 *             release_cstring(&buf)
 *         return resultlist             # <<<<<<<<<<<<<<
 * 
 *     def finditer(self, object string, int pos=0, int endpos=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_resultlist);
  __pyx_r = __pyx_v_resultlist;
  goto __pyx_L0;

  /* "pattern.pxi":169
 *         return result
 * 
 *     def findall(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """Return all non-overlapping matches of pattern in string as a list
 *         of strings."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("re2.Pattern.findall", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_resultlist);
  __Pyx_XDECREF(__pyx_v_bytestr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":235
 *         return resultlist
 * 
 *     def finditer(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """Yield all non-overlapping matches of pattern in string as Match
 *         objects."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_7Pattern_13finditer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_7Pattern_12finditer[] = "Yield all non-overlapping matches of pattern in string as Match\n        objects.";
static PyObject *__pyx_pw_3re2_7Pattern_13finditer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_string = 0;
  int __pyx_v_pos;
  int __pyx_v_endpos;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("finditer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_string,&__pyx_n_s_pos,&__pyx_n_s_endpos,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_endpos);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "finditer") < 0)) __PYX_ERR(1, 235, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_string = values[0];
    if (values[1]) {
      __pyx_v_pos = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 235, __pyx_L3_error)
    } else {
      __pyx_v_pos = ((int)0);
    }
    if (values[2]) {
      __pyx_v_endpos = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 235, __pyx_L3_error)
    } else {
      __pyx_v_endpos = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("finditer", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 235, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Pattern.finditer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_7Pattern_12finditer(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_string, __pyx_v_pos, __pyx_v_endpos);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_7Pattern_12finditer(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("finditer", 0);

  /* "pattern.pxi":238
 *         """Yield all non-overlapping matches of pattern in string as Match
 *         objects."""
 *         result = iter(self._finditer(string, pos, endpos))             # <<<<<<<<<<<<<<
 *         next(result)  # dummy value to raise error before start of generator
 *         return result
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_finditer); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_pos); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_endpos); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_string, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 238, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_string, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 238, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_string);
    __Pyx_GIVEREF(__pyx_v_string);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_string);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pattern.pxi":239
 *         objects."""
 *         result = iter(self._finditer(string, pos, endpos))
 *         next(result)  # dummy value to raise error before start of generator             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __Pyx_PyIter_Next(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pattern.pxi":240
 *         result = iter(self._finditer(string, pos, endpos))
 *         next(result)  # dummy value to raise error before start of generator
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def _finditer(self, object string, int pos=0, int endpos=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pattern.pxi":235
 *         return resultlist
 * 
 *     def finditer(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """Yield all non-overlapping matches of pattern in string as Match
 *         objects."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("re2.Pattern.finditer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_3re2_7Pattern_16generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pattern.pxi":242
 *         return result
 * 
 *     def _finditer(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         cdef char * cstring
 *         cdef Py_ssize_t size
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_7Pattern_15_finditer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3re2_7Pattern_15_finditer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_string = 0;
  int __pyx_v_pos;
  int __pyx_v_endpos;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_finditer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_string,&__pyx_n_s_pos,&__pyx_n_s_endpos,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_endpos);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_finditer") < 0)) __PYX_ERR(1, 242, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_string = values[0];
    if (values[1]) {
      __pyx_v_pos = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 242, __pyx_L3_error)
    } else {
      __pyx_v_pos = ((int)0);
    }
    if (values[2]) {
      __pyx_v_endpos = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 242, __pyx_L3_error)
    } else {
      __pyx_v_endpos = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_finditer", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 242, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Pattern._finditer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_7Pattern_14_finditer(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_string, __pyx_v_pos, __pyx_v_endpos);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_7Pattern_14_finditer(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos) {
  struct __pyx_obj_3re2___pyx_scope_struct___finditer *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_finditer", 0);
  __pyx_cur_scope = (struct __pyx_obj_3re2___pyx_scope_struct___finditer *)__pyx_tp_new_3re2___pyx_scope_struct___finditer(__pyx_ptype_3re2___pyx_scope_struct___finditer, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_3re2___pyx_scope_struct___finditer *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 242, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_string = __pyx_v_string;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_string);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_string);
  __pyx_cur_scope->__pyx_v_pos = __pyx_v_pos;
  __pyx_cur_scope->__pyx_v_endpos = __pyx_v_endpos;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_3re2_7Pattern_16generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_finditer, __pyx_n_s_Pattern__finditer, __pyx_n_s_re2); if (unlikely(!gen)) __PYX_ERR(1, 242, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("re2.Pattern._finditer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_3re2_7Pattern_16generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_3re2___pyx_scope_struct___finditer *__pyx_cur_scope = ((struct __pyx_obj_3re2___pyx_scope_struct___finditer *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  ptrdiff_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  char const *__pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_finditer", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L14_resume_from_yield;
    case 2: goto __pyx_L24_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 242, __pyx_L1_error)

  /* "pattern.pxi":247
 *         cdef Py_buffer buf
 *         cdef int retval
 *         cdef StringPiece * sp = NULL             # <<<<<<<<<<<<<<
 *         cdef Match m
 *         cdef int encoded = 0
 */
  __pyx_cur_scope->__pyx_v_sp = NULL;

  /* "pattern.pxi":249
 *         cdef StringPiece * sp = NULL
 *         cdef Match m
 *         cdef int encoded = 0             # <<<<<<<<<<<<<<
 *         cdef int cpos = 0, upos = pos
 * 
 */
  __pyx_cur_scope->__pyx_v_encoded = 0;

  /* "pattern.pxi":250
 *         cdef Match m
 *         cdef int encoded = 0
 *         cdef int cpos = 0, upos = pos             # <<<<<<<<<<<<<<
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 */
  __pyx_cur_scope->__pyx_v_cpos = 0;
  __pyx_cur_scope->__pyx_v_upos = __pyx_cur_scope->__pyx_v_pos;

  /* "pattern.pxi":252
 *         cdef int cpos = 0, upos = pos
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)             # <<<<<<<<<<<<<<
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')
 */
  __pyx_t_1 = __pyx_f_3re2_unicode_to_bytes(__pyx_cur_scope->__pyx_v_string, (&__pyx_cur_scope->__pyx_v_encoded), __pyx_cur_scope->__pyx_v_self->encoded); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_bytestr = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pattern.pxi":253
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError('expected string or buffer')
 *         try:
 */
  __pyx_t_2 = ((__pyx_f_3re2_pystring_to_cstring(__pyx_cur_scope->__pyx_v_bytestr, (&__pyx_cur_scope->__pyx_v_cstring), (&__pyx_cur_scope->__pyx_v_size), (&__pyx_cur_scope->__pyx_v_buf)) == -1L) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pattern.pxi":254
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')             # <<<<<<<<<<<<<<
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 254, __pyx_L1_error)

    /* "pattern.pxi":253
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError('expected string or buffer')
 *         try:
 */
  }

  /* "pattern.pxi":255
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')
 *         try:             # <<<<<<<<<<<<<<
 *             if encoded == 2 and (pos or endpos != -1):
 *                 utf8indices(cstring, size, &pos, &endpos)
 */
  /*try:*/ {

    /* "pattern.pxi":256
 *             raise TypeError('expected string or buffer')
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):             # <<<<<<<<<<<<<<
 *                 utf8indices(cstring, size, &pos, &endpos)
 *                 cpos = pos
 */
    __pyx_t_3 = ((__pyx_cur_scope->__pyx_v_encoded == 2) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_cur_scope->__pyx_v_pos != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_cur_scope->__pyx_v_endpos != -1L) != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "pattern.pxi":257
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):
 *                 utf8indices(cstring, size, &pos, &endpos)             # <<<<<<<<<<<<<<
 *                 cpos = pos
 *             if pos > size:
 */
      __pyx_t_1 = __pyx_f_3re2_utf8indices(__pyx_cur_scope->__pyx_v_cstring, __pyx_cur_scope->__pyx_v_size, (&__pyx_cur_scope->__pyx_v_pos), (&__pyx_cur_scope->__pyx_v_endpos)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 257, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pattern.pxi":258
 *             if encoded == 2 and (pos or endpos != -1):
 *                 utf8indices(cstring, size, &pos, &endpos)
 *                 cpos = pos             # <<<<<<<<<<<<<<
 *             if pos > size:
 *                 return
 */
      __pyx_cur_scope->__pyx_v_cpos = __pyx_cur_scope->__pyx_v_pos;

      /* "pattern.pxi":256
 *             raise TypeError('expected string or buffer')
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):             # <<<<<<<<<<<<<<
 *                 utf8indices(cstring, size, &pos, &endpos)
 *                 cpos = pos
 */
    }

    /* "pattern.pxi":259
 *                 utf8indices(cstring, size, &pos, &endpos)
 *                 cpos = pos
 *             if pos > size:             # <<<<<<<<<<<<<<
 *                 return
 *             if 0 <= endpos < size:
 */
    __pyx_t_2 = ((__pyx_cur_scope->__pyx_v_pos > __pyx_cur_scope->__pyx_v_size) != 0);
    if (__pyx_t_2) {

      /* "pattern.pxi":260
 *                 cpos = pos
 *             if pos > size:
 *                 return             # <<<<<<<<<<<<<<
 *             if 0 <= endpos < size:
 *                 size = endpos
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = NULL;
      goto __pyx_L5_return;

      /* "pattern.pxi":259
 *                 utf8indices(cstring, size, &pos, &endpos)
 *                 cpos = pos
 *             if pos > size:             # <<<<<<<<<<<<<<
 *                 return
 *             if 0 <= endpos < size:
 */
    }

    /* "pattern.pxi":261
 *             if pos > size:
 *                 return
 *             if 0 <= endpos < size:             # <<<<<<<<<<<<<<
 *                 size = endpos
 * 
 */
    __pyx_t_2 = (0 <= __pyx_cur_scope->__pyx_v_endpos);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_cur_scope->__pyx_v_endpos < __pyx_cur_scope->__pyx_v_size);
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "pattern.pxi":262
 *                 return
 *             if 0 <= endpos < size:
 *                 size = endpos             # <<<<<<<<<<<<<<
 * 
 *             sp = new StringPiece(cstring, size)
 */
      __pyx_cur_scope->__pyx_v_size = __pyx_cur_scope->__pyx_v_endpos;

      /* "pattern.pxi":261
 *             if pos > size:
 *                 return
 *             if 0 <= endpos < size:             # <<<<<<<<<<<<<<
 *                 size = endpos
 * 
 */
    }

    /* "pattern.pxi":264
 *                 size = endpos
 * 
 *             sp = new StringPiece(cstring, size)             # <<<<<<<<<<<<<<
 * 
 *             yield
 */
    __pyx_cur_scope->__pyx_v_sp = new re2::StringPiece(__pyx_cur_scope->__pyx_v_cstring, __pyx_cur_scope->__pyx_v_size);

    /* "pattern.pxi":266
 *             sp = new StringPiece(cstring, size)
 * 
 *             yield             # <<<<<<<<<<<<<<
 *             while True:
 *                 m = Match(self, self.groups + 1)
 */
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L14_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 266, __pyx_L6_error)

    /* "pattern.pxi":267
 * 
 *             yield
 *             while True:             # <<<<<<<<<<<<<<
 *                 m = Match(self, self.groups + 1)
 *                 m.string = string
 */
    while (1) {

      /* "pattern.pxi":268
 *             yield
 *             while True:
 *                 m = Match(self, self.groups + 1)             # <<<<<<<<<<<<<<
 *                 m.string = string
 *                 with nogil:
 */
      __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_cur_scope->__pyx_v_self->groups + 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 268, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 268, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_cur_scope->__pyx_v_self));
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3re2_Match), __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 268, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XGOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_m));
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_m, ((struct __pyx_obj_3re2_Match *)__pyx_t_1));
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;

      /* "pattern.pxi":269
 *             while True:
 *                 m = Match(self, self.groups + 1)
 *                 m.string = string             # <<<<<<<<<<<<<<
 *                 with nogil:
 *                     retval = self.re_pattern.Match(
 */
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_string);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_string);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_m->string);
      __Pyx_DECREF(__pyx_cur_scope->__pyx_v_m->string);
      __pyx_cur_scope->__pyx_v_m->string = __pyx_cur_scope->__pyx_v_string;

      /* "pattern.pxi":270
 *                 m = Match(self, self.groups + 1)
 *                 m.string = string
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     retval = self.re_pattern.Match(
 *                             sp[0],
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          __Pyx_FastGIL_Remember();
          #endif
          /*try:*/ {

            /* "pattern.pxi":271
 *                 m.string = string
 *                 with nogil:
 *                     retval = self.re_pattern.Match(             # <<<<<<<<<<<<<<
 *                             sp[0],
 *                             pos,
 */
            __pyx_cur_scope->__pyx_v_retval = __pyx_cur_scope->__pyx_v_self->re_pattern->Match((__pyx_cur_scope->__pyx_v_sp[0]), __pyx_cur_scope->__pyx_v_pos, __pyx_cur_scope->__pyx_v_size, RE2::UNANCHORED, __pyx_cur_scope->__pyx_v_m->matches, (__pyx_cur_scope->__pyx_v_self->groups + 1));
          }

          /* "pattern.pxi":270
 *                 m = Match(self, self.groups + 1)
 *                 m.string = string
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     retval = self.re_pattern.Match(
 *                             sp[0],
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              __Pyx_FastGIL_Forget();
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L21;
            }
            __pyx_L21:;
          }
      }

      /* "pattern.pxi":278
 *                             m.matches,
 *                             self.groups + 1)
 *                 if retval == 0:             # <<<<<<<<<<<<<<
 *                     break
 *                 m.encoded = encoded
 */
      __pyx_t_3 = ((__pyx_cur_scope->__pyx_v_retval == 0) != 0);
      if (__pyx_t_3) {

        /* "pattern.pxi":279
 *                             self.groups + 1)
 *                 if retval == 0:
 *                     break             # <<<<<<<<<<<<<<
 *                 m.encoded = encoded
 *                 m.nmatches = self.groups + 1
 */
        goto __pyx_L16_break;

        /* "pattern.pxi":278
 *                             m.matches,
 *                             self.groups + 1)
 *                 if retval == 0:             # <<<<<<<<<<<<<<
 *                     break
 *                 m.encoded = encoded
 */
      }

      /* "pattern.pxi":280
 *                 if retval == 0:
 *                     break
 *                 m.encoded = encoded             # <<<<<<<<<<<<<<
 *                 m.nmatches = self.groups + 1
 *                 m.pos = pos
 */
      __pyx_cur_scope->__pyx_v_m->encoded = __pyx_cur_scope->__pyx_v_encoded;

      /* "pattern.pxi":281
 *                     break
 *                 m.encoded = encoded
 *                 m.nmatches = self.groups + 1             # <<<<<<<<<<<<<<
 *                 m.pos = pos
 *                 if endpos == -1:
 */
      __pyx_cur_scope->__pyx_v_m->nmatches = (__pyx_cur_scope->__pyx_v_self->groups + 1);

      /* "pattern.pxi":282
 *                 m.encoded = encoded
 *                 m.nmatches = self.groups + 1
 *                 m.pos = pos             # <<<<<<<<<<<<<<
 *                 if endpos == -1:
 *                     m.endpos = size
 */
      __pyx_cur_scope->__pyx_v_m->pos = __pyx_cur_scope->__pyx_v_pos;

      /* "pattern.pxi":283
 *                 m.nmatches = self.groups + 1
 *                 m.pos = pos
 *                 if endpos == -1:             # <<<<<<<<<<<<<<
 *                     m.endpos = size
 *                 else:
 */
      __pyx_t_3 = ((__pyx_cur_scope->__pyx_v_endpos == -1L) != 0);
      if (__pyx_t_3) {

        /* "pattern.pxi":284
 *                 m.pos = pos
 *                 if endpos == -1:
 *                     m.endpos = size             # <<<<<<<<<<<<<<
 *                 else:
 *                     m.endpos = endpos
 */
        __pyx_cur_scope->__pyx_v_m->endpos = __pyx_cur_scope->__pyx_v_size;

        /* "pattern.pxi":283
 *                 m.nmatches = self.groups + 1
 *                 m.pos = pos
 *                 if endpos == -1:             # <<<<<<<<<<<<<<
 *                     m.endpos = size
 *                 else:
 */
        goto __pyx_L23;
      }

      /* "pattern.pxi":286
 *                     m.endpos = size
 *                 else:
 *                     m.endpos = endpos             # <<<<<<<<<<<<<<
 *                 m._make_spans(cstring, size, &cpos, &upos)
 *                 m._init_groups()
 */
      /*else*/ {
        __pyx_cur_scope->__pyx_v_m->endpos = __pyx_cur_scope->__pyx_v_endpos;
      }
      __pyx_L23:;

      /* "pattern.pxi":287
 *                 else:
 *                     m.endpos = endpos
 *                 m._make_spans(cstring, size, &cpos, &upos)             # <<<<<<<<<<<<<<
 *                 m._init_groups()
 *                 yield m
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_cur_scope->__pyx_v_m->__pyx_vtab)->_make_spans(__pyx_cur_scope->__pyx_v_m, __pyx_cur_scope->__pyx_v_cstring, __pyx_cur_scope->__pyx_v_size, (&__pyx_cur_scope->__pyx_v_cpos), (&__pyx_cur_scope->__pyx_v_upos)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 287, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pattern.pxi":288
 *                     m.endpos = endpos
 *                 m._make_spans(cstring, size, &cpos, &upos)
 *                 m._init_groups()             # <<<<<<<<<<<<<<
 *                 yield m
 *                 if pos == size:
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_cur_scope->__pyx_v_m->__pyx_vtab)->_init_groups(__pyx_cur_scope->__pyx_v_m); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 288, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pattern.pxi":289
 *                 m._make_spans(cstring, size, &cpos, &upos)
 *                 m._init_groups()
 *                 yield m             # <<<<<<<<<<<<<<
 *                 if pos == size:
 *                     break
 */
      __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_m));
      __pyx_r = ((PyObject *)__pyx_cur_scope->__pyx_v_m);
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 2;
      return __pyx_r;
      __pyx_L24_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 289, __pyx_L6_error)

      /* "pattern.pxi":290
 *                 m._init_groups()
 *                 yield m
 *                 if pos == size:             # <<<<<<<<<<<<<<
 *                     break
 *                 # offset the pos to move to the next point
 */
      __pyx_t_3 = ((__pyx_cur_scope->__pyx_v_pos == __pyx_cur_scope->__pyx_v_size) != 0);
      if (__pyx_t_3) {

        /* "pattern.pxi":291
 *                 yield m
 *                 if pos == size:
 *                     break             # <<<<<<<<<<<<<<
 *                 # offset the pos to move to the next point
 *                 pos = m.matches[0].data() - cstring + (
 */
        goto __pyx_L16_break;

        /* "pattern.pxi":290
 *                 m._init_groups()
 *                 yield m
 *                 if pos == size:             # <<<<<<<<<<<<<<
 *                     break
 *                 # offset the pos to move to the next point
 */
      }

      /* "pattern.pxi":294
 *                 # offset the pos to move to the next point
 *                 pos = m.matches[0].data() - cstring + (
 *                         m.matches[0].length() or 1)             # <<<<<<<<<<<<<<
 *         finally:
 *             del sp
 */
      __pyx_t_6 = (__pyx_cur_scope->__pyx_v_m->matches[0]).length();
      if (!__pyx_t_6) {
      } else {
        __pyx_t_5 = __pyx_t_6;
        goto __pyx_L26_bool_binop_done;
      }
      __pyx_t_5 = 1;
      __pyx_L26_bool_binop_done:;

      /* "pattern.pxi":293
 *                     break
 *                 # offset the pos to move to the next point
 *                 pos = m.matches[0].data() - cstring + (             # <<<<<<<<<<<<<<
 *                         m.matches[0].length() or 1)
 *         finally:
 */
      __pyx_cur_scope->__pyx_v_pos = (((__pyx_cur_scope->__pyx_v_m->matches[0]).data() - __pyx_cur_scope->__pyx_v_cstring) + __pyx_t_5);
    }
    __pyx_L16_break:;
  }

  /* "pattern.pxi":296
 *                         m.matches[0].length() or 1)
 *         finally:
 *             del sp             # <<<<<<<<<<<<<<
 *             release_cstring(&buf)
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      delete __pyx_cur_scope->__pyx_v_sp;

      /* "pattern.pxi":297
 *         finally:
 *             del sp
 *             release_cstring(&buf)             # <<<<<<<<<<<<<<
 * 
 *     def split(self, string, int maxsplit=0):
 */
      __pyx_f_3re2_release_cstring((&__pyx_cur_scope->__pyx_v_buf));
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_assign
      __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11) < 0)) __Pyx_ErrFetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __pyx_t_6 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_8 = __pyx_filename;
      {

        /* "pattern.pxi":296
 *                         m.matches[0].length() or 1)
 *         finally:
 *             del sp             # <<<<<<<<<<<<<<
 *             release_cstring(&buf)
 * 
 */
        delete __pyx_cur_scope->__pyx_v_sp;

        /* "pattern.pxi":297
 *         finally:
 *             del sp
 *             release_cstring(&buf)             # <<<<<<<<<<<<<<
 * 
 *     def split(self, string, int maxsplit=0):
 */
        __pyx_f_3re2_release_cstring((&__pyx_cur_scope->__pyx_v_buf));
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      }
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ErrRestore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
      __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_8;
      goto __pyx_L1_error;
    }
    __pyx_L5_return: {
      __Pyx_PyThreadState_assign
      __pyx_t_14 = 0; __pyx_t_13 = 0; __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_10 = 0; __pyx_t_9 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_9);
      __pyx_t_15 = __pyx_r;
      __pyx_r = 0;

      /* "pattern.pxi":296
 *                         m.matches[0].length() or 1)
 *         finally:
 *             del sp             # <<<<<<<<<<<<<<
 *             release_cstring(&buf)
 * 
 */
      delete __pyx_cur_scope->__pyx_v_sp;

      /* "pattern.pxi":297
 *         finally:
 *             del sp
 *             release_cstring(&buf)             # <<<<<<<<<<<<<<
 * 
 *     def split(self, string, int maxsplit=0):
 */
      __pyx_f_3re2_release_cstring((&__pyx_cur_scope->__pyx_v_buf));
      __pyx_r = __pyx_t_15;
      __pyx_t_15 = 0;
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_9);
      }
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ErrRestore(__pyx_t_14, __pyx_t_13, __pyx_t_12);
      __pyx_t_14 = 0; __pyx_t_13 = 0; __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_10 = 0; __pyx_t_9 = 0;
      goto __pyx_L0;
    }
    __pyx_L7:;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "pattern.pxi":242
 *         return result
 * 
 *     def _finditer(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         cdef char * cstring
 *         cdef Py_ssize_t size
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_finditer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":299
 *             release_cstring(&buf)
 * 
 *     def split(self, string, int maxsplit=0):             # <<<<<<<<<<<<<<
 *         """split(string[, maxsplit = 0]) --> list
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_7Pattern_18split(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_7Pattern_17split[] = "split(string[, maxsplit = 0]) --> list\n\n        Split a string by the occurrences of the pattern.";
static PyObject *__pyx_pw_3re2_7Pattern_18split(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_string = 0;
  int __pyx_v_maxsplit;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("split (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_string,&__pyx_n_s_maxsplit,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxsplit);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "split") < 0)) __PYX_ERR(1, 299, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_string = values[0];
    if (values[1]) {
      __pyx_v_maxsplit = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_maxsplit == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 299, __pyx_L3_error)
    } else {
      __pyx_v_maxsplit = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("split", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 299, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Pattern.split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_7Pattern_17split(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_string, __pyx_v_maxsplit);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_7Pattern_17split(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_maxsplit) {
  char *__pyx_v_cstring;
  Py_ssize_t __pyx_v_size;
  int __pyx_v_retval;
  int __pyx_v_pos;
  int __pyx_v_lookahead;
  int __pyx_v_num_split;
  re2::StringPiece *__pyx_v_sp;
  re2::StringPiece *__pyx_v_matches;
  PyObject *__pyx_v_resultlist = 0;
  int __pyx_v_encoded;
  Py_buffer __pyx_v_buf;
  PyObject *__pyx_v_bytestr = NULL;
  PyObject *__pyx_v_match_start = NULL;
  PyObject *__pyx_v_match_end = NULL;
  PyObject *__pyx_v_group = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  char const *__pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("split", 0);

  /* "pattern.pxi":306
 *         cdef Py_ssize_t size
 *         cdef int retval
 *         cdef int pos = 0             # <<<<<<<<<<<<<<
 *         cdef int lookahead = 0
 *         cdef int num_split = 0
 */
  __pyx_v_pos = 0;

  /* "pattern.pxi":307
 *         cdef int retval
 *         cdef int pos = 0
 *         cdef int lookahead = 0             # <<<<<<<<<<<<<<
 *         cdef int num_split = 0
 *         cdef StringPiece * sp
 */
  __pyx_v_lookahead = 0;

  /* "pattern.pxi":308
 *         cdef int pos = 0
 *         cdef int lookahead = 0
 *         cdef int num_split = 0             # <<<<<<<<<<<<<<
 *         cdef StringPiece * sp
 *         cdef StringPiece * matches
 */
  __pyx_v_num_split = 0;

  /* "pattern.pxi":311
 *         cdef StringPiece * sp
 *         cdef StringPiece * matches
 *         cdef list resultlist = []             # <<<<<<<<<<<<<<
 *         cdef int encoded = 0
 *         cdef Py_buffer buf
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_resultlist = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pattern.pxi":312
 *         cdef StringPiece * matches
 *         cdef list resultlist = []
 *         cdef int encoded = 0             # <<<<<<<<<<<<<<
 *         cdef Py_buffer buf
 * 
 */
  __pyx_v_encoded = 0;

  /* "pattern.pxi":315
 *         cdef Py_buffer buf
 * 
 *         if maxsplit < 0:             # <<<<<<<<<<<<<<
 *             maxsplit = 0
 * 
 */
  __pyx_t_2 = ((__pyx_v_maxsplit < 0) != 0);
  if (__pyx_t_2) {

    /* "pattern.pxi":316
 * 
 *         if maxsplit < 0:
 *             maxsplit = 0             # <<<<<<<<<<<<<<
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 */
    __pyx_v_maxsplit = 0;

    /* "pattern.pxi":315
 *         cdef Py_buffer buf
 * 
 *         if maxsplit < 0:             # <<<<<<<<<<<<<<
 *             maxsplit = 0
 * 
 */
  }

  /* "pattern.pxi":318
 *             maxsplit = 0
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)             # <<<<<<<<<<<<<<
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')
 */
  __pyx_t_1 = __pyx_f_3re2_unicode_to_bytes(__pyx_v_string, (&__pyx_v_encoded), __pyx_v_self->encoded); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytestr = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pattern.pxi":319
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError('expected string or buffer')
 *         matches = new_StringPiece_array(self.groups + 1)
 */
  __pyx_t_2 = ((__pyx_f_3re2_pystring_to_cstring(__pyx_v_bytestr, (&__pyx_v_cstring), (&__pyx_v_size), (&__pyx_v_buf)) == -1L) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pattern.pxi":320
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')             # <<<<<<<<<<<<<<
 *         matches = new_StringPiece_array(self.groups + 1)
 *         sp = new StringPiece(cstring, size)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 320, __pyx_L1_error)

    /* "pattern.pxi":319
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError('expected string or buffer')
 *         matches = new_StringPiece_array(self.groups + 1)
 */
  }

  /* "pattern.pxi":321
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')
 *         matches = new_StringPiece_array(self.groups + 1)             # <<<<<<<<<<<<<<
 *         sp = new StringPiece(cstring, size)
 *         try:
 */
  __pyx_v_matches = new_StringPiece_array((__pyx_v_self->groups + 1));

  /* "pattern.pxi":322
 *             raise TypeError('expected string or buffer')
 *         matches = new_StringPiece_array(self.groups + 1)
 *         sp = new StringPiece(cstring, size)             # <<<<<<<<<<<<<<
 *         try:
 * 
 */
  __pyx_v_sp = new re2::StringPiece(__pyx_v_cstring, __pyx_v_size);

  /* "pattern.pxi":323
 *         matches = new_StringPiece_array(self.groups + 1)
 *         sp = new StringPiece(cstring, size)
 *         try:             # <<<<<<<<<<<<<<
 * 
 *             while True:
 */
  /*try:*/ {

    /* "pattern.pxi":325
 *         try:
 * 
 *             while True:             # <<<<<<<<<<<<<<
 *                 with nogil:
 *                     retval = self.re_pattern.Match(
 */
    while (1) {

      /* "pattern.pxi":326
 * 
 *             while True:
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     retval = self.re_pattern.Match(
 *                             sp[0],
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          __Pyx_FastGIL_Remember();
          #endif
          /*try:*/ {

            /* "pattern.pxi":327
 *             while True:
 *                 with nogil:
 *                     retval = self.re_pattern.Match(             # <<<<<<<<<<<<<<
 *                             sp[0],
 *                             pos + lookahead,
 */
            __pyx_v_retval = __pyx_v_self->re_pattern->Match((__pyx_v_sp[0]), (__pyx_v_pos + __pyx_v_lookahead), __pyx_v_size, RE2::UNANCHORED, __pyx_v_matches, (__pyx_v_self->groups + 1));
          }

          /* "pattern.pxi":326
 * 
 *             while True:
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     retval = self.re_pattern.Match(
 *                             sp[0],
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              __Pyx_FastGIL_Forget();
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L14;
            }
            __pyx_L14:;
          }
      }

      /* "pattern.pxi":334
 *                             matches,
 *                             self.groups + 1)
 *                 if retval == 0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      __pyx_t_2 = ((__pyx_v_retval == 0) != 0);
      if (__pyx_t_2) {

        /* "pattern.pxi":335
 *                             self.groups + 1)
 *                 if retval == 0:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *                 match_start = matches[0].data() - cstring
 */
        goto __pyx_L9_break;

        /* "pattern.pxi":334
 *                             matches,
 *                             self.groups + 1)
 *                 if retval == 0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      }

      /* "pattern.pxi":337
 *                     break
 * 
 *                 match_start = matches[0].data() - cstring             # <<<<<<<<<<<<<<
 *                 match_end = match_start + matches[0].length()
 * 
 */
      __pyx_t_1 = __Pyx_PyInt_From_ptrdiff_t(((__pyx_v_matches[0]).data() - __pyx_v_cstring)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 337, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_match_start, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "pattern.pxi":338
 * 
 *                 match_start = matches[0].data() - cstring
 *                 match_end = match_start + matches[0].length()             # <<<<<<<<<<<<<<
 * 
 *                 # If an empty match, just look ahead until you find something
 */
      __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_matches[0]).length()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 338, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyNumber_Add(__pyx_v_match_start, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 338, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_match_end, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pattern.pxi":341
 * 
 *                 # If an empty match, just look ahead until you find something
 *                 if match_start == match_end:             # <<<<<<<<<<<<<<
 *                     if pos + lookahead == size:
 *                         break
 */
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_match_start, __pyx_v_match_end, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 341, __pyx_L6_error)
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 341, __pyx_L6_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_2) {

        /* "pattern.pxi":342
 *                 # If an empty match, just look ahead until you find something
 *                 if match_start == match_end:
 *                     if pos + lookahead == size:             # <<<<<<<<<<<<<<
 *                         break
 *                     lookahead += 1
 */
        __pyx_t_2 = (((__pyx_v_pos + __pyx_v_lookahead) == __pyx_v_size) != 0);
        if (__pyx_t_2) {

          /* "pattern.pxi":343
 *                 if match_start == match_end:
 *                     if pos + lookahead == size:
 *                         break             # <<<<<<<<<<<<<<
 *                     lookahead += 1
 *                     continue
 */
          goto __pyx_L9_break;

          /* "pattern.pxi":342
 *                 # If an empty match, just look ahead until you find something
 *                 if match_start == match_end:
 *                     if pos + lookahead == size:             # <<<<<<<<<<<<<<
 *                         break
 *                     lookahead += 1
 */
        }

        /* "pattern.pxi":344
 *                     if pos + lookahead == size:
 *                         break
 *                     lookahead += 1             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_v_lookahead = (__pyx_v_lookahead + 1);

        /* "pattern.pxi":345
 *                         break
 *                     lookahead += 1
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 if encoded:
 */
        goto __pyx_L8_continue;

        /* "pattern.pxi":341
 * 
 *                 # If an empty match, just look ahead until you find something
 *                 if match_start == match_end:             # <<<<<<<<<<<<<<
 *                     if pos + lookahead == size:
 *                         break
 */
      }

      /* "pattern.pxi":347
 *                     continue
 * 
 *                 if encoded:             # <<<<<<<<<<<<<<
 *                     resultlist.append(
 *                             char_to_unicode(&sp.data()[pos], match_start - pos))
 */
      __pyx_t_2 = (__pyx_v_encoded != 0);
      if (__pyx_t_2) {

        /* "pattern.pxi":349
 *                 if encoded:
 *                     resultlist.append(
 *                             char_to_unicode(&sp.data()[pos], match_start - pos))             # <<<<<<<<<<<<<<
 *                 else:
 *                     resultlist.append(sp.data()[pos:match_start])
 */
        __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_pos); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 349, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_1 = PyNumber_Subtract(__pyx_v_match_start, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 349, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 349, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __pyx_f_3re2_char_to_unicode((&(__pyx_v_sp->data()[__pyx_v_pos])), __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 349, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_1);

        /* "pattern.pxi":348
 * 
 *                 if encoded:
 *                     resultlist.append(             # <<<<<<<<<<<<<<
 *                             char_to_unicode(&sp.data()[pos], match_start - pos))
 *                 else:
 */
        __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 348, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "pattern.pxi":347
 *                     continue
 * 
 *                 if encoded:             # <<<<<<<<<<<<<<
 *                     resultlist.append(
 *                             char_to_unicode(&sp.data()[pos], match_start - pos))
 */
        goto __pyx_L18;
      }

      /* "pattern.pxi":351
 *                             char_to_unicode(&sp.data()[pos], match_start - pos))
 *                 else:
 *                     resultlist.append(sp.data()[pos:match_start])             # <<<<<<<<<<<<<<
 *                 if self.groups > 0:
 *                     for group in range(self.groups):
 */
      /*else*/ {
        __Pyx_INCREF(__pyx_v_match_start);
        __pyx_t_1 = __pyx_v_match_start;
        __pyx_t_2 = (__pyx_t_1 == Py_None);
        if (__pyx_t_2) {
          __pyx_t_6 = PY_SSIZE_T_MAX;
        } else {
          __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 351, __pyx_L6_error)
          __pyx_t_6 = __pyx_t_7;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_sp->data() + __pyx_v_pos, __pyx_t_6 - __pyx_v_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 351, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 351, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L18:;

      /* "pattern.pxi":352
 *                 else:
 *                     resultlist.append(sp.data()[pos:match_start])
 *                 if self.groups > 0:             # <<<<<<<<<<<<<<
 *                     for group in range(self.groups):
 *                         if matches[group + 1].data() == NULL:
 */
      __pyx_t_2 = ((__pyx_v_self->groups > 0) != 0);
      if (__pyx_t_2) {

        /* "pattern.pxi":353
 *                     resultlist.append(sp.data()[pos:match_start])
 *                 if self.groups > 0:
 *                     for group in range(self.groups):             # <<<<<<<<<<<<<<
 *                         if matches[group + 1].data() == NULL:
 *                             resultlist.append(None)
 */
        __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->groups); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 353, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 353, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
          __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
          __pyx_t_8 = NULL;
        } else {
          __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 353, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_8 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 353, __pyx_L6_error)
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        for (;;) {
          if (likely(!__pyx_t_8)) {
            if (likely(PyList_CheckExact(__pyx_t_1))) {
              if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 353, __pyx_L6_error)
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 353, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_3);
              #endif
            } else {
              if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 353, __pyx_L6_error)
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 353, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_3);
              #endif
            }
          } else {
            __pyx_t_3 = __pyx_t_8(__pyx_t_1);
            if (unlikely(!__pyx_t_3)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(1, 353, __pyx_L6_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_3);
          }
          __Pyx_XDECREF_SET(__pyx_v_group, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "pattern.pxi":354
 *                 if self.groups > 0:
 *                     for group in range(self.groups):
 *                         if matches[group + 1].data() == NULL:             # <<<<<<<<<<<<<<
 *                             resultlist.append(None)
 *                         else:
 */
          __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_group, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 354, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 354, __pyx_L6_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_2 = (((__pyx_v_matches[__pyx_t_7]).data() == NULL) != 0);
          if (__pyx_t_2) {

            /* "pattern.pxi":355
 *                     for group in range(self.groups):
 *                         if matches[group + 1].data() == NULL:
 *                             resultlist.append(None)             # <<<<<<<<<<<<<<
 *                         else:
 *                             if encoded:
 */
            __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_resultlist, Py_None); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 355, __pyx_L6_error)

            /* "pattern.pxi":354
 *                 if self.groups > 0:
 *                     for group in range(self.groups):
 *                         if matches[group + 1].data() == NULL:             # <<<<<<<<<<<<<<
 *                             resultlist.append(None)
 *                         else:
 */
            goto __pyx_L22;
          }

          /* "pattern.pxi":357
 *                             resultlist.append(None)
 *                         else:
 *                             if encoded:             # <<<<<<<<<<<<<<
 *                                 resultlist.append(char_to_unicode(
 *                                         matches[group + 1].data(),
 */
          /*else*/ {
            __pyx_t_2 = (__pyx_v_encoded != 0);
            if (__pyx_t_2) {

              /* "pattern.pxi":359
 *                             if encoded:
 *                                 resultlist.append(char_to_unicode(
 *                                         matches[group + 1].data(),             # <<<<<<<<<<<<<<
 *                                         matches[group + 1].length()))
 *                             else:
 */
              __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_group, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 359, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 359, __pyx_L6_error)
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

              /* "pattern.pxi":360
 *                                 resultlist.append(char_to_unicode(
 *                                         matches[group + 1].data(),
 *                                         matches[group + 1].length()))             # <<<<<<<<<<<<<<
 *                             else:
 *                                 resultlist.append(matches[group + 1].data()[:
 */
              __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_group, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 360, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 360, __pyx_L6_error)
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

              /* "pattern.pxi":358
 *                         else:
 *                             if encoded:
 *                                 resultlist.append(char_to_unicode(             # <<<<<<<<<<<<<<
 *                                         matches[group + 1].data(),
 *                                         matches[group + 1].length()))
 */
              __pyx_t_3 = __pyx_f_3re2_char_to_unicode((__pyx_v_matches[__pyx_t_7]).data(), (__pyx_v_matches[__pyx_t_9]).length()); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 358, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_3); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 358, __pyx_L6_error)
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

              /* "pattern.pxi":357
 *                             resultlist.append(None)
 *                         else:
 *                             if encoded:             # <<<<<<<<<<<<<<
 *                                 resultlist.append(char_to_unicode(
 *                                         matches[group + 1].data(),
 */
              goto __pyx_L23;
            }

            /* "pattern.pxi":362
 *                                         matches[group + 1].length()))
 *                             else:
 *                                 resultlist.append(matches[group + 1].data()[:             # <<<<<<<<<<<<<<
 *                                         matches[group + 1].length()])
 * 
 */
            /*else*/ {
              __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_group, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 362, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 362, __pyx_L6_error)
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

              /* "pattern.pxi":363
 *                             else:
 *                                 resultlist.append(matches[group + 1].data()[:
 *                                         matches[group + 1].length()])             # <<<<<<<<<<<<<<
 * 
 *                 # offset the pos to move to the next point
 */
              __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_group, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 363, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 363, __pyx_L6_error)
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

              /* "pattern.pxi":362
 *                                         matches[group + 1].length()))
 *                             else:
 *                                 resultlist.append(matches[group + 1].data()[:             # <<<<<<<<<<<<<<
 *                                         matches[group + 1].length()])
 * 
 */
              __pyx_t_3 = __Pyx_PyBytes_FromStringAndSize((__pyx_v_matches[__pyx_t_9]).data() + 0, (__pyx_v_matches[__pyx_t_7]).length() - 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 362, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_3); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 362, __pyx_L6_error)
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            }
            __pyx_L23:;
          }
          __pyx_L22:;

          /* "pattern.pxi":353
 *                     resultlist.append(sp.data()[pos:match_start])
 *                 if self.groups > 0:
 *                     for group in range(self.groups):             # <<<<<<<<<<<<<<
 *                         if matches[group + 1].data() == NULL:
 *                             resultlist.append(None)
 */
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "pattern.pxi":352
 *                 else:
 *                     resultlist.append(sp.data()[pos:match_start])
 *                 if self.groups > 0:             # <<<<<<<<<<<<<<
 *                     for group in range(self.groups):
 *                         if matches[group + 1].data() == NULL:
 */
      }

      /* "pattern.pxi":366
 * 
 *                 # offset the pos to move to the next point
 *                 pos = match_end             # <<<<<<<<<<<<<<
 *                 lookahead = 0
 * 
 */
      __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_match_end); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 366, __pyx_L6_error)
      __pyx_v_pos = __pyx_t_4;

      /* "pattern.pxi":367
 *                 # offset the pos to move to the next point
 *                 pos = match_end
 *                 lookahead = 0             # <<<<<<<<<<<<<<
 * 
 *                 num_split += 1
 */
      __pyx_v_lookahead = 0;

      /* "pattern.pxi":369
 *                 lookahead = 0
 * 
 *                 num_split += 1             # <<<<<<<<<<<<<<
 *                 if maxsplit and num_split >= maxsplit:
 *                     break
 */
      __pyx_v_num_split = (__pyx_v_num_split + 1);

      /* "pattern.pxi":370
 * 
 *                 num_split += 1
 *                 if maxsplit and num_split >= maxsplit:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      __pyx_t_10 = (__pyx_v_maxsplit != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_2 = __pyx_t_10;
        goto __pyx_L25_bool_binop_done;
      }
      __pyx_t_10 = ((__pyx_v_num_split >= __pyx_v_maxsplit) != 0);
      __pyx_t_2 = __pyx_t_10;
      __pyx_L25_bool_binop_done:;
      if (__pyx_t_2) {

        /* "pattern.pxi":371
 *                 num_split += 1
 *                 if maxsplit and num_split >= maxsplit:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *             if encoded:
 */
        goto __pyx_L9_break;

        /* "pattern.pxi":370
 * 
 *                 num_split += 1
 *                 if maxsplit and num_split >= maxsplit:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      }
      __pyx_L8_continue:;
    }
    __pyx_L9_break:;

    /* "pattern.pxi":373
 *                     break
 * 
 *             if encoded:             # <<<<<<<<<<<<<<
 *                 resultlist.append(
 *                         char_to_unicode(&sp.data()[pos], sp.length() - pos))
 */
    __pyx_t_2 = (__pyx_v_encoded != 0);
    if (__pyx_t_2) {

      /* "pattern.pxi":375
 *             if encoded:
 *                 resultlist.append(
 *                         char_to_unicode(&sp.data()[pos], sp.length() - pos))             # <<<<<<<<<<<<<<
 *             else:
 *                 resultlist.append(sp.data()[pos:])
 */
      __pyx_t_1 = __pyx_f_3re2_char_to_unicode((&(__pyx_v_sp->data()[__pyx_v_pos])), (__pyx_v_sp->length() - __pyx_v_pos)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 375, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);

      /* "pattern.pxi":374
 * 
 *             if encoded:
 *                 resultlist.append(             # <<<<<<<<<<<<<<
 *                         char_to_unicode(&sp.data()[pos], sp.length() - pos))
 *             else:
 */
      __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 374, __pyx_L6_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pattern.pxi":373
 *                     break
 * 
 *             if encoded:             # <<<<<<<<<<<<<<
 *                 resultlist.append(
 *                         char_to_unicode(&sp.data()[pos], sp.length() - pos))
 */
      goto __pyx_L27;
    }

    /* "pattern.pxi":377
 *                         char_to_unicode(&sp.data()[pos], sp.length() - pos))
 *             else:
 *                 resultlist.append(sp.data()[pos:])             # <<<<<<<<<<<<<<
 *         finally:
 *             del sp
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_sp->data() + __pyx_v_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 377, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 377, __pyx_L6_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L27:;
  }

  /* "pattern.pxi":379
 *                 resultlist.append(sp.data()[pos:])
 *         finally:
 *             del sp             # <<<<<<<<<<<<<<
 *             delete_StringPiece_array(matches)
 *             release_cstring(&buf)
 */
  /*finally:*/ {
    /*normal exit:*/{
      delete __pyx_v_sp;

      /* "pattern.pxi":380
 *         finally:
 *             del sp
 *             delete_StringPiece_array(matches)             # <<<<<<<<<<<<<<
 *             release_cstring(&buf)
 *         return resultlist
 */
      delete[](__pyx_v_matches);

      /* "pattern.pxi":381
 *             del sp
 *             delete_StringPiece_array(matches)
 *             release_cstring(&buf)             # <<<<<<<<<<<<<<
 *         return resultlist
 * 
 */
      __pyx_f_3re2_release_cstring((&__pyx_v_buf));
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __pyx_t_4 = __pyx_lineno; __pyx_t_11 = __pyx_clineno; __pyx_t_12 = __pyx_filename;
      {

        /* "pattern.pxi":379
 *                 resultlist.append(sp.data()[pos:])
 *         finally:
 *             del sp             # <<<<<<<<<<<<<<
 *             delete_StringPiece_array(matches)
 *             release_cstring(&buf)
 */
        delete __pyx_v_sp;

        /* "pattern.pxi":380
 *         finally:
 *             del sp
 *             delete_StringPiece_array(matches)             # <<<<<<<<<<<<<<
 *             release_cstring(&buf)
 *         return resultlist
 */
        delete[](__pyx_v_matches);

        /* "pattern.pxi":381
 *             del sp
 *             delete_StringPiece_array(matches)
 *             release_cstring(&buf)             # <<<<<<<<<<<<<<
 *         return resultlist
 * 
 */
        __pyx_f_3re2_release_cstring((&__pyx_v_buf));
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_XGIVEREF(__pyx_t_17);
        __Pyx_XGIVEREF(__pyx_t_18);
        __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
      }
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_ErrRestore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_11; __pyx_filename = __pyx_t_12;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "pattern.pxi":382
 *             delete_StringPiece_array(matches)
 *             release_cstring(&buf)
 *         return resultlist             # <<<<<<<<<<<<<<
 * 
 *     def sub(self, repl, string, int count=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_resultlist);
  __pyx_r = __pyx_v_resultlist;
  goto __pyx_L0;

  /* "pattern.pxi":299
 *             release_cstring(&buf)
 * 
 *     def split(self, string, int maxsplit=0):             # <<<<<<<<<<<<<<
 *         """split(string[, maxsplit = 0]) --> list
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.Pattern.split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_resultlist);
  __Pyx_XDECREF(__pyx_v_bytestr);
  __Pyx_XDECREF(__pyx_v_match_start);
  __Pyx_XDECREF(__pyx_v_match_end);
  __Pyx_XDECREF(__pyx_v_group);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":384
 *         return resultlist
 * 
 *     def sub(self, repl, string, int count=0):             # <<<<<<<<<<<<<<
 *         """sub(repl, string[, count = 0]) --> newstring
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_7Pattern_20sub(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_7Pattern_19sub[] = "sub(repl, string[, count = 0]) --> newstring\n\n        Return the string obtained by replacing the leftmost non-overlapping\n        occurrences of pattern in string by the replacement repl.";
static PyObject *__pyx_pw_3re2_7Pattern_20sub(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_repl = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_count;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sub (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_repl,&__pyx_n_s_string,&__pyx_n_s_count,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_repl)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sub", 0, 2, 3, 1); __PYX_ERR(1, 384, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_count);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sub") < 0)) __PYX_ERR(1, 384, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_repl = values[0];
    __pyx_v_string = values[1];
    if (values[2]) {
      __pyx_v_count = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 384, __pyx_L3_error)
    } else {
      __pyx_v_count = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sub", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 384, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Pattern.sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_7Pattern_19sub(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_repl, __pyx_v_string, __pyx_v_count);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_7Pattern_19sub(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, int __pyx_v_count) {
  int __pyx_v_num_repl;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sub", 0);

  /* "pattern.pxi":389
 *         Return the string obtained by replacing the leftmost non-overlapping
 *         occurrences of pattern in string by the replacement repl."""
 *         cdef int num_repl = 0             # <<<<<<<<<<<<<<
 *         return self._subn(repl, string, count, &num_repl)
 * 
 */
  __pyx_v_num_repl = 0;

  /* "pattern.pxi":390
 *         occurrences of pattern in string by the replacement repl."""
 *         cdef int num_repl = 0
 *         return self._subn(repl, string, count, &num_repl)             # <<<<<<<<<<<<<<
 * 
 *     def subn(self, repl, string, int count=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Pattern *)__pyx_v_self->__pyx_vtab)->_subn(__pyx_v_self, __pyx_v_repl, __pyx_v_string, __pyx_v_count, (&__pyx_v_num_repl)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":384
 *         return resultlist
 * 
 *     def sub(self, repl, string, int count=0):             # <<<<<<<<<<<<<<
 *         """sub(repl, string[, count = 0]) --> newstring
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Pattern.sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":392
 *         return self._subn(repl, string, count, &num_repl)
 * 
 *     def subn(self, repl, string, int count=0):             # <<<<<<<<<<<<<<
 *         """subn(repl, string[, count = 0]) --> (newstring, number of subs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_7Pattern_22subn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_7Pattern_21subn[] = "subn(repl, string[, count = 0]) --> (newstring, number of subs)\n\n        Return the tuple (new_string, number_of_subs_made) found by replacing\n        the leftmost non-overlapping occurrences of pattern with the\n        replacement repl.";
static PyObject *__pyx_pw_3re2_7Pattern_22subn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_repl = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_count;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("subn (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_repl,&__pyx_n_s_string,&__pyx_n_s_count,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_repl)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("subn", 0, 2, 3, 1); __PYX_ERR(1, 392, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_count);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "subn") < 0)) __PYX_ERR(1, 392, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_repl = values[0];
    __pyx_v_string = values[1];
    if (values[2]) {
      __pyx_v_count = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 392, __pyx_L3_error)
    } else {
      __pyx_v_count = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("subn", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 392, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Pattern.subn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_7Pattern_21subn(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_repl, __pyx_v_string, __pyx_v_count);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_7Pattern_21subn(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, int __pyx_v_count) {
  int __pyx_v_num_repl;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("subn", 0);

  /* "pattern.pxi":398
 *         the leftmost non-overlapping occurrences of pattern with the
 *         replacement repl."""
 *         cdef int num_repl = 0             # <<<<<<<<<<<<<<
 *         result = self._subn(repl, string, count, &num_repl)
 *         return result, num_repl
 */
  __pyx_v_num_repl = 0;

  /* "pattern.pxi":399
 *         replacement repl."""
 *         cdef int num_repl = 0
 *         result = self._subn(repl, string, count, &num_repl)             # <<<<<<<<<<<<<<
 *         return result, num_repl
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Pattern *)__pyx_v_self->__pyx_vtab)->_subn(__pyx_v_self, __pyx_v_repl, __pyx_v_string, __pyx_v_count, (&__pyx_v_num_repl)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pattern.pxi":400
 *         cdef int num_repl = 0
 *         result = self._subn(repl, string, count, &num_repl)
 *         return result, num_repl             # <<<<<<<<<<<<<<
 * 
 *     cdef _subn(self, repl, string, int count, int *num_repl):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_num_repl); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_result);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":392
 *         return self._subn(repl, string, count, &num_repl)
 * 
 *     def subn(self, repl, string, int count=0):             # <<<<<<<<<<<<<<
 *         """subn(repl, string[, count = 0]) --> (newstring, number of subs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("re2.Pattern.subn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":402
 *         return result, num_repl
 * 
 *     cdef _subn(self, repl, string, int count, int *num_repl):             # <<<<<<<<<<<<<<
 *         cdef bytes repl_b
 *         cdef char * cstring
 */

static PyObject *__pyx_f_3re2_7Pattern__subn(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, int __pyx_v_count, int *__pyx_v_num_repl) {
  PyObject *__pyx_v_repl_b = 0;
  char *__pyx_v_cstring;
  PyObject *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_size;
  re2::StringPiece *__pyx_v_sp;
  std::string *__pyx_v_input_str;
  int __pyx_v_string_encoded;
  int __pyx_v_repl_encoded;
  PyObject *__pyx_v_bytestr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  std::string *__pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  char const *__pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_subn", 0);

  /* "pattern.pxi":407
 *         cdef object result
 *         cdef Py_ssize_t size
 *         cdef StringPiece * sp = NULL             # <<<<<<<<<<<<<<
 *         cdef cpp_string * input_str = NULL
 *         cdef int string_encoded = 0
 */
  __pyx_v_sp = NULL;

  /* "pattern.pxi":408
 *         cdef Py_ssize_t size
 *         cdef StringPiece * sp = NULL
 *         cdef cpp_string * input_str = NULL             # <<<<<<<<<<<<<<
 *         cdef int string_encoded = 0
 *         cdef int repl_encoded = 0
 */
  __pyx_v_input_str = NULL;

  /* "pattern.pxi":409
 *         cdef StringPiece * sp = NULL
 *         cdef cpp_string * input_str = NULL
 *         cdef int string_encoded = 0             # <<<<<<<<<<<<<<
 *         cdef int repl_encoded = 0
 * 
 */
  __pyx_v_string_encoded = 0;

  /* "pattern.pxi":410
 *         cdef cpp_string * input_str = NULL
 *         cdef int string_encoded = 0
 *         cdef int repl_encoded = 0             # <<<<<<<<<<<<<<
 * 
 *         if callable(repl):
 */
  __pyx_v_repl_encoded = 0;

  /* "pattern.pxi":412
 *         cdef int repl_encoded = 0
 * 
 *         if callable(repl):             # <<<<<<<<<<<<<<
 *             # This is a callback, so use the custom function
 *             return self._subn_callback(repl, string, count, num_repl)
 */
  __pyx_t_1 = __Pyx_PyCallable_Check(__pyx_v_repl); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(1, 412, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pattern.pxi":414
 *         if callable(repl):
 *             # This is a callback, so use the custom function
 *             return self._subn_callback(repl, string, count, num_repl)             # <<<<<<<<<<<<<<
 * 
 *         repl_b = unicode_to_bytes(repl, &repl_encoded, self.encoded)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_3re2_Pattern *)__pyx_v_self->__pyx_vtab)->_subn_callback(__pyx_v_self, __pyx_v_repl, __pyx_v_string, __pyx_v_count, __pyx_v_num_repl); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pattern.pxi":412
 *         cdef int repl_encoded = 0
 * 
 *         if callable(repl):             # <<<<<<<<<<<<<<
 *             # This is a callback, so use the custom function
 *             return self._subn_callback(repl, string, count, num_repl)
 */
  }

  /* "pattern.pxi":416
 *             return self._subn_callback(repl, string, count, num_repl)
 * 
 *         repl_b = unicode_to_bytes(repl, &repl_encoded, self.encoded)             # <<<<<<<<<<<<<<
 *         if not repl_encoded and not isinstance(repl, bytes):
 *             repl_b = bytes(repl)  # coerce buffer to bytes object
 */
  __pyx_t_3 = __pyx_f_3re2_unicode_to_bytes(__pyx_v_repl, (&__pyx_v_repl_encoded), __pyx_v_self->encoded); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(1, 416, __pyx_L1_error)
  __pyx_v_repl_b = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pattern.pxi":417
 * 
 *         repl_b = unicode_to_bytes(repl, &repl_encoded, self.encoded)
 *         if not repl_encoded and not isinstance(repl, bytes):             # <<<<<<<<<<<<<<
 *             repl_b = bytes(repl)  # coerce buffer to bytes object
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_repl_encoded != 0)) != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_1 = PyBytes_Check(__pyx_v_repl); 
  __pyx_t_4 = ((!(__pyx_t_1 != 0)) != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "pattern.pxi":418
 *         repl_b = unicode_to_bytes(repl, &repl_encoded, self.encoded)
 *         if not repl_encoded and not isinstance(repl, bytes):
 *             repl_b = bytes(repl)  # coerce buffer to bytes object             # <<<<<<<<<<<<<<
 * 
 *         if count > 1 or (b'\\' if PY2 else <char>b'\\') in repl_b:
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_v_repl); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_repl_b, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pattern.pxi":417
 * 
 *         repl_b = unicode_to_bytes(repl, &repl_encoded, self.encoded)
 *         if not repl_encoded and not isinstance(repl, bytes):             # <<<<<<<<<<<<<<
 *             repl_b = bytes(repl)  # coerce buffer to bytes object
 * 
 */
  }

  /* "pattern.pxi":420
 *             repl_b = bytes(repl)  # coerce buffer to bytes object
 * 
 *         if count > 1 or (b'\\' if PY2 else <char>b'\\') in repl_b:             # <<<<<<<<<<<<<<
 *             # Limit on number of substitutions or replacement string contains
 *             # escape sequences; handle with Match.expand() implementation.
 */
  __pyx_t_4 = ((__pyx_v_count > 1) != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L8_bool_binop_done;
  }
  if ((PY2 != 0)) {
    __Pyx_INCREF(__pyx_kp_b__8);
    __pyx_t_3 = __pyx_kp_b__8;
  } else {
    __pyx_t_5 = __Pyx_PyInt_From_char(((char)'\\')); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __pyx_t_5;
    __pyx_t_5 = 0;
  }
  __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_t_3, __pyx_v_repl_b, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_2) {

    /* "pattern.pxi":426
 *             # but the number of differences with Python behavior is
 *             # non-trivial.
 *             return self._subn_expand(repl_b, string, count, num_repl)             # <<<<<<<<<<<<<<
 *         try:
 *             cstring = repl_b
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_3re2_Pattern *)__pyx_v_self->__pyx_vtab)->_subn_expand(__pyx_v_self, __pyx_v_repl_b, __pyx_v_string, __pyx_v_count, __pyx_v_num_repl); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pattern.pxi":420
 *             repl_b = bytes(repl)  # coerce buffer to bytes object
 * 
 *         if count > 1 or (b'\\' if PY2 else <char>b'\\') in repl_b:             # <<<<<<<<<<<<<<
 *             # Limit on number of substitutions or replacement string contains
 *             # escape sequences; handle with Match.expand() implementation.
 */
  }

  /* "pattern.pxi":427
 *             # non-trivial.
 *             return self._subn_expand(repl_b, string, count, num_repl)
 *         try:             # <<<<<<<<<<<<<<
 *             cstring = repl_b
 *             size = len(repl_b)
 */
  /*try:*/ {

    /* "pattern.pxi":428
 *             return self._subn_expand(repl_b, string, count, num_repl)
 *         try:
 *             cstring = repl_b             # <<<<<<<<<<<<<<
 *             size = len(repl_b)
 *             sp = new StringPiece(cstring, size)
 */
    if (unlikely(__pyx_v_repl_b == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(1, 428, __pyx_L11_error)
    }
    __pyx_t_6 = __Pyx_PyBytes_AsWritableString(__pyx_v_repl_b); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(1, 428, __pyx_L11_error)
    __pyx_v_cstring = __pyx_t_6;

    /* "pattern.pxi":429
 *         try:
 *             cstring = repl_b
 *             size = len(repl_b)             # <<<<<<<<<<<<<<
 *             sp = new StringPiece(cstring, size)
 * 
 */
    if (unlikely(__pyx_v_repl_b == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(1, 429, __pyx_L11_error)
    }
    __pyx_t_7 = PyBytes_GET_SIZE(__pyx_v_repl_b); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(1, 429, __pyx_L11_error)
    __pyx_v_size = __pyx_t_7;

    /* "pattern.pxi":430
 *             cstring = repl_b
 *             size = len(repl_b)
 *             sp = new StringPiece(cstring, size)             # <<<<<<<<<<<<<<
 * 
 *             bytestr = unicode_to_bytes(string, &string_encoded, self.encoded)
 */
    __pyx_v_sp = new re2::StringPiece(__pyx_v_cstring, __pyx_v_size);

    /* "pattern.pxi":432
 *             sp = new StringPiece(cstring, size)
 * 
 *             bytestr = unicode_to_bytes(string, &string_encoded, self.encoded)             # <<<<<<<<<<<<<<
 *             if not string_encoded and not isinstance(bytestr, bytes):
 *                 bytestr = bytes(bytestr)  # coerce buffer to bytes object
 */
    __pyx_t_3 = __pyx_f_3re2_unicode_to_bytes(__pyx_v_string, (&__pyx_v_string_encoded), __pyx_v_self->encoded); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 432, __pyx_L11_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_bytestr = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pattern.pxi":433
 * 
 *             bytestr = unicode_to_bytes(string, &string_encoded, self.encoded)
 *             if not string_encoded and not isinstance(bytestr, bytes):             # <<<<<<<<<<<<<<
 *                 bytestr = bytes(bytestr)  # coerce buffer to bytes object
 *             input_str = new cpp_string(<char *>bytestr, len(bytestr))
 */
    __pyx_t_1 = ((!(__pyx_v_string_encoded != 0)) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_1 = PyBytes_Check(__pyx_v_bytestr); 
    __pyx_t_4 = ((!(__pyx_t_1 != 0)) != 0);
    __pyx_t_2 = __pyx_t_4;
    __pyx_L14_bool_binop_done:;
    if (__pyx_t_2) {

      /* "pattern.pxi":434
 *             bytestr = unicode_to_bytes(string, &string_encoded, self.encoded)
 *             if not string_encoded and not isinstance(bytestr, bytes):
 *                 bytestr = bytes(bytestr)  # coerce buffer to bytes object             # <<<<<<<<<<<<<<
 *             input_str = new cpp_string(<char *>bytestr, len(bytestr))
 *             # NB: RE2 treats unmatched groups in repl as empty string;
 */
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_v_bytestr); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 434, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_bytestr, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pattern.pxi":433
 * 
 *             bytestr = unicode_to_bytes(string, &string_encoded, self.encoded)
 *             if not string_encoded and not isinstance(bytestr, bytes):             # <<<<<<<<<<<<<<
 *                 bytestr = bytes(bytestr)  # coerce buffer to bytes object
 *             input_str = new cpp_string(<char *>bytestr, len(bytestr))
 */
    }

    /* "pattern.pxi":435
 *             if not string_encoded and not isinstance(bytestr, bytes):
 *                 bytestr = bytes(bytestr)  # coerce buffer to bytes object
 *             input_str = new cpp_string(<char *>bytestr, len(bytestr))             # <<<<<<<<<<<<<<
 *             # NB: RE2 treats unmatched groups in repl as empty string;
 *             # Python raises an error.
 */
    __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_bytestr); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(1, 435, __pyx_L11_error)
    __pyx_t_7 = PyObject_Length(__pyx_v_bytestr); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(1, 435, __pyx_L11_error)
    try {
      __pyx_t_8 = new std::string(((char *)__pyx_t_6), __pyx_t_7);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 435, __pyx_L11_error)
    }
    __pyx_v_input_str = __pyx_t_8;

    /* "pattern.pxi":438
 *             # NB: RE2 treats unmatched groups in repl as empty string;
 *             # Python raises an error.
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 if count == 0:
 *                     num_repl[0] = GlobalReplace(
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "pattern.pxi":439
 *             # Python raises an error.
 *             with nogil:
 *                 if count == 0:             # <<<<<<<<<<<<<<
 *                     num_repl[0] = GlobalReplace(
 *                             input_str, self.re_pattern[0], sp[0])
 */
          switch (__pyx_v_count) {
            case 0:

            /* "pattern.pxi":440
 *             with nogil:
 *                 if count == 0:
 *                     num_repl[0] = GlobalReplace(             # <<<<<<<<<<<<<<
 *                             input_str, self.re_pattern[0], sp[0])
 *                 elif count == 1:
 */
            (__pyx_v_num_repl[0]) = RE2::GlobalReplace(__pyx_v_input_str, (__pyx_v_self->re_pattern[0]), (__pyx_v_sp[0]));

            /* "pattern.pxi":439
 *             # Python raises an error.
 *             with nogil:
 *                 if count == 0:             # <<<<<<<<<<<<<<
 *                     num_repl[0] = GlobalReplace(
 *                             input_str, self.re_pattern[0], sp[0])
 */
            break;
            case 1:

            /* "pattern.pxi":443
 *                             input_str, self.re_pattern[0], sp[0])
 *                 elif count == 1:
 *                     num_repl[0] = Replace(             # <<<<<<<<<<<<<<
 *                             input_str, self.re_pattern[0], sp[0])
 * 
 */
            (__pyx_v_num_repl[0]) = RE2::Replace(__pyx_v_input_str, (__pyx_v_self->re_pattern[0]), (__pyx_v_sp[0]));

            /* "pattern.pxi":442
 *                     num_repl[0] = GlobalReplace(
 *                             input_str, self.re_pattern[0], sp[0])
 *                 elif count == 1:             # <<<<<<<<<<<<<<
 *                     num_repl[0] = Replace(
 *                             input_str, self.re_pattern[0], sp[0])
 */
            break;
            default: break;
          }
        }

        /* "pattern.pxi":438
 *             # NB: RE2 treats unmatched groups in repl as empty string;
 *             # Python raises an error.
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 if count == 0:
 *                     num_repl[0] = GlobalReplace(
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L18;
          }
          __pyx_L18:;
        }
    }

    /* "pattern.pxi":446
 *                             input_str, self.re_pattern[0], sp[0])
 * 
 *             if string_encoded or (repl_encoded and num_repl[0] > 0):             # <<<<<<<<<<<<<<
 *                 result = cpp_to_unicode(input_str[0])
 *             else:
 */
    __pyx_t_4 = (__pyx_v_string_encoded != 0);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L20_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_repl_encoded != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L20_bool_binop_done;
    }
    __pyx_t_4 = (((__pyx_v_num_repl[0]) > 0) != 0);
    __pyx_t_2 = __pyx_t_4;
    __pyx_L20_bool_binop_done:;
    if (__pyx_t_2) {

      /* "pattern.pxi":447
 * 
 *             if string_encoded or (repl_encoded and num_repl[0] > 0):
 *                 result = cpp_to_unicode(input_str[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 result = cpp_to_bytes(input_str[0])
 */
      __pyx_t_3 = __pyx_f_3re2_cpp_to_unicode((__pyx_v_input_str[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 447, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_result = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "pattern.pxi":446
 *                             input_str, self.re_pattern[0], sp[0])
 * 
 *             if string_encoded or (repl_encoded and num_repl[0] > 0):             # <<<<<<<<<<<<<<
 *                 result = cpp_to_unicode(input_str[0])
 *             else:
 */
      goto __pyx_L19;
    }

    /* "pattern.pxi":449
 *                 result = cpp_to_unicode(input_str[0])
 *             else:
 *                 result = cpp_to_bytes(input_str[0])             # <<<<<<<<<<<<<<
 *         finally:
 *             del input_str, sp
 */
    /*else*/ {
      __pyx_t_3 = __pyx_f_3re2_cpp_to_bytes((__pyx_v_input_str[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 449, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_result = __pyx_t_3;
      __pyx_t_3 = 0;
    }
    __pyx_L19:;
  }

  /* "pattern.pxi":451
 *                 result = cpp_to_bytes(input_str[0])
 *         finally:
 *             del input_str, sp             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      delete __pyx_v_input_str;
      delete __pyx_v_sp;
      goto __pyx_L12;
    }
    __pyx_L11_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14) < 0)) __Pyx_ErrFetch(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __pyx_t_9 = __pyx_lineno; __pyx_t_10 = __pyx_clineno; __pyx_t_11 = __pyx_filename;
      {
        delete __pyx_v_input_str;
        delete __pyx_v_sp;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_XGIVEREF(__pyx_t_17);
        __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
      }
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_ErrRestore(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;
      __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_10; __pyx_filename = __pyx_t_11;
      goto __pyx_L1_error;
    }
    __pyx_L12:;
  }

  /* "pattern.pxi":452
 *         finally:
 *             del input_str, sp
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     cdef _subn_callback(self, callback, string, int count, int * num_repl):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pattern.pxi":402
 *         return result, num_repl
 * 
 *     cdef _subn(self, repl, string, int count, int *num_repl):             # <<<<<<<<<<<<<<
 *         cdef bytes repl_b
 *         cdef char * cstring
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("re2.Pattern._subn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_repl_b);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_bytestr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":454
 *         return result
 * 
 *     cdef _subn_callback(self, callback, string, int count, int * num_repl):             # <<<<<<<<<<<<<<
 *         # This function is probably the hardest to implement correctly.
 *         # This is my first attempt, but if anybody has a better solution,
 */

static PyObject *__pyx_f_3re2_7Pattern__subn_callback(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_callback, PyObject *__pyx_v_string, int __pyx_v_count, int *__pyx_v_num_repl) {
  char *__pyx_v_cstring;
  Py_ssize_t __pyx_v_size;
  Py_buffer __pyx_v_buf;
  int __pyx_v_retval;
  int __pyx_v_endpos;
  int __pyx_v_pos;
  int __pyx_v_encoded;
  re2::StringPiece *__pyx_v_sp;
  struct __pyx_obj_3re2_Match *__pyx_v_m = 0;
  PyObject *__pyx_v_result = 0;
  int __pyx_v_cpos;
  int __pyx_v_upos;
  PyObject *__pyx_v_bytestr = NULL;
  PyObject *__pyx_v_tmp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  long __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  char const *__pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_subn_callback", 0);

  /* "pattern.pxi":463
 *         cdef int retval
 *         cdef int endpos
 *         cdef int pos = 0             # <<<<<<<<<<<<<<
 *         cdef int encoded = 0
 *         cdef StringPiece * sp
 */
  __pyx_v_pos = 0;

  /* "pattern.pxi":464
 *         cdef int endpos
 *         cdef int pos = 0
 *         cdef int encoded = 0             # <<<<<<<<<<<<<<
 *         cdef StringPiece * sp
 *         cdef Match m
 */
  __pyx_v_encoded = 0;

  /* "pattern.pxi":467
 *         cdef StringPiece * sp
 *         cdef Match m
 *         cdef bytearray result = bytearray()             # <<<<<<<<<<<<<<
 *         cdef int cpos = 0, upos = 0
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)(&PyByteArray_Type))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pattern.pxi":468
 *         cdef Match m
 *         cdef bytearray result = bytearray()
 *         cdef int cpos = 0, upos = 0             # <<<<<<<<<<<<<<
 * 
 *         if count < 0:
 */
  __pyx_v_cpos = 0;
  __pyx_v_upos = 0;

  /* "pattern.pxi":470
 *         cdef int cpos = 0, upos = 0
 * 
 *         if count < 0:             # <<<<<<<<<<<<<<
 *             count = 0
 * 
 */
  __pyx_t_2 = ((__pyx_v_count < 0) != 0);
  if (__pyx_t_2) {

    /* "pattern.pxi":471
 * 
 *         if count < 0:
 *             count = 0             # <<<<<<<<<<<<<<
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 */
    __pyx_v_count = 0;

    /* "pattern.pxi":470
 *         cdef int cpos = 0, upos = 0
 * 
 *         if count < 0:             # <<<<<<<<<<<<<<
 *             count = 0
 * 
 */
  }

  /* "pattern.pxi":473
 *             count = 0
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)             # <<<<<<<<<<<<<<
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')
 */
  __pyx_t_1 = __pyx_f_3re2_unicode_to_bytes(__pyx_v_string, (&__pyx_v_encoded), __pyx_v_self->encoded); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytestr = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pattern.pxi":474
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError('expected string or buffer')
 *         sp = new StringPiece(cstring, size)
 */
  __pyx_t_2 = ((__pyx_f_3re2_pystring_to_cstring(__pyx_v_bytestr, (&__pyx_v_cstring), (&__pyx_v_size), (&__pyx_v_buf)) == -1L) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pattern.pxi":475
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')             # <<<<<<<<<<<<<<
 *         sp = new StringPiece(cstring, size)
 *         try:
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 475, __pyx_L1_error)

    /* "pattern.pxi":474
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError('expected string or buffer')
 *         sp = new StringPiece(cstring, size)
 */
  }

  /* "pattern.pxi":476
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')
 *         sp = new StringPiece(cstring, size)             # <<<<<<<<<<<<<<
 *         try:
 *             while True:
 */
  __pyx_v_sp = new re2::StringPiece(__pyx_v_cstring, __pyx_v_size);

  /* "pattern.pxi":477
 *             raise TypeError('expected string or buffer')
 *         sp = new StringPiece(cstring, size)
 *         try:             # <<<<<<<<<<<<<<
 *             while True:
 *                 m = Match(self, self.groups + 1)
 */
  /*try:*/ {

    /* "pattern.pxi":478
 *         sp = new StringPiece(cstring, size)
 *         try:
 *             while True:             # <<<<<<<<<<<<<<
 *                 m = Match(self, self.groups + 1)
 *                 m.string = string
 */
    while (1) {

      /* "pattern.pxi":479
 *         try:
 *             while True:
 *                 m = Match(self, self.groups + 1)             # <<<<<<<<<<<<<<
 *                 m.string = string
 *                 with nogil:
 */
      __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_self->groups + 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 479, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 479, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3re2_Match), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 479, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_m, ((struct __pyx_obj_3re2_Match *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "pattern.pxi":480
 *             while True:
 *                 m = Match(self, self.groups + 1)
 *                 m.string = string             # <<<<<<<<<<<<<<
 *                 with nogil:
 *                     retval = self.re_pattern.Match(
 */
      __Pyx_INCREF(__pyx_v_string);
      __Pyx_GIVEREF(__pyx_v_string);
      __Pyx_GOTREF(__pyx_v_m->string);
      __Pyx_DECREF(__pyx_v_m->string);
      __pyx_v_m->string = __pyx_v_string;

      /* "pattern.pxi":481
 *                 m = Match(self, self.groups + 1)
 *                 m.string = string
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     retval = self.re_pattern.Match(
 *                             sp[0],
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          __Pyx_FastGIL_Remember();
          #endif
          /*try:*/ {

            /* "pattern.pxi":482
 *                 m.string = string
 *                 with nogil:
 *                     retval = self.re_pattern.Match(             # <<<<<<<<<<<<<<
 *                             sp[0],
 *                             pos,
 */
            __pyx_v_retval = __pyx_v_self->re_pattern->Match((__pyx_v_sp[0]), __pyx_v_pos, __pyx_v_size, RE2::UNANCHORED, __pyx_v_m->matches, (__pyx_v_self->groups + 1));
          }

          /* "pattern.pxi":481
 *                 m = Match(self, self.groups + 1)
 *                 m.string = string
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     retval = self.re_pattern.Match(
 *                             sp[0],
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              __Pyx_FastGIL_Forget();
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L14;
            }
            __pyx_L14:;
          }
      }

      /* "pattern.pxi":489
 *                             m.matches,
 *                             self.groups + 1)
 *                 if retval == 0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      __pyx_t_2 = ((__pyx_v_retval == 0) != 0);
      if (__pyx_t_2) {

        /* "pattern.pxi":490
 *                             self.groups + 1)
 *                 if retval == 0:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *                 endpos = m.matches[0].data() - cstring
 */
        goto __pyx_L9_break;

        /* "pattern.pxi":489
 *                             m.matches,
 *                             self.groups + 1)
 *                 if retval == 0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      }

      /* "pattern.pxi":492
 *                     break
 * 
 *                 endpos = m.matches[0].data() - cstring             # <<<<<<<<<<<<<<
 *                 result.extend(sp.data()[pos:endpos])
 *                 pos = endpos + m.matches[0].length()
 */
      __pyx_v_endpos = ((__pyx_v_m->matches[0]).data() - __pyx_v_cstring);

      /* "pattern.pxi":493
 * 
 *                 endpos = m.matches[0].data() - cstring
 *                 result.extend(sp.data()[pos:endpos])             # <<<<<<<<<<<<<<
 *                 pos = endpos + m.matches[0].length()
 * 
 */
      __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_sp->data() + __pyx_v_pos, __pyx_v_endpos - __pyx_v_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 493, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pattern.pxi":494
 *                 endpos = m.matches[0].data() - cstring
 *                 result.extend(sp.data()[pos:endpos])
 *                 pos = endpos + m.matches[0].length()             # <<<<<<<<<<<<<<
 * 
 *                 m.encoded = encoded
 */
      __pyx_v_pos = (__pyx_v_endpos + (__pyx_v_m->matches[0]).length());

      /* "pattern.pxi":496
 *                 pos = endpos + m.matches[0].length()
 * 
 *                 m.encoded = encoded             # <<<<<<<<<<<<<<
 *                 m.nmatches = self.groups + 1
 *                 m._make_spans(cstring, size, &cpos, &upos)
 */
      __pyx_v_m->encoded = __pyx_v_encoded;

      /* "pattern.pxi":497
 * 
 *                 m.encoded = encoded
 *                 m.nmatches = self.groups + 1             # <<<<<<<<<<<<<<
 *                 m._make_spans(cstring, size, &cpos, &upos)
 *                 m._init_groups()
 */
      __pyx_v_m->nmatches = (__pyx_v_self->groups + 1);

      /* "pattern.pxi":498
 *                 m.encoded = encoded
 *                 m.nmatches = self.groups + 1
 *                 m._make_spans(cstring, size, &cpos, &upos)             # <<<<<<<<<<<<<<
 *                 m._init_groups()
 *                 tmp = callback(m)
 */
      __pyx_t_3 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_m->__pyx_vtab)->_make_spans(__pyx_v_m, __pyx_v_cstring, __pyx_v_size, (&__pyx_v_cpos), (&__pyx_v_upos)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 498, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pattern.pxi":499
 *                 m.nmatches = self.groups + 1
 *                 m._make_spans(cstring, size, &cpos, &upos)
 *                 m._init_groups()             # <<<<<<<<<<<<<<
 *                 tmp = callback(m)
 *                 if tmp:
 */
      __pyx_t_3 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_m->__pyx_vtab)->_init_groups(__pyx_v_m); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 499, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pattern.pxi":500
 *                 m._make_spans(cstring, size, &cpos, &upos)
 *                 m._init_groups()
 *                 tmp = callback(m)             # <<<<<<<<<<<<<<
 *                 if tmp:
 *                     result.extend(tmp.encode('utf8') if encoded else tmp)
 */
      __Pyx_INCREF(__pyx_v_callback);
      __pyx_t_1 = __pyx_v_callback; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, ((PyObject *)__pyx_v_m)) : __Pyx_PyObject_CallOneArg(__pyx_t_1, ((PyObject *)__pyx_v_m));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 500, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_tmp, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pattern.pxi":501
 *                 m._init_groups()
 *                 tmp = callback(m)
 *                 if tmp:             # <<<<<<<<<<<<<<
 *                     result.extend(tmp.encode('utf8') if encoded else tmp)
 *                 else:
 */
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_tmp); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 501, __pyx_L6_error)
      if (__pyx_t_2) {

        /* "pattern.pxi":502
 *                 tmp = callback(m)
 *                 if tmp:
 *                     result.extend(tmp.encode('utf8') if encoded else tmp)             # <<<<<<<<<<<<<<
 *                 else:
 *                     result.extend(b'')
 */
        if ((__pyx_v_encoded != 0)) {
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_tmp, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 502, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_n_u_utf8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_u_utf8);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 502, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_3 = __pyx_t_1;
          __pyx_t_1 = 0;
        } else {
          __Pyx_INCREF(__pyx_v_tmp);
          __pyx_t_3 = __pyx_v_tmp;
        }
        __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 502, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "pattern.pxi":501
 *                 m._init_groups()
 *                 tmp = callback(m)
 *                 if tmp:             # <<<<<<<<<<<<<<
 *                     result.extend(tmp.encode('utf8') if encoded else tmp)
 *                 else:
 */
        goto __pyx_L16;
      }

      /* "pattern.pxi":504
 *                     result.extend(tmp.encode('utf8') if encoded else tmp)
 *                 else:
 *                     result.extend(b'')             # <<<<<<<<<<<<<<
 * 
 *                 num_repl[0] += 1
 */
      /*else*/ {
        __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_kp_b__7); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 504, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L16:;

      /* "pattern.pxi":506
 *                     result.extend(b'')
 * 
 *                 num_repl[0] += 1             # <<<<<<<<<<<<<<
 *                 if count and num_repl[0] >= count:
 *                     break
 */
      __pyx_t_6 = 0;
      (__pyx_v_num_repl[__pyx_t_6]) = ((__pyx_v_num_repl[__pyx_t_6]) + 1);

      /* "pattern.pxi":507
 * 
 *                 num_repl[0] += 1
 *                 if count and num_repl[0] >= count:             # <<<<<<<<<<<<<<
 *                     break
 *             result.extend(sp.data()[pos:])
 */
      __pyx_t_7 = (__pyx_v_count != 0);
      if (__pyx_t_7) {
      } else {
        __pyx_t_2 = __pyx_t_7;
        goto __pyx_L18_bool_binop_done;
      }
      __pyx_t_7 = (((__pyx_v_num_repl[0]) >= __pyx_v_count) != 0);
      __pyx_t_2 = __pyx_t_7;
      __pyx_L18_bool_binop_done:;
      if (__pyx_t_2) {

        /* "pattern.pxi":508
 *                 num_repl[0] += 1
 *                 if count and num_repl[0] >= count:
 *                     break             # <<<<<<<<<<<<<<
 *             result.extend(sp.data()[pos:])
 *         finally:
 */
        goto __pyx_L9_break;

        /* "pattern.pxi":507
 * 
 *                 num_repl[0] += 1
 *                 if count and num_repl[0] >= count:             # <<<<<<<<<<<<<<
 *                     break
 *             result.extend(sp.data()[pos:])
 */
      }
    }
    __pyx_L9_break:;

    /* "pattern.pxi":509
 *                 if count and num_repl[0] >= count:
 *                     break
 *             result.extend(sp.data()[pos:])             # <<<<<<<<<<<<<<
 *         finally:
 *             del sp
 */
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_sp->data() + __pyx_v_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 509, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 509, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "pattern.pxi":511
 *             result.extend(sp.data()[pos:])
 *         finally:
 *             del sp             # <<<<<<<<<<<<<<
 *             release_cstring(&buf)
 *         return result.decode('utf8') if encoded else bytes(result)
 */
  /*finally:*/ {
    /*normal exit:*/{
      delete __pyx_v_sp;

      /* "pattern.pxi":512
 *         finally:
 *             del sp
 *             release_cstring(&buf)             # <<<<<<<<<<<<<<
 *         return result.decode('utf8') if encoded else bytes(result)
 * 
 */
      __pyx_f_3re2_release_cstring((&__pyx_v_buf));
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13) < 0)) __Pyx_ErrFetch(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __pyx_t_8 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_10 = __pyx_filename;
      {

        /* "pattern.pxi":511
 *             result.extend(sp.data()[pos:])
 *         finally:
 *             del sp             # <<<<<<<<<<<<<<
 *             release_cstring(&buf)
 *         return result.decode('utf8') if encoded else bytes(result)
 */
        delete __pyx_v_sp;

        /* "pattern.pxi":512
 *         finally:
 *             del sp
 *             release_cstring(&buf)             # <<<<<<<<<<<<<<
 *         return result.decode('utf8') if encoded else bytes(result)
 * 
 */
        __pyx_f_3re2_release_cstring((&__pyx_v_buf));
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
      }
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ErrRestore(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0;
      __pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_10;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "pattern.pxi":513
 *             del sp
 *             release_cstring(&buf)
 *         return result.decode('utf8') if encoded else bytes(result)             # <<<<<<<<<<<<<<
 * 
 *     cdef _subn_expand(self, bytes repl, string, int count, int * num_repl):
 */
  __Pyx_XDECREF(__pyx_r);
  if ((__pyx_v_encoded != 0)) {
    __pyx_t_1 = __Pyx_decode_bytearray(__pyx_v_result, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":454
 *         return result
 * 
 *     cdef _subn_callback(self, callback, string, int count, int * num_repl):             # <<<<<<<<<<<<<<
 *         # This function is probably the hardest to implement correctly.
 *         # This is my first attempt, but if anybody has a better solution,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("re2.Pattern._subn_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_bytestr);
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":515
 *         return result.decode('utf8') if encoded else bytes(result)
 * 
 *     cdef _subn_expand(self, bytes repl, string, int count, int * num_repl):             # <<<<<<<<<<<<<<
 *         """Perform ``count`` substitutions with replacement string and
 *         Match.expand."""
 */

static PyObject *__pyx_f_3re2_7Pattern__subn_expand(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, int __pyx_v_count, int *__pyx_v_num_repl) {
  char *__pyx_v_cstring;
  Py_ssize_t __pyx_v_size;
  Py_buffer __pyx_v_buf;
  int __pyx_v_retval;
  int __pyx_v_endpos;
  int __pyx_v_pos;
  int __pyx_v_encoded;
  re2::StringPiece *__pyx_v_sp;
  struct __pyx_obj_3re2_Match *__pyx_v_m = 0;
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_v_bytestr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  char const *__pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_subn_expand", 0);

  /* "pattern.pxi":523
 *         cdef int retval
 *         cdef int endpos
 *         cdef int pos = 0             # <<<<<<<<<<<<<<
 *         cdef int encoded = 0
 *         cdef StringPiece * sp
 */
  __pyx_v_pos = 0;

  /* "pattern.pxi":524
 *         cdef int endpos
 *         cdef int pos = 0
 *         cdef int encoded = 0             # <<<<<<<<<<<<<<
 *         cdef StringPiece * sp
 *         cdef Match m
 */
  __pyx_v_encoded = 0;

  /* "pattern.pxi":527
 *         cdef StringPiece * sp
 *         cdef Match m
 *         cdef bytearray result = bytearray()             # <<<<<<<<<<<<<<
 * 
 *         if count < 0:
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)(&PyByteArray_Type))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pattern.pxi":529
 *         cdef bytearray result = bytearray()
 * 
 *         if count < 0:             # <<<<<<<<<<<<<<
 *             count = 0
 * 
 */
  __pyx_t_2 = ((__pyx_v_count < 0) != 0);
  if (__pyx_t_2) {

    /* "pattern.pxi":530
 * 
 *         if count < 0:
 *             count = 0             # <<<<<<<<<<<<<<
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 */
    __pyx_v_count = 0;

    /* "pattern.pxi":529
 *         cdef bytearray result = bytearray()
 * 
 *         if count < 0:             # <<<<<<<<<<<<<<
 *             count = 0
 * 
 */
  }

  /* "pattern.pxi":532
 *             count = 0
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)             # <<<<<<<<<<<<<<
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')
 */
  __pyx_t_1 = __pyx_f_3re2_unicode_to_bytes(__pyx_v_string, (&__pyx_v_encoded), __pyx_v_self->encoded); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytestr = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pattern.pxi":533
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError('expected string or buffer')
 *         sp = new StringPiece(cstring, size)
 */
  __pyx_t_2 = ((__pyx_f_3re2_pystring_to_cstring(__pyx_v_bytestr, (&__pyx_v_cstring), (&__pyx_v_size), (&__pyx_v_buf)) == -1L) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pattern.pxi":534
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')             # <<<<<<<<<<<<<<
 *         sp = new StringPiece(cstring, size)
 *         try:
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 534, __pyx_L1_error)

    /* "pattern.pxi":533
 * 
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError('expected string or buffer')
 *         sp = new StringPiece(cstring, size)
 */
  }

  /* "pattern.pxi":535
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')
 *         sp = new StringPiece(cstring, size)             # <<<<<<<<<<<<<<
 *         try:
 *             while True:
 */
  __pyx_v_sp = new re2::StringPiece(__pyx_v_cstring, __pyx_v_size);

  /* "pattern.pxi":536
 *             raise TypeError('expected string or buffer')
 *         sp = new StringPiece(cstring, size)
 *         try:             # <<<<<<<<<<<<<<
 *             while True:
 *                 m = Match(self, self.groups + 1)
 */
  /*try:*/ {

    /* "pattern.pxi":537
 *         sp = new StringPiece(cstring, size)
 *         try:
 *             while True:             # <<<<<<<<<<<<<<
 *                 m = Match(self, self.groups + 1)
 *                 m.string = string
 */
    while (1) {

      /* "pattern.pxi":538
 *         try:
 *             while True:
 *                 m = Match(self, self.groups + 1)             # <<<<<<<<<<<<<<
 *                 m.string = string
 *                 with nogil:
 */
      __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_self->groups + 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 538, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 538, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3re2_Match), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 538, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_m, ((struct __pyx_obj_3re2_Match *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "pattern.pxi":539
 *             while True:
 *                 m = Match(self, self.groups + 1)
 *                 m.string = string             # <<<<<<<<<<<<<<
 *                 with nogil:
 *                     retval = self.re_pattern.Match(
 */
      __Pyx_INCREF(__pyx_v_string);
      __Pyx_GIVEREF(__pyx_v_string);
      __Pyx_GOTREF(__pyx_v_m->string);
      __Pyx_DECREF(__pyx_v_m->string);
      __pyx_v_m->string = __pyx_v_string;

      /* "pattern.pxi":540
 *                 m = Match(self, self.groups + 1)
 *                 m.string = string
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     retval = self.re_pattern.Match(
 *                             sp[0],
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          __Pyx_FastGIL_Remember();
          #endif
          /*try:*/ {

            /* "pattern.pxi":541
 *                 m.string = string
 *                 with nogil:
 *                     retval = self.re_pattern.Match(             # <<<<<<<<<<<<<<
 *                             sp[0],
 *                             pos,
 */
            __pyx_v_retval = __pyx_v_self->re_pattern->Match((__pyx_v_sp[0]), __pyx_v_pos, __pyx_v_size, RE2::UNANCHORED, __pyx_v_m->matches, (__pyx_v_self->groups + 1));
          }

          /* "pattern.pxi":540
 *                 m = Match(self, self.groups + 1)
 *                 m.string = string
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     retval = self.re_pattern.Match(
 *                             sp[0],
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              __Pyx_FastGIL_Forget();
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L14;
            }
            __pyx_L14:;
          }
      }

      /* "pattern.pxi":548
 *                             m.matches,
 *                             self.groups + 1)
 *                 if retval == 0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      __pyx_t_2 = ((__pyx_v_retval == 0) != 0);
      if (__pyx_t_2) {

        /* "pattern.pxi":549
 *                             self.groups + 1)
 *                 if retval == 0:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *                 endpos = m.matches[0].data() - cstring
 */
        goto __pyx_L9_break;

        /* "pattern.pxi":548
 *                             m.matches,
 *                             self.groups + 1)
 *                 if retval == 0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      }

      /* "pattern.pxi":551
 *                     break
 * 
 *                 endpos = m.matches[0].data() - cstring             # <<<<<<<<<<<<<<
 *                 result.extend(sp.data()[pos:endpos])
 *                 pos = endpos + m.matches[0].length()
 */
      __pyx_v_endpos = ((__pyx_v_m->matches[0]).data() - __pyx_v_cstring);

      /* "pattern.pxi":552
 * 
 *                 endpos = m.matches[0].data() - cstring
 *                 result.extend(sp.data()[pos:endpos])             # <<<<<<<<<<<<<<
 *                 pos = endpos + m.matches[0].length()
 * 
 */
      __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_sp->data() + __pyx_v_pos, __pyx_v_endpos - __pyx_v_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 552, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 552, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pattern.pxi":553
 *                 endpos = m.matches[0].data() - cstring
 *                 result.extend(sp.data()[pos:endpos])
 *                 pos = endpos + m.matches[0].length()             # <<<<<<<<<<<<<<
 * 
 *                 m.encoded = encoded
 */
      __pyx_v_pos = (__pyx_v_endpos + (__pyx_v_m->matches[0]).length());

      /* "pattern.pxi":555
 *                 pos = endpos + m.matches[0].length()
 * 
 *                 m.encoded = encoded             # <<<<<<<<<<<<<<
 *                 m.nmatches = self.groups + 1
 *                 m._init_groups()
 */
      __pyx_v_m->encoded = __pyx_v_encoded;

      /* "pattern.pxi":556
 * 
 *                 m.encoded = encoded
 *                 m.nmatches = self.groups + 1             # <<<<<<<<<<<<<<
 *                 m._init_groups()
 *                 m._expand(repl, result)
 */
      __pyx_v_m->nmatches = (__pyx_v_self->groups + 1);

      /* "pattern.pxi":557
 *                 m.encoded = encoded
 *                 m.nmatches = self.groups + 1
 *                 m._init_groups()             # <<<<<<<<<<<<<<
 *                 m._expand(repl, result)
 * 
 */
      __pyx_t_3 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_m->__pyx_vtab)->_init_groups(__pyx_v_m); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 557, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pattern.pxi":558
 *                 m.nmatches = self.groups + 1
 *                 m._init_groups()
 *                 m._expand(repl, result)             # <<<<<<<<<<<<<<
 * 
 *                 num_repl[0] += 1
 */
      __pyx_t_3 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_m->__pyx_vtab)->_expand(__pyx_v_m, __pyx_v_repl, __pyx_v_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 558, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pattern.pxi":560
 *                 m._expand(repl, result)
 * 
 *                 num_repl[0] += 1             # <<<<<<<<<<<<<<
 *                 if count and num_repl[0] >= count:
 *                     break
 */
      __pyx_t_4 = 0;
      (__pyx_v_num_repl[__pyx_t_4]) = ((__pyx_v_num_repl[__pyx_t_4]) + 1);

      /* "pattern.pxi":561
 * 
 *                 num_repl[0] += 1
 *                 if count and num_repl[0] >= count:             # <<<<<<<<<<<<<<
 *                     break
 *             result.extend(sp.data()[pos:])
 */
      __pyx_t_5 = (__pyx_v_count != 0);
      if (__pyx_t_5) {
      } else {
        __pyx_t_2 = __pyx_t_5;
        goto __pyx_L17_bool_binop_done;
      }
      __pyx_t_5 = (((__pyx_v_num_repl[0]) >= __pyx_v_count) != 0);
      __pyx_t_2 = __pyx_t_5;
      __pyx_L17_bool_binop_done:;
      if (__pyx_t_2) {

        /* "pattern.pxi":562
 *                 num_repl[0] += 1
 *                 if count and num_repl[0] >= count:
 *                     break             # <<<<<<<<<<<<<<
 *             result.extend(sp.data()[pos:])
 *         finally:
 */
        goto __pyx_L9_break;

        /* "pattern.pxi":561
 * 
 *                 num_repl[0] += 1
 *                 if count and num_repl[0] >= count:             # <<<<<<<<<<<<<<
 *                     break
 *             result.extend(sp.data()[pos:])
 */
      }
    }
    __pyx_L9_break:;

    /* "pattern.pxi":563
 *                 if count and num_repl[0] >= count:
 *                     break
 *             result.extend(sp.data()[pos:])             # <<<<<<<<<<<<<<
 *         finally:
 *             del sp
 */
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_sp->data() + __pyx_v_pos); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 563, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 563, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pattern.pxi":565
 *             result.extend(sp.data()[pos:])
 *         finally:
 *             del sp             # <<<<<<<<<<<<<<
 *             release_cstring(&buf)
 *         return result.decode('utf8') if encoded else bytes(result)
 */
  /*finally:*/ {
    /*normal exit:*/{
      delete __pyx_v_sp;

      /* "pattern.pxi":566
 *         finally:
 *             del sp
 *             release_cstring(&buf)             # <<<<<<<<<<<<<<
 *         return result.decode('utf8') if encoded else bytes(result)
 * 
 */
      __pyx_f_3re2_release_cstring((&__pyx_v_buf));
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11) < 0)) __Pyx_ErrFetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __pyx_t_6 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_8 = __pyx_filename;
      {

        /* "pattern.pxi":565
 *             result.extend(sp.data()[pos:])
 *         finally:
 *             del sp             # <<<<<<<<<<<<<<
 *             release_cstring(&buf)
 *         return result.decode('utf8') if encoded else bytes(result)
 */
        delete __pyx_v_sp;

        /* "pattern.pxi":566
 *         finally:
 *             del sp
 *             release_cstring(&buf)             # <<<<<<<<<<<<<<
 *         return result.decode('utf8') if encoded else bytes(result)
 * 
 */
        __pyx_f_3re2_release_cstring((&__pyx_v_buf));
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      }
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ErrRestore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
      __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_8;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "pattern.pxi":567
 *             del sp
 *             release_cstring(&buf)
 *         return result.decode('utf8') if encoded else bytes(result)             # <<<<<<<<<<<<<<
 * 
 *     def scanner(self, arg):
 */
  __Pyx_XDECREF(__pyx_r);
  if ((__pyx_v_encoded != 0)) {
    __pyx_t_3 = __Pyx_decode_bytearray(__pyx_v_result, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_v_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":515
 *         return result.decode('utf8') if encoded else bytes(result)
 * 
 *     cdef _subn_expand(self, bytes repl, string, int count, int * num_repl):             # <<<<<<<<<<<<<<
 *         """Perform ``count`` substitutions with replacement string and
 *         Match.expand."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.Pattern._subn_expand", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_bytestr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":569
 *         return result.decode('utf8') if encoded else bytes(result)
 * 
 *     def scanner(self, arg):             # <<<<<<<<<<<<<<
 *         return re.compile(self.pattern).scanner(arg)
 *         # raise NotImplementedError
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_7Pattern_24scanner(PyObject *__pyx_v_self, PyObject *__pyx_v_arg); /*proto*/
static PyObject *__pyx_pw_3re2_7Pattern_24scanner(PyObject *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scanner (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_7Pattern_23scanner(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), ((PyObject *)__pyx_v_arg));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_7Pattern_23scanner(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scanner", 0);

  /* "pattern.pxi":570
 * 
 *     def scanner(self, arg):
 *         return re.compile(self.pattern).scanner(arg)             # <<<<<<<<<<<<<<
 *         # raise NotImplementedError
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_re); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_compile_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_self->pattern) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_self->pattern);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_scanner); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_arg) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_arg);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":569
 *         return result.decode('utf8') if encoded else bytes(result)
 * 
 *     def scanner(self, arg):             # <<<<<<<<<<<<<<
 *         return re.compile(self.pattern).scanner(arg)
 *         # raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("re2.Pattern.scanner", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":573
 *         # raise NotImplementedError
 * 
 *     def _dump_pattern(self):             # <<<<<<<<<<<<<<
 *         cdef cpp_string s = self.re_pattern.pattern()
 *         if self.encoded:
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_7Pattern_26_dump_pattern(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3re2_7Pattern_26_dump_pattern(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_dump_pattern (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_7Pattern_25_dump_pattern(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_7Pattern_25_dump_pattern(struct __pyx_obj_3re2_Pattern *__pyx_v_self) {
  std::string __pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_dump_pattern", 0);

  /* "pattern.pxi":574
 * 
 *     def _dump_pattern(self):
 *         cdef cpp_string s = self.re_pattern.pattern()             # <<<<<<<<<<<<<<
 *         if self.encoded:
 *             return cpp_to_bytes(s).decode('utf8')
 */
  __pyx_v_s = __pyx_v_self->re_pattern->pattern();

  /* "pattern.pxi":575
 *     def _dump_pattern(self):
 *         cdef cpp_string s = self.re_pattern.pattern()
 *         if self.encoded:             # <<<<<<<<<<<<<<
 *             return cpp_to_bytes(s).decode('utf8')
 *         return cpp_to_bytes(s)
 */
  __pyx_t_1 = (__pyx_v_self->encoded != 0);
  if (__pyx_t_1) {

    /* "pattern.pxi":576
 *         cdef cpp_string s = self.re_pattern.pattern()
 *         if self.encoded:
 *             return cpp_to_bytes(s).decode('utf8')             # <<<<<<<<<<<<<<
 *         return cpp_to_bytes(s)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_3re2_cpp_to_bytes(__pyx_v_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_t_2 == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
      __PYX_ERR(1, 576, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_decode_bytes(__pyx_t_2, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pattern.pxi":575
 *     def _dump_pattern(self):
 *         cdef cpp_string s = self.re_pattern.pattern()
 *         if self.encoded:             # <<<<<<<<<<<<<<
 *             return cpp_to_bytes(s).decode('utf8')
 *         return cpp_to_bytes(s)
 */
  }

  /* "pattern.pxi":577
 *         if self.encoded:
 *             return cpp_to_bytes(s).decode('utf8')
 *         return cpp_to_bytes(s)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_3re2_cpp_to_bytes(__pyx_v_s); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":573
 *         # raise NotImplementedError
 * 
 *     def _dump_pattern(self):             # <<<<<<<<<<<<<<
 *         cdef cpp_string s = self.re_pattern.pattern()
 *         if self.encoded:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.Pattern._dump_pattern", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":579
 *         return cpp_to_bytes(s)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         if self.flags == 0:
 *             return 're2.compile(%r)' % self.pattern
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_7Pattern_28__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3re2_7Pattern_28__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_7Pattern_27__repr__(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_7Pattern_27__repr__(struct __pyx_obj_3re2_Pattern *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pattern.pxi":580
 * 
 *     def __repr__(self):
 *         if self.flags == 0:             # <<<<<<<<<<<<<<
 *             return 're2.compile(%r)' % self.pattern
 *         return 're2.compile(%r, %r)' % (self.pattern, self.flags)
 */
  __pyx_t_1 = ((__pyx_v_self->flags == 0) != 0);
  if (__pyx_t_1) {

    /* "pattern.pxi":581
 *     def __repr__(self):
 *         if self.flags == 0:
 *             return 're2.compile(%r)' % self.pattern             # <<<<<<<<<<<<<<
 *         return 're2.compile(%r, %r)' % (self.pattern, self.flags)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_re2_compile_r, __pyx_v_self->pattern); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pattern.pxi":580
 * 
 *     def __repr__(self):
 *         if self.flags == 0:             # <<<<<<<<<<<<<<
 *             return 're2.compile(%r)' % self.pattern
 *         return 're2.compile(%r, %r)' % (self.pattern, self.flags)
 */
  }

  /* "pattern.pxi":582
 *         if self.flags == 0:
 *             return 're2.compile(%r)' % self.pattern
 *         return 're2.compile(%r, %r)' % (self.pattern, self.flags)             # <<<<<<<<<<<<<<
 * 
 *     def __reduce__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = 0;
  __pyx_t_4 = 127;
  __Pyx_INCREF(__pyx_kp_u_re2_compile);
  __pyx_t_3 += 12;
  __Pyx_GIVEREF(__pyx_kp_u_re2_compile);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_re2_compile);
  __pyx_t_5 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_self->pattern), __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_4) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_4;
  __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__9);
  __pyx_t_3 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__9);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u__9);
  __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_self->flags, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__5);
  __pyx_t_3 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__5);
  PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u__5);
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 5, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":579
 *         return cpp_to_bytes(s)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         if self.flags == 0:
 *             return 're2.compile(%r)' % self.pattern
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("re2.Pattern.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":584
 *         return 're2.compile(%r, %r)' % (self.pattern, self.flags)
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return (compile, (self.pattern, self.flags))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_7Pattern_30__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3re2_7Pattern_30__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_7Pattern_29__reduce__(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_7Pattern_29__reduce__(struct __pyx_obj_3re2_Pattern *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "pattern.pxi":585
 * 
 *     def __reduce__(self):
 *         return (compile, (self.pattern, self.flags))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_compile_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->pattern);
  __Pyx_GIVEREF(__pyx_v_self->pattern);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->pattern);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":584
 *         return 're2.compile(%r, %r)' % (self.pattern, self.flags)
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return (compile, (self.pattern, self.flags))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.Pattern.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":587
 *         return (compile, (self.pattern, self.flags))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.re_pattern
 * 
 */

/* Python wrapper */
static void __pyx_pw_3re2_7Pattern_32__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3re2_7Pattern_32__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3re2_7Pattern_31__dealloc__(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3re2_7Pattern_31__dealloc__(struct __pyx_obj_3re2_Pattern *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pattern.pxi":588
 * 
 *     def __dealloc__(self):
 *         del self.re_pattern             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete __pyx_v_self->re_pattern;

  /* "pattern.pxi":587
 *         return (compile, (self.pattern, self.flags))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.re_pattern
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pattern.pxi":2
 * cdef class Pattern:
 *     cdef readonly object pattern  # original pattern in Python format             # <<<<<<<<<<<<<<
 *     cdef readonly int flags
 *     cdef readonly int groups  # number of groups
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_7Pattern_7pattern_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3re2_7Pattern_7pattern_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_7Pattern_7pattern___get__(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_7Pattern_7pattern___get__(struct __pyx_obj_3re2_Pattern *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->pattern);
  __pyx_r = __pyx_v_self->pattern;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":3
 * cdef class Pattern:
 *     cdef readonly object pattern  # original pattern in Python format
 *     cdef readonly int flags             # <<<<<<<<<<<<<<
 *     cdef readonly int groups  # number of groups
 *     cdef readonly dict groupindex  # name => group number
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_7Pattern_5flags_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3re2_7Pattern_5flags_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_7Pattern_5flags___get__(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_7Pattern_5flags___get__(struct __pyx_obj_3re2_Pattern *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Pattern.flags.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":4
 *     cdef readonly object pattern  # original pattern in Python format
 *     cdef readonly int flags
 *     cdef readonly int groups  # number of groups             # <<<<<<<<<<<<<<
 *     cdef readonly dict groupindex  # name => group number
 *     cdef object __weakref__
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_7Pattern_6groups_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3re2_7Pattern_6groups_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_7Pattern_6groups___get__(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_7Pattern_6groups___get__(struct __pyx_obj_3re2_Pattern *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->groups); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Pattern.groups.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":5
 *     cdef readonly int flags
 *     cdef readonly int groups  # number of groups
 *     cdef readonly dict groupindex  # name => group number             # <<<<<<<<<<<<<<
 *     cdef object __weakref__
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_7Pattern_10groupindex_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3re2_7Pattern_10groupindex_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_7Pattern_10groupindex___get__(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_7Pattern_10groupindex___get__(struct __pyx_obj_3re2_Pattern *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->groupindex);
  __pyx_r = __pyx_v_self->groupindex;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":594
 *     """A wrapper for re.Pattern to support the extra methods defined by re2
 *     (contains, count)."""
 *     def __init__(self, pattern, flags=None):             # <<<<<<<<<<<<<<
 *         self._pattern = re.compile(pattern, flags)
 *         self.pattern = pattern
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_15PythonRePattern_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3re2_15PythonRePattern_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_15PythonRePattern_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3re2_15PythonRePattern_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_pattern = 0;
  PyObject *__pyx_v_flags = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_pattern,&__pyx_n_s_flags,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, 1); __PYX_ERR(1, 594, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 594, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_pattern = values[1];
    __pyx_v_flags = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 594, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.PythonRePattern.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_15PythonRePattern___init__(__pyx_self, __pyx_v_self, __pyx_v_pattern, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_15PythonRePattern___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pattern.pxi":595
 *     (contains, count)."""
 *     def __init__(self, pattern, flags=None):
 *         self._pattern = re.compile(pattern, flags)             # <<<<<<<<<<<<<<
 *         self.pattern = pattern
 *         self.flags = flags
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_re); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_compile_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_pattern, __pyx_v_flags};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 595, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_pattern, __pyx_v_flags};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 595, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_v_pattern);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_pattern);
    __Pyx_INCREF(__pyx_v_flags);
    __Pyx_GIVEREF(__pyx_v_flags);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_flags);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_pattern_2, __pyx_t_1) < 0) __PYX_ERR(1, 595, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pattern.pxi":596
 *     def __init__(self, pattern, flags=None):
 *         self._pattern = re.compile(pattern, flags)
 *         self.pattern = pattern             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         self.groupindex = self._pattern.groupindex
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_pattern, __pyx_v_pattern) < 0) __PYX_ERR(1, 596, __pyx_L1_error)

  /* "pattern.pxi":597
 *         self._pattern = re.compile(pattern, flags)
 *         self.pattern = pattern
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         self.groupindex = self._pattern.groupindex
 *         self.groups = self._pattern.groups
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_flags, __pyx_v_flags) < 0) __PYX_ERR(1, 597, __pyx_L1_error)

  /* "pattern.pxi":598
 *         self.pattern = pattern
 *         self.flags = flags
 *         self.groupindex = self._pattern.groupindex             # <<<<<<<<<<<<<<
 *         self.groups = self._pattern.groups
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_pattern_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_groupindex); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_groupindex, __pyx_t_3) < 0) __PYX_ERR(1, 598, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pattern.pxi":599
 *         self.flags = flags
 *         self.groupindex = self._pattern.groupindex
 *         self.groups = self._pattern.groups             # <<<<<<<<<<<<<<
 * 
 *     def contains(self, string):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_pattern_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_groups); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_groups, __pyx_t_1) < 0) __PYX_ERR(1, 599, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pattern.pxi":594
 *     """A wrapper for re.Pattern to support the extra methods defined by re2
 *     (contains, count)."""
 *     def __init__(self, pattern, flags=None):             # <<<<<<<<<<<<<<
 *         self._pattern = re.compile(pattern, flags)
 *         self.pattern = pattern
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("re2.PythonRePattern.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":601
 *         self.groups = self._pattern.groups
 * 
 *     def contains(self, string):             # <<<<<<<<<<<<<<
 *         return bool(self._pattern.search(string))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_15PythonRePattern_3contains(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3re2_15PythonRePattern_3contains = {"contains", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_15PythonRePattern_3contains, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3re2_15PythonRePattern_3contains(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("contains (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_string,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("contains", 1, 2, 2, 1); __PYX_ERR(1, 601, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "contains") < 0)) __PYX_ERR(1, 601, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_string = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("contains", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 601, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.PythonRePattern.contains", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_15PythonRePattern_2contains(__pyx_self, __pyx_v_self, __pyx_v_string);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_15PythonRePattern_2contains(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_string) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("contains", 0);

  /* "pattern.pxi":602
 * 
 *     def contains(self, string):
 *         return bool(self._pattern.search(string))             # <<<<<<<<<<<<<<
 * 
 *     def count(self, string, pos=0, endpos=9223372036854775807):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_pattern_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_search); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_string) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_string);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 602, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_4))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":601
 *         self.groups = self._pattern.groups
 * 
 *     def contains(self, string):             # <<<<<<<<<<<<<<
 *         return bool(self._pattern.search(string))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.PythonRePattern.contains", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":604
 *         return bool(self._pattern.search(string))
 * 
 *     def count(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return len(self._pattern.findall(string, pos, endpos))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_15PythonRePattern_5count(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3re2_15PythonRePattern_5count = {"count", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_15PythonRePattern_5count, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3re2_15PythonRePattern_5count(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_string = 0;
  PyObject *__pyx_v_pos = 0;
  PyObject *__pyx_v_endpos = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_string,&__pyx_n_s_pos,&__pyx_n_s_endpos,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)((PyObject *)__pyx_int_0));
    values[3] = ((PyObject *)((PyObject *)__pyx_int_9223372036854775807));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("count", 0, 2, 4, 1); __PYX_ERR(1, 604, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_endpos);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "count") < 0)) __PYX_ERR(1, 604, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_string = values[1];
    __pyx_v_pos = values[2];
    __pyx_v_endpos = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("count", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 604, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.PythonRePattern.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_15PythonRePattern_4count(__pyx_self, __pyx_v_self, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_15PythonRePattern_4count(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_string, PyObject *__pyx_v_pos, PyObject *__pyx_v_endpos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count", 0);

  /* "pattern.pxi":605
 * 
 *     def count(self, string, pos=0, endpos=9223372036854775807):
 *         return len(self._pattern.findall(string, pos, endpos))             # <<<<<<<<<<<<<<
 * 
 *     def findall(self, string, pos=0, endpos=9223372036854775807):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_pattern_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_findall); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 605, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 605, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_string);
    __Pyx_GIVEREF(__pyx_v_string);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_string);
    __Pyx_INCREF(__pyx_v_pos);
    __Pyx_GIVEREF(__pyx_v_pos);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_pos);
    __Pyx_INCREF(__pyx_v_endpos);
    __Pyx_GIVEREF(__pyx_v_endpos);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_endpos);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(1, 605, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":604
 *         return bool(self._pattern.search(string))
 * 
 *     def count(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return len(self._pattern.findall(string, pos, endpos))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("re2.PythonRePattern.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":607
 *         return len(self._pattern.findall(string, pos, endpos))
 * 
 *     def findall(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.findall(string, pos, endpos)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_15PythonRePattern_7findall(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3re2_15PythonRePattern_7findall = {"findall", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_15PythonRePattern_7findall, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3re2_15PythonRePattern_7findall(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_string = 0;
  PyObject *__pyx_v_pos = 0;
  PyObject *__pyx_v_endpos = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("findall (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_string,&__pyx_n_s_pos,&__pyx_n_s_endpos,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)((PyObject *)__pyx_int_0));
    values[3] = ((PyObject *)((PyObject *)__pyx_int_9223372036854775807));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("findall", 0, 2, 4, 1); __PYX_ERR(1, 607, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_endpos);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "findall") < 0)) __PYX_ERR(1, 607, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_string = values[1];
    __pyx_v_pos = values[2];
    __pyx_v_endpos = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findall", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 607, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.PythonRePattern.findall", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_15PythonRePattern_6findall(__pyx_self, __pyx_v_self, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_15PythonRePattern_6findall(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_string, PyObject *__pyx_v_pos, PyObject *__pyx_v_endpos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("findall", 0);

  /* "pattern.pxi":608
 * 
 *     def findall(self, string, pos=0, endpos=9223372036854775807):
 *         return self._pattern.findall(string, pos, endpos)             # <<<<<<<<<<<<<<
 * 
 *     def finditer(self, string, pos=0, endpos=9223372036854775807):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_pattern_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_findall); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 608, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 608, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 608, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_string);
    __Pyx_GIVEREF(__pyx_v_string);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_string);
    __Pyx_INCREF(__pyx_v_pos);
    __Pyx_GIVEREF(__pyx_v_pos);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_pos);
    __Pyx_INCREF(__pyx_v_endpos);
    __Pyx_GIVEREF(__pyx_v_endpos);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_endpos);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 608, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":607
 *         return len(self._pattern.findall(string, pos, endpos))
 * 
 *     def findall(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.findall(string, pos, endpos)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("re2.PythonRePattern.findall", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":610
 *         return self._pattern.findall(string, pos, endpos)
 * 
 *     def finditer(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.finditer(string, pos, endpos)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_15PythonRePattern_9finditer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3re2_15PythonRePattern_9finditer = {"finditer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_15PythonRePattern_9finditer, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3re2_15PythonRePattern_9finditer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_string = 0;
  PyObject *__pyx_v_pos = 0;
  PyObject *__pyx_v_endpos = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("finditer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_string,&__pyx_n_s_pos,&__pyx_n_s_endpos,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)((PyObject *)__pyx_int_0));
    values[3] = ((PyObject *)((PyObject *)__pyx_int_9223372036854775807));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("finditer", 0, 2, 4, 1); __PYX_ERR(1, 610, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_endpos);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "finditer") < 0)) __PYX_ERR(1, 610, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_string = values[1];
    __pyx_v_pos = values[2];
    __pyx_v_endpos = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("finditer", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 610, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.PythonRePattern.finditer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_15PythonRePattern_8finditer(__pyx_self, __pyx_v_self, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_15PythonRePattern_8finditer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_string, PyObject *__pyx_v_pos, PyObject *__pyx_v_endpos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("finditer", 0);

  /* "pattern.pxi":611
 * 
 *     def finditer(self, string, pos=0, endpos=9223372036854775807):
 *         return self._pattern.finditer(string, pos, endpos)             # <<<<<<<<<<<<<<
 * 
 *     def fullmatch(self, string, pos=0, endpos=9223372036854775807):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_pattern_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_finditer_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 611, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 611, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_string);
    __Pyx_GIVEREF(__pyx_v_string);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_string);
    __Pyx_INCREF(__pyx_v_pos);
    __Pyx_GIVEREF(__pyx_v_pos);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_pos);
    __Pyx_INCREF(__pyx_v_endpos);
    __Pyx_GIVEREF(__pyx_v_endpos);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_endpos);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":610
 *         return self._pattern.findall(string, pos, endpos)
 * 
 *     def finditer(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.finditer(string, pos, endpos)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("re2.PythonRePattern.finditer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":613
 *         return self._pattern.finditer(string, pos, endpos)
 * 
 *     def fullmatch(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.fullmatch(string, pos, endpos)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_15PythonRePattern_11fullmatch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3re2_15PythonRePattern_11fullmatch = {"fullmatch", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_15PythonRePattern_11fullmatch, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3re2_15PythonRePattern_11fullmatch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_string = 0;
  PyObject *__pyx_v_pos = 0;
  PyObject *__pyx_v_endpos = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fullmatch (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_string,&__pyx_n_s_pos,&__pyx_n_s_endpos,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)((PyObject *)__pyx_int_0));
    values[3] = ((PyObject *)((PyObject *)__pyx_int_9223372036854775807));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fullmatch", 0, 2, 4, 1); __PYX_ERR(1, 613, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_endpos);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fullmatch") < 0)) __PYX_ERR(1, 613, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_string = values[1];
    __pyx_v_pos = values[2];
    __pyx_v_endpos = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fullmatch", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 613, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.PythonRePattern.fullmatch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_15PythonRePattern_10fullmatch(__pyx_self, __pyx_v_self, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_15PythonRePattern_10fullmatch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_string, PyObject *__pyx_v_pos, PyObject *__pyx_v_endpos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fullmatch", 0);

  /* "pattern.pxi":614
 * 
 *     def fullmatch(self, string, pos=0, endpos=9223372036854775807):
 *         return self._pattern.fullmatch(string, pos, endpos)             # <<<<<<<<<<<<<<
 * 
 *     def match(self, string, pos=0, endpos=9223372036854775807):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_pattern_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_fullmatch); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 614, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 614, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_string);
    __Pyx_GIVEREF(__pyx_v_string);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_string);
    __Pyx_INCREF(__pyx_v_pos);
    __Pyx_GIVEREF(__pyx_v_pos);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_pos);
    __Pyx_INCREF(__pyx_v_endpos);
    __Pyx_GIVEREF(__pyx_v_endpos);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_endpos);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":613
 *         return self._pattern.finditer(string, pos, endpos)
 * 
 *     def fullmatch(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.fullmatch(string, pos, endpos)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("re2.PythonRePattern.fullmatch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":616
 *         return self._pattern.fullmatch(string, pos, endpos)
 * 
 *     def match(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.match(string, pos, endpos)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_15PythonRePattern_13match(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3re2_15PythonRePattern_13match = {"match", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_15PythonRePattern_13match, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3re2_15PythonRePattern_13match(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_string = 0;
  PyObject *__pyx_v_pos = 0;
  PyObject *__pyx_v_endpos = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("match (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_string,&__pyx_n_s_pos,&__pyx_n_s_endpos,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)((PyObject *)__pyx_int_0));
    values[3] = ((PyObject *)((PyObject *)__pyx_int_9223372036854775807));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("match", 0, 2, 4, 1); __PYX_ERR(1, 616, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_endpos);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "match") < 0)) __PYX_ERR(1, 616, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_string = values[1];
    __pyx_v_pos = values[2];
    __pyx_v_endpos = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("match", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 616, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.PythonRePattern.match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_15PythonRePattern_12match(__pyx_self, __pyx_v_self, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_15PythonRePattern_12match(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_string, PyObject *__pyx_v_pos, PyObject *__pyx_v_endpos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("match", 0);

  /* "pattern.pxi":617
 * 
 *     def match(self, string, pos=0, endpos=9223372036854775807):
 *         return self._pattern.match(string, pos, endpos)             # <<<<<<<<<<<<<<
 * 
 *     def scanner(self, string, pos=0, endpos=9223372036854775807):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_pattern_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_match); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 617, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 617, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_string);
    __Pyx_GIVEREF(__pyx_v_string);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_string);
    __Pyx_INCREF(__pyx_v_pos);
    __Pyx_GIVEREF(__pyx_v_pos);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_pos);
    __Pyx_INCREF(__pyx_v_endpos);
    __Pyx_GIVEREF(__pyx_v_endpos);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_endpos);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":616
 *         return self._pattern.fullmatch(string, pos, endpos)
 * 
 *     def match(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.match(string, pos, endpos)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("re2.PythonRePattern.match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":619
 *         return self._pattern.match(string, pos, endpos)
 * 
 *     def scanner(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.scanner(string, pos, endpos)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_15PythonRePattern_15scanner(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3re2_15PythonRePattern_15scanner = {"scanner", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_15PythonRePattern_15scanner, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3re2_15PythonRePattern_15scanner(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_string = 0;
  PyObject *__pyx_v_pos = 0;
  PyObject *__pyx_v_endpos = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scanner (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_string,&__pyx_n_s_pos,&__pyx_n_s_endpos,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)((PyObject *)__pyx_int_0));
    values[3] = ((PyObject *)((PyObject *)__pyx_int_9223372036854775807));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scanner", 0, 2, 4, 1); __PYX_ERR(1, 619, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_endpos);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scanner") < 0)) __PYX_ERR(1, 619, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_string = values[1];
    __pyx_v_pos = values[2];
    __pyx_v_endpos = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scanner", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 619, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.PythonRePattern.scanner", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_15PythonRePattern_14scanner(__pyx_self, __pyx_v_self, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_15PythonRePattern_14scanner(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_string, PyObject *__pyx_v_pos, PyObject *__pyx_v_endpos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scanner", 0);

  /* "pattern.pxi":620
 * 
 *     def scanner(self, string, pos=0, endpos=9223372036854775807):
 *         return self._pattern.scanner(string, pos, endpos)             # <<<<<<<<<<<<<<
 * 
 *     def search(self, string, pos=0, endpos=9223372036854775807):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_pattern_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_scanner); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 620, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 620, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 620, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_string);
    __Pyx_GIVEREF(__pyx_v_string);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_string);
    __Pyx_INCREF(__pyx_v_pos);
    __Pyx_GIVEREF(__pyx_v_pos);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_pos);
    __Pyx_INCREF(__pyx_v_endpos);
    __Pyx_GIVEREF(__pyx_v_endpos);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_endpos);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 620, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":619
 *         return self._pattern.match(string, pos, endpos)
 * 
 *     def scanner(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.scanner(string, pos, endpos)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("re2.PythonRePattern.scanner", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":622
 *         return self._pattern.scanner(string, pos, endpos)
 * 
 *     def search(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.search(string, pos, endpos)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_15PythonRePattern_17search(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3re2_15PythonRePattern_17search = {"search", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_15PythonRePattern_17search, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3re2_15PythonRePattern_17search(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_string = 0;
  PyObject *__pyx_v_pos = 0;
  PyObject *__pyx_v_endpos = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("search (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_string,&__pyx_n_s_pos,&__pyx_n_s_endpos,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)((PyObject *)__pyx_int_0));
    values[3] = ((PyObject *)((PyObject *)__pyx_int_9223372036854775807));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("search", 0, 2, 4, 1); __PYX_ERR(1, 622, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_endpos);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "search") < 0)) __PYX_ERR(1, 622, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_string = values[1];
    __pyx_v_pos = values[2];
    __pyx_v_endpos = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("search", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 622, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.PythonRePattern.search", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_15PythonRePattern_16search(__pyx_self, __pyx_v_self, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_15PythonRePattern_16search(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_string, PyObject *__pyx_v_pos, PyObject *__pyx_v_endpos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("search", 0);

  /* "pattern.pxi":623
 * 
 *     def search(self, string, pos=0, endpos=9223372036854775807):
 *         return self._pattern.search(string, pos, endpos)             # <<<<<<<<<<<<<<
 * 
 *     def split(self, string, maxsplit=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_pattern_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_search); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 623, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 623, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_string);
    __Pyx_GIVEREF(__pyx_v_string);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_string);
    __Pyx_INCREF(__pyx_v_pos);
    __Pyx_GIVEREF(__pyx_v_pos);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_pos);
    __Pyx_INCREF(__pyx_v_endpos);
    __Pyx_GIVEREF(__pyx_v_endpos);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_endpos);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":622
 *         return self._pattern.scanner(string, pos, endpos)
 * 
 *     def search(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.search(string, pos, endpos)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("re2.PythonRePattern.search", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":625
 *         return self._pattern.search(string, pos, endpos)
 * 
 *     def split(self, string, maxsplit=0):             # <<<<<<<<<<<<<<
 *         return self._pattern.split(string, maxsplit)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_15PythonRePattern_19split(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3re2_15PythonRePattern_19split = {"split", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_15PythonRePattern_19split, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3re2_15PythonRePattern_19split(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_string = 0;
  PyObject *__pyx_v_maxsplit = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("split (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_string,&__pyx_n_s_maxsplit,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)((PyObject *)__pyx_int_0));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("split", 0, 2, 3, 1); __PYX_ERR(1, 625, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxsplit);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "split") < 0)) __PYX_ERR(1, 625, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_string = values[1];
    __pyx_v_maxsplit = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("split", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 625, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.PythonRePattern.split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_15PythonRePattern_18split(__pyx_self, __pyx_v_self, __pyx_v_string, __pyx_v_maxsplit);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_15PythonRePattern_18split(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_string, PyObject *__pyx_v_maxsplit) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("split", 0);

  /* "pattern.pxi":626
 * 
 *     def split(self, string, maxsplit=0):
 *         return self._pattern.split(string, maxsplit)             # <<<<<<<<<<<<<<
 * 
 *     def sub(self, repl, string, count=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_pattern_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_string, __pyx_v_maxsplit};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 626, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_string, __pyx_v_maxsplit};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 626, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 626, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_string);
    __Pyx_GIVEREF(__pyx_v_string);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_string);
    __Pyx_INCREF(__pyx_v_maxsplit);
    __Pyx_GIVEREF(__pyx_v_maxsplit);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_maxsplit);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 626, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":625
 *         return self._pattern.search(string, pos, endpos)
 * 
 *     def split(self, string, maxsplit=0):             # <<<<<<<<<<<<<<
 *         return self._pattern.split(string, maxsplit)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("re2.PythonRePattern.split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":628
 *         return self._pattern.split(string, maxsplit)
 * 
 *     def sub(self, repl, string, count=0):             # <<<<<<<<<<<<<<
 *         return self._pattern.sub(repl, string, count)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_15PythonRePattern_21sub(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3re2_15PythonRePattern_21sub = {"sub", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_15PythonRePattern_21sub, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3re2_15PythonRePattern_21sub(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_repl = 0;
  PyObject *__pyx_v_string = 0;
  PyObject *__pyx_v_count = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sub (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_repl,&__pyx_n_s_string,&__pyx_n_s_count,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)((PyObject *)__pyx_int_0));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_repl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sub", 0, 3, 4, 1); __PYX_ERR(1, 628, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sub", 0, 3, 4, 2); __PYX_ERR(1, 628, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_count);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sub") < 0)) __PYX_ERR(1, 628, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_repl = values[1];
    __pyx_v_string = values[2];
    __pyx_v_count = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sub", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 628, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.PythonRePattern.sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_15PythonRePattern_20sub(__pyx_self, __pyx_v_self, __pyx_v_repl, __pyx_v_string, __pyx_v_count);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_15PythonRePattern_20sub(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, PyObject *__pyx_v_count) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sub", 0);

  /* "pattern.pxi":629
 * 
 *     def sub(self, repl, string, count=0):
 *         return self._pattern.sub(repl, string, count)             # <<<<<<<<<<<<<<
 * 
 *     def subn(self, repl, string, count=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_pattern_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sub); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_repl, __pyx_v_string, __pyx_v_count};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 629, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_repl, __pyx_v_string, __pyx_v_count};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 629, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_repl);
    __Pyx_GIVEREF(__pyx_v_repl);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_repl);
    __Pyx_INCREF(__pyx_v_string);
    __Pyx_GIVEREF(__pyx_v_string);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_string);
    __Pyx_INCREF(__pyx_v_count);
    __Pyx_GIVEREF(__pyx_v_count);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_count);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":628
 *         return self._pattern.split(string, maxsplit)
 * 
 *     def sub(self, repl, string, count=0):             # <<<<<<<<<<<<<<
 *         return self._pattern.sub(repl, string, count)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("re2.PythonRePattern.sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":631
 *         return self._pattern.sub(repl, string, count)
 * 
 *     def subn(self, repl, string, count=0):             # <<<<<<<<<<<<<<
 *         return self._pattern.subn(repl, string, count)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_15PythonRePattern_23subn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3re2_15PythonRePattern_23subn = {"subn", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_15PythonRePattern_23subn, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3re2_15PythonRePattern_23subn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_repl = 0;
  PyObject *__pyx_v_string = 0;
  PyObject *__pyx_v_count = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("subn (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_repl,&__pyx_n_s_string,&__pyx_n_s_count,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)((PyObject *)__pyx_int_0));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_repl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("subn", 0, 3, 4, 1); __PYX_ERR(1, 631, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("subn", 0, 3, 4, 2); __PYX_ERR(1, 631, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_count);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "subn") < 0)) __PYX_ERR(1, 631, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_repl = values[1];
    __pyx_v_string = values[2];
    __pyx_v_count = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("subn", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 631, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.PythonRePattern.subn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_15PythonRePattern_22subn(__pyx_self, __pyx_v_self, __pyx_v_repl, __pyx_v_string, __pyx_v_count);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_15PythonRePattern_22subn(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, PyObject *__pyx_v_count) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("subn", 0);

  /* "pattern.pxi":632
 * 
 *     def subn(self, repl, string, count=0):
 *         return self._pattern.subn(repl, string, count)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_pattern_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_subn); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_repl, __pyx_v_string, __pyx_v_count};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 632, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_repl, __pyx_v_string, __pyx_v_count};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 632, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 632, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_repl);
    __Pyx_GIVEREF(__pyx_v_repl);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_repl);
    __Pyx_INCREF(__pyx_v_string);
    __Pyx_GIVEREF(__pyx_v_string);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_string);
    __Pyx_INCREF(__pyx_v_count);
    __Pyx_GIVEREF(__pyx_v_count);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_count);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 632, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":631
 *         return self._pattern.sub(repl, string, count)
 * 
 *     def subn(self, repl, string, count=0):             # <<<<<<<<<<<<<<
 *         return self._pattern.subn(repl, string, count)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("re2.PythonRePattern.subn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":634
 *         return self._pattern.subn(repl, string, count)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return repr(self._pattern)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_15PythonRePattern_25__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_3re2_15PythonRePattern_25__repr__ = {"__repr__", (PyCFunction)__pyx_pw_3re2_15PythonRePattern_25__repr__, METH_O, 0};
static PyObject *__pyx_pw_3re2_15PythonRePattern_25__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_15PythonRePattern_24__repr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_15PythonRePattern_24__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pattern.pxi":635
 * 
 *     def __repr__(self):
 *         return repr(self._pattern)             # <<<<<<<<<<<<<<
 * 
 *     def __reduce__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_pattern_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Repr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":634
 *         return self._pattern.subn(repl, string, count)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return repr(self._pattern)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("re2.PythonRePattern.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pattern.pxi":637
 *         return repr(self._pattern)
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return (self, (self.pattern, self.flags))
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_15PythonRePattern_27__reduce__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_3re2_15PythonRePattern_27__reduce__ = {"__reduce__", (PyCFunction)__pyx_pw_3re2_15PythonRePattern_27__reduce__, METH_O, 0};
static PyObject *__pyx_pw_3re2_15PythonRePattern_27__reduce__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_15PythonRePattern_26__reduce__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_15PythonRePattern_26__reduce__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "pattern.pxi":638
 * 
 *     def __reduce__(self):
 *         return (self, (self.pattern, self.flags))             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_pattern); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pattern.pxi":637
 *         return repr(self._pattern)
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return (self, (self.pattern, self.flags))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.PythonRePattern.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":16
 * 
 *     property lastindex:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return None if self._lastindex < 1 else self._lastindex
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_5Match_9lastindex_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3re2_5Match_9lastindex_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_5Match_9lastindex___get__(((struct __pyx_obj_3re2_Match *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_5Match_9lastindex___get__(struct __pyx_obj_3re2_Match *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "match.pxi":17
 *     property lastindex:
 *         def __get__(self):
 *             return None if self._lastindex < 1 else self._lastindex             # <<<<<<<<<<<<<<
 * 
 *     property lastgroup:
 */
  __Pyx_XDECREF(__pyx_r);
  if (((__pyx_v_self->_lastindex < 1) != 0)) {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  } else {
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_lastindex); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 17, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "match.pxi":16
 * 
 *     property lastindex:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return None if self._lastindex < 1 else self._lastindex
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("re2.Match.lastindex.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":20
 * 
 *     property lastgroup:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._lastindex < 1:
 *                 return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_5Match_9lastgroup_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3re2_5Match_9lastgroup_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_5Match_9lastgroup___get__(((struct __pyx_obj_3re2_Match *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_5Match_9lastgroup___get__(struct __pyx_obj_3re2_Match *__pyx_v_self) {
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "match.pxi":21
 *     property lastgroup:
 *         def __get__(self):
 *             if self._lastindex < 1:             # <<<<<<<<<<<<<<
 *                 return None
 *             for name, n in self.re.groupindex.items():
 */
  __pyx_t_1 = ((__pyx_v_self->_lastindex < 1) != 0);
  if (__pyx_t_1) {

    /* "match.pxi":22
 *         def __get__(self):
 *             if self._lastindex < 1:
 *                 return None             # <<<<<<<<<<<<<<
 *             for name, n in self.re.groupindex.items():
 *                 if n == self._lastindex:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "match.pxi":21
 *     property lastgroup:
 *         def __get__(self):
 *             if self._lastindex < 1:             # <<<<<<<<<<<<<<
 *                 return None
 *             for name, n in self.re.groupindex.items():
 */
  }

  /* "match.pxi":23
 *             if self._lastindex < 1:
 *                 return None
 *             for name, n in self.re.groupindex.items():             # <<<<<<<<<<<<<<
 *                 if n == self._lastindex:
 *                     return name
 */
  __pyx_t_3 = 0;
  if (unlikely(__pyx_v_self->re->groupindex == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(2, 23, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_dict_iterator(__pyx_v_self->re->groupindex, 1, __pyx_n_s_items, (&__pyx_t_4), (&__pyx_t_5)); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_2);
  __pyx_t_2 = __pyx_t_6;
  __pyx_t_6 = 0;
  while (1) {
    __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_4, &__pyx_t_3, &__pyx_t_6, &__pyx_t_7, NULL, __pyx_t_5);
    if (unlikely(__pyx_t_8 == 0)) break;
    if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(2, 23, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "match.pxi":24
 *                 return None
 *             for name, n in self.re.groupindex.items():
 *                 if n == self._lastindex:             # <<<<<<<<<<<<<<
 *                     return name
 *             return None
 */
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->_lastindex); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 24, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyObject_RichCompare(__pyx_v_n, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 24, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 24, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_1) {

      /* "match.pxi":25
 *             for name, n in self.re.groupindex.items():
 *                 if n == self._lastindex:
 *                     return name             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_name);
      __pyx_r = __pyx_v_name;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "match.pxi":24
 *                 return None
 *             for name, n in self.re.groupindex.items():
 *                 if n == self._lastindex:             # <<<<<<<<<<<<<<
 *                     return name
 *             return None
 */
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "match.pxi":26
 *                 if n == self._lastindex:
 *                     return name
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, Pattern pattern_object, int num_groups):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "match.pxi":20
 * 
 *     property lastgroup:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._lastindex < 1:
 *                 return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("re2.Match.lastgroup.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":28
 *             return None
 * 
 *     def __init__(self, Pattern pattern_object, int num_groups):             # <<<<<<<<<<<<<<
 *         self._lastindex = -1
 *         self._groups = None
 */

/* Python wrapper */
static int __pyx_pw_3re2_5Match_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3re2_5Match_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3re2_Pattern *__pyx_v_pattern_object = 0;
  int __pyx_v_num_groups;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern_object,&__pyx_n_s_num_groups,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pattern_object)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_groups)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(2, 28, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(2, 28, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_pattern_object = ((struct __pyx_obj_3re2_Pattern *)values[0]);
    __pyx_v_num_groups = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_num_groups == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 28, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 28, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Match.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pattern_object), __pyx_ptype_3re2_Pattern, 1, "pattern_object", 0))) __PYX_ERR(2, 28, __pyx_L1_error)
  __pyx_r = __pyx_pf_3re2_5Match___init__(((struct __pyx_obj_3re2_Match *)__pyx_v_self), __pyx_v_pattern_object, __pyx_v_num_groups);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3re2_5Match___init__(struct __pyx_obj_3re2_Match *__pyx_v_self, struct __pyx_obj_3re2_Pattern *__pyx_v_pattern_object, int __pyx_v_num_groups) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "match.pxi":29
 * 
 *     def __init__(self, Pattern pattern_object, int num_groups):
 *         self._lastindex = -1             # <<<<<<<<<<<<<<
 *         self._groups = None
 *         self.pos = 0
 */
  __pyx_v_self->_lastindex = -1;

  /* "match.pxi":30
 *     def __init__(self, Pattern pattern_object, int num_groups):
 *         self._lastindex = -1
 *         self._groups = None             # <<<<<<<<<<<<<<
 *         self.pos = 0
 *         self.endpos = -1
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_groups);
  __Pyx_DECREF(__pyx_v_self->_groups);
  __pyx_v_self->_groups = ((PyObject*)Py_None);

  /* "match.pxi":31
 *         self._lastindex = -1
 *         self._groups = None
 *         self.pos = 0             # <<<<<<<<<<<<<<
 *         self.endpos = -1
 *         self.matches = new_StringPiece_array(num_groups + 1)
 */
  __pyx_v_self->pos = 0;

  /* "match.pxi":32
 *         self._groups = None
 *         self.pos = 0
 *         self.endpos = -1             # <<<<<<<<<<<<<<
 *         self.matches = new_StringPiece_array(num_groups + 1)
 *         self.nmatches = num_groups
 */
  __pyx_v_self->endpos = -1;

  /* "match.pxi":33
 *         self.pos = 0
 *         self.endpos = -1
 *         self.matches = new_StringPiece_array(num_groups + 1)             # <<<<<<<<<<<<<<
 *         self.nmatches = num_groups
 *         self.re = pattern_object
 */
  __pyx_v_self->matches = new_StringPiece_array((__pyx_v_num_groups + 1));

  /* "match.pxi":34
 *         self.endpos = -1
 *         self.matches = new_StringPiece_array(num_groups + 1)
 *         self.nmatches = num_groups             # <<<<<<<<<<<<<<
 *         self.re = pattern_object
 * 
 */
  __pyx_v_self->nmatches = __pyx_v_num_groups;

  /* "match.pxi":35
 *         self.matches = new_StringPiece_array(num_groups + 1)
 *         self.nmatches = num_groups
 *         self.re = pattern_object             # <<<<<<<<<<<<<<
 * 
 *     cdef _init_groups(self):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_pattern_object));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_pattern_object));
  __Pyx_GOTREF(__pyx_v_self->re);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->re));
  __pyx_v_self->re = __pyx_v_pattern_object;

  /* "match.pxi":28
 *             return None
 * 
 *     def __init__(self, Pattern pattern_object, int num_groups):             # <<<<<<<<<<<<<<
 *         self._lastindex = -1
 *         self._groups = None
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":37
 *         self.re = pattern_object
 * 
 *     cdef _init_groups(self):             # <<<<<<<<<<<<<<
 *         cdef list groups = []
 *         cdef int i
 */

static PyObject *__pyx_f_3re2_5Match__init_groups(struct __pyx_obj_3re2_Match *__pyx_v_self) {
  PyObject *__pyx_v_groups = 0;
  int __pyx_v_i;
  char const *__pyx_v_last_end;
  char const *__pyx_v_cur_end;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_groups", 0);

  /* "match.pxi":38
 * 
 *     cdef _init_groups(self):
 *         cdef list groups = []             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef const char * last_end = NULL
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_groups = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "match.pxi":40
 *         cdef list groups = []
 *         cdef int i
 *         cdef const char * last_end = NULL             # <<<<<<<<<<<<<<
 *         cdef const char * cur_end = NULL
 * 
 */
  __pyx_v_last_end = NULL;

  /* "match.pxi":41
 *         cdef int i
 *         cdef const char * last_end = NULL
 *         cdef const char * cur_end = NULL             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self.nmatches):
 */
  __pyx_v_cur_end = NULL;

  /* "match.pxi":43
 *         cdef const char * cur_end = NULL
 * 
 *         for i in range(self.nmatches):             # <<<<<<<<<<<<<<
 *             if self.matches[i].data() == NULL:
 *                 groups.append(None)
 */
  __pyx_t_2 = __pyx_v_self->nmatches;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "match.pxi":44
 * 
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:             # <<<<<<<<<<<<<<
 *                 groups.append(None)
 *             else:
 */
    __pyx_t_5 = (((__pyx_v_self->matches[__pyx_v_i]).data() == NULL) != 0);
    if (__pyx_t_5) {

      /* "match.pxi":45
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:
 *                 groups.append(None)             # <<<<<<<<<<<<<<
 *             else:
 *                 if i > 0:
 */
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_groups, Py_None); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 45, __pyx_L1_error)

      /* "match.pxi":44
 * 
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:             # <<<<<<<<<<<<<<
 *                 groups.append(None)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "match.pxi":47
 *                 groups.append(None)
 *             else:
 *                 if i > 0:             # <<<<<<<<<<<<<<
 *                     cur_end = self.matches[i].data() + self.matches[i].length()
 * 
 */
    /*else*/ {
      __pyx_t_5 = ((__pyx_v_i > 0) != 0);
      if (__pyx_t_5) {

        /* "match.pxi":48
 *             else:
 *                 if i > 0:
 *                     cur_end = self.matches[i].data() + self.matches[i].length()             # <<<<<<<<<<<<<<
 * 
 *                     if last_end == NULL:
 */
        __pyx_v_cur_end = ((__pyx_v_self->matches[__pyx_v_i]).data() + (__pyx_v_self->matches[__pyx_v_i]).length());

        /* "match.pxi":50
 *                     cur_end = self.matches[i].data() + self.matches[i].length()
 * 
 *                     if last_end == NULL:             # <<<<<<<<<<<<<<
 *                         last_end = cur_end
 *                         self._lastindex = i
 */
        __pyx_t_5 = ((__pyx_v_last_end == NULL) != 0);
        if (__pyx_t_5) {

          /* "match.pxi":51
 * 
 *                     if last_end == NULL:
 *                         last_end = cur_end             # <<<<<<<<<<<<<<
 *                         self._lastindex = i
 *                     else:
 */
          __pyx_v_last_end = __pyx_v_cur_end;

          /* "match.pxi":52
 *                     if last_end == NULL:
 *                         last_end = cur_end
 *                         self._lastindex = i             # <<<<<<<<<<<<<<
 *                     else:
 *                         # The rules for last group are a bit complicated:
 */
          __pyx_v_self->_lastindex = __pyx_v_i;

          /* "match.pxi":50
 *                     cur_end = self.matches[i].data() + self.matches[i].length()
 * 
 *                     if last_end == NULL:             # <<<<<<<<<<<<<<
 *                         last_end = cur_end
 *                         self._lastindex = i
 */
          goto __pyx_L7;
        }

        /* "match.pxi":58
 *                         # is considered last, so we don't switch our selection
 *                         # unless the end point has moved.
 *                         if cur_end > last_end:             # <<<<<<<<<<<<<<
 *                             last_end = cur_end
 *                             self._lastindex = i
 */
        /*else*/ {
          __pyx_t_5 = ((__pyx_v_cur_end > __pyx_v_last_end) != 0);
          if (__pyx_t_5) {

            /* "match.pxi":59
 *                         # unless the end point has moved.
 *                         if cur_end > last_end:
 *                             last_end = cur_end             # <<<<<<<<<<<<<<
 *                             self._lastindex = i
 *                 groups.append(
 */
            __pyx_v_last_end = __pyx_v_cur_end;

            /* "match.pxi":60
 *                         if cur_end > last_end:
 *                             last_end = cur_end
 *                             self._lastindex = i             # <<<<<<<<<<<<<<
 *                 groups.append(
 *                         self.matches[i].data()[:self.matches[i].length()])
 */
            __pyx_v_self->_lastindex = __pyx_v_i;

            /* "match.pxi":58
 *                         # is considered last, so we don't switch our selection
 *                         # unless the end point has moved.
 *                         if cur_end > last_end:             # <<<<<<<<<<<<<<
 *                             last_end = cur_end
 *                             self._lastindex = i
 */
          }
        }
        __pyx_L7:;

        /* "match.pxi":47
 *                 groups.append(None)
 *             else:
 *                 if i > 0:             # <<<<<<<<<<<<<<
 *                     cur_end = self.matches[i].data() + self.matches[i].length()
 * 
 */
      }

      /* "match.pxi":62
 *                             self._lastindex = i
 *                 groups.append(
 *                         self.matches[i].data()[:self.matches[i].length()])             # <<<<<<<<<<<<<<
 *         self._groups = tuple(groups)
 * 
 */
      __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize((__pyx_v_self->matches[__pyx_v_i]).data() + 0, (__pyx_v_self->matches[__pyx_v_i]).length() - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 62, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);

      /* "match.pxi":61
 *                             last_end = cur_end
 *                             self._lastindex = i
 *                 groups.append(             # <<<<<<<<<<<<<<
 *                         self.matches[i].data()[:self.matches[i].length()])
 *         self._groups = tuple(groups)
 */
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_groups, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 61, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L5:;
  }

  /* "match.pxi":63
 *                 groups.append(
 *                         self.matches[i].data()[:self.matches[i].length()])
 *         self._groups = tuple(groups)             # <<<<<<<<<<<<<<
 * 
 *     cdef bytes _group(self, object groupnum):
 */
  __pyx_t_1 = PyList_AsTuple(__pyx_v_groups); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_groups);
  __Pyx_DECREF(__pyx_v_self->_groups);
  __pyx_v_self->_groups = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "match.pxi":37
 *         self.re = pattern_object
 * 
 *     cdef _init_groups(self):             # <<<<<<<<<<<<<<
 *         cdef list groups = []
 *         cdef int i
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Match._init_groups", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_groups);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":65
 *         self._groups = tuple(groups)
 * 
 *     cdef bytes _group(self, object groupnum):             # <<<<<<<<<<<<<<
 *         cdef int idx
 *         if isinstance(groupnum, int):
 */

static PyObject *__pyx_f_3re2_5Match__group(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_groupnum) {
  int __pyx_v_idx;
  PyObject *__pyx_v_groupdict = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_group", 0);

  /* "match.pxi":67
 *     cdef bytes _group(self, object groupnum):
 *         cdef int idx
 *         if isinstance(groupnum, int):             # <<<<<<<<<<<<<<
 *             idx = groupnum
 *             if idx > self.nmatches - 1:
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_groupnum); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "match.pxi":68
 *         cdef int idx
 *         if isinstance(groupnum, int):
 *             idx = groupnum             # <<<<<<<<<<<<<<
 *             if idx > self.nmatches - 1:
 *                 raise IndexError("no such group %d; available groups: %r"
 */
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_groupnum); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 68, __pyx_L1_error)
    __pyx_v_idx = __pyx_t_3;

    /* "match.pxi":69
 *         if isinstance(groupnum, int):
 *             idx = groupnum
 *             if idx > self.nmatches - 1:             # <<<<<<<<<<<<<<
 *                 raise IndexError("no such group %d; available groups: %r"
 *                         % (idx, list(range(self.nmatches))))
 */
    __pyx_t_2 = ((__pyx_v_idx > (__pyx_v_self->nmatches - 1)) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "match.pxi":70
 *             idx = groupnum
 *             if idx > self.nmatches - 1:
 *                 raise IndexError("no such group %d; available groups: %r"             # <<<<<<<<<<<<<<
 *                         % (idx, list(range(self.nmatches))))
 *             return self._groups[idx]
 */
      __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 70, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = 0;
      __pyx_t_6 = 127;
      __Pyx_INCREF(__pyx_kp_u_no_such_group);
      __pyx_t_5 += 14;
      __Pyx_GIVEREF(__pyx_kp_u_no_such_group);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_no_such_group);

      /* "match.pxi":71
 *             if idx > self.nmatches - 1:
 *                 raise IndexError("no such group %d; available groups: %r"
 *                         % (idx, list(range(self.nmatches))))             # <<<<<<<<<<<<<<
 *             return self._groups[idx]
 *         groupdict = self._groupdict()
 */
      __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_idx, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_INCREF(__pyx_kp_u_available_groups);
      __pyx_t_5 += 20;
      __Pyx_GIVEREF(__pyx_kp_u_available_groups);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_available_groups);
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->nmatches); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PySequence_List(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_7), __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_6;
      __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "match.pxi":70
 *             idx = groupnum
 *             if idx > self.nmatches - 1:
 *                 raise IndexError("no such group %d; available groups: %r"             # <<<<<<<<<<<<<<
 *                         % (idx, list(range(self.nmatches))))
 *             return self._groups[idx]
 */
      __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_4, 4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 70, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 70, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(2, 70, __pyx_L1_error)

      /* "match.pxi":69
 *         if isinstance(groupnum, int):
 *             idx = groupnum
 *             if idx > self.nmatches - 1:             # <<<<<<<<<<<<<<
 *                 raise IndexError("no such group %d; available groups: %r"
 *                         % (idx, list(range(self.nmatches))))
 */
    }

    /* "match.pxi":72
 *                 raise IndexError("no such group %d; available groups: %r"
 *                         % (idx, list(range(self.nmatches))))
 *             return self._groups[idx]             # <<<<<<<<<<<<<<
 *         groupdict = self._groupdict()
 *         if groupnum not in groupdict:
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(__pyx_v_self->_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 72, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_self->_groups, __pyx_v_idx, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(2, 72, __pyx_L1_error)
    __pyx_r = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "match.pxi":67
 *     cdef bytes _group(self, object groupnum):
 *         cdef int idx
 *         if isinstance(groupnum, int):             # <<<<<<<<<<<<<<
 *             idx = groupnum
 *             if idx > self.nmatches - 1:
 */
  }

  /* "match.pxi":73
 *                         % (idx, list(range(self.nmatches))))
 *             return self._groups[idx]
 *         groupdict = self._groupdict()             # <<<<<<<<<<<<<<
 *         if groupnum not in groupdict:
 *             raise IndexError("no such group %r; available groups: %r"
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_self->__pyx_vtab)->_groupdict(__pyx_v_self); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_groupdict = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "match.pxi":74
 *             return self._groups[idx]
 *         groupdict = self._groupdict()
 *         if groupnum not in groupdict:             # <<<<<<<<<<<<<<
 *             raise IndexError("no such group %r; available groups: %r"
 *                     % (groupnum, list(groupdict)))
 */
  if (unlikely(__pyx_v_groupdict == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(2, 74, __pyx_L1_error)
  }
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_v_groupnum, __pyx_v_groupdict, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 74, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_1)) {

    /* "match.pxi":75
 *         groupdict = self._groupdict()
 *         if groupnum not in groupdict:
 *             raise IndexError("no such group %r; available groups: %r"             # <<<<<<<<<<<<<<
 *                     % (groupnum, list(groupdict)))
 *         return groupdict[groupnum]
 */
    __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = 0;
    __pyx_t_6 = 127;
    __Pyx_INCREF(__pyx_kp_u_no_such_group);
    __pyx_t_5 += 14;
    __Pyx_GIVEREF(__pyx_kp_u_no_such_group);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_no_such_group);

    /* "match.pxi":76
 *         if groupnum not in groupdict:
 *             raise IndexError("no such group %r; available groups: %r"
 *                     % (groupnum, list(groupdict)))             # <<<<<<<<<<<<<<
 *         return groupdict[groupnum]
 * 
 */
    __pyx_t_8 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_groupnum), __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_6;
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_kp_u_available_groups);
    __pyx_t_5 += 20;
    __Pyx_GIVEREF(__pyx_kp_u_available_groups);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_available_groups);
    __pyx_t_8 = PySequence_List(__pyx_v_groupdict); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_8), __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "match.pxi":75
 *         groupdict = self._groupdict()
 *         if groupnum not in groupdict:
 *             raise IndexError("no such group %r; available groups: %r"             # <<<<<<<<<<<<<<
 *                     % (groupnum, list(groupdict)))
 *         return groupdict[groupnum]
 */
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_4, 4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(2, 75, __pyx_L1_error)

    /* "match.pxi":74
 *             return self._groups[idx]
 *         groupdict = self._groupdict()
 *         if groupnum not in groupdict:             # <<<<<<<<<<<<<<
 *             raise IndexError("no such group %r; available groups: %r"
 *                     % (groupnum, list(groupdict)))
 */
  }

  /* "match.pxi":77
 *             raise IndexError("no such group %r; available groups: %r"
 *                     % (groupnum, list(groupdict)))
 *         return groupdict[groupnum]             # <<<<<<<<<<<<<<
 * 
 *     cdef dict _groupdict(self):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_groupdict == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 77, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_groupdict, __pyx_v_groupnum); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(2, 77, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "match.pxi":65
 *         self._groups = tuple(groups)
 * 
 *     cdef bytes _group(self, object groupnum):             # <<<<<<<<<<<<<<
 *         cdef int idx
 *         if isinstance(groupnum, int):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("re2.Match._group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_groupdict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":79
 *         return groupdict[groupnum]
 * 
 *     cdef dict _groupdict(self):             # <<<<<<<<<<<<<<
 *         if self._named_groups is None:
 *             self._named_groups = {name: self._groups[n]
 */

static PyObject *__pyx_f_3re2_5Match__groupdict(struct __pyx_obj_3re2_Match *__pyx_v_self) {
  PyObject *__pyx_8genexpr2__pyx_v_name = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_n = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_groupdict", 0);

  /* "match.pxi":80
 * 
 *     cdef dict _groupdict(self):
 *         if self._named_groups is None:             # <<<<<<<<<<<<<<
 *             self._named_groups = {name: self._groups[n]
 *                     for name, n in self.re.groupindex.items()}
 */
  __pyx_t_1 = (__pyx_v_self->_named_groups == ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "match.pxi":81
 *     cdef dict _groupdict(self):
 *         if self._named_groups is None:
 *             self._named_groups = {name: self._groups[n]             # <<<<<<<<<<<<<<
 *                     for name, n in self.re.groupindex.items()}
 *         return self._named_groups
 */
    { /* enter inner scope */
      __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 81, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "match.pxi":82
 *         if self._named_groups is None:
 *             self._named_groups = {name: self._groups[n]
 *                     for name, n in self.re.groupindex.items()}             # <<<<<<<<<<<<<<
 *         return self._named_groups
 * 
 */
      __pyx_t_5 = 0;
      if (unlikely(__pyx_v_self->re->groupindex == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
        __PYX_ERR(2, 82, __pyx_L6_error)
      }
      __pyx_t_8 = __Pyx_dict_iterator(__pyx_v_self->re->groupindex, 1, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 82, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_4);
      __pyx_t_4 = __pyx_t_8;
      __pyx_t_8 = 0;
      while (1) {
        __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_4, __pyx_t_6, &__pyx_t_5, &__pyx_t_8, &__pyx_t_9, NULL, __pyx_t_7);
        if (unlikely(__pyx_t_10 == 0)) break;
        if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(2, 82, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_name, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_n, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "match.pxi":81
 *     cdef dict _groupdict(self):
 *         if self._named_groups is None:
 *             self._named_groups = {name: self._groups[n]             # <<<<<<<<<<<<<<
 *                     for name, n in self.re.groupindex.items()}
 *         return self._named_groups
 */
        if (unlikely(__pyx_v_self->_groups == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(2, 81, __pyx_L6_error)
        }
        __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_v_self->_groups, __pyx_8genexpr2__pyx_v_n); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 81, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (unlikely(PyDict_SetItem(__pyx_t_3, (PyObject*)__pyx_8genexpr2__pyx_v_name, (PyObject*)__pyx_t_9))) __PYX_ERR(2, 81, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_n); __pyx_8genexpr2__pyx_v_n = 0;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_name); __pyx_8genexpr2__pyx_v_name = 0;
      goto __pyx_L9_exit_scope;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_n); __pyx_8genexpr2__pyx_v_n = 0;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_name); __pyx_8genexpr2__pyx_v_name = 0;
      goto __pyx_L1_error;
      __pyx_L9_exit_scope:;
    } /* exit inner scope */
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->_named_groups);
    __Pyx_DECREF(__pyx_v_self->_named_groups);
    __pyx_v_self->_named_groups = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "match.pxi":80
 * 
 *     cdef dict _groupdict(self):
 *         if self._named_groups is None:             # <<<<<<<<<<<<<<
 *             self._named_groups = {name: self._groups[n]
 *                     for name, n in self.re.groupindex.items()}
 */
  }

  /* "match.pxi":83
 *             self._named_groups = {name: self._groups[n]
 *                     for name, n in self.re.groupindex.items()}
 *         return self._named_groups             # <<<<<<<<<<<<<<
 * 
 *     def groups(self, default=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_named_groups);
  __pyx_r = __pyx_v_self->_named_groups;
  goto __pyx_L0;

  /* "match.pxi":79
 *         return groupdict[groupnum]
 * 
 *     cdef dict _groupdict(self):             # <<<<<<<<<<<<<<
 *         if self._named_groups is None:
 *             self._named_groups = {name: self._groups[n]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("re2.Match._groupdict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_name);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":85
 *         return self._named_groups
 * 
 *     def groups(self, default=None):             # <<<<<<<<<<<<<<
 *         if self.encoded:
 *             return tuple([default if g is None else g.decode('utf8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_5Match_3groups(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3re2_5Match_3groups(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_default = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("groups (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_default,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_default);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "groups") < 0)) __PYX_ERR(2, 85, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_default = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("groups", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 85, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Match.groups", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_5Match_2groups(((struct __pyx_obj_3re2_Match *)__pyx_v_self), __pyx_v_default);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_5Match_2groups(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_default) {
  PyObject *__pyx_8genexpr3__pyx_v_g = NULL;
  PyObject *__pyx_8genexpr4__pyx_v_g = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("groups", 0);

  /* "match.pxi":86
 * 
 *     def groups(self, default=None):
 *         if self.encoded:             # <<<<<<<<<<<<<<
 *             return tuple([default if g is None else g.decode('utf8')
 *                     for g in self._groups[1:]])
 */
  __pyx_t_1 = (__pyx_v_self->encoded != 0);
  if (__pyx_t_1) {

    /* "match.pxi":87
 *     def groups(self, default=None):
 *         if self.encoded:
 *             return tuple([default if g is None else g.decode('utf8')             # <<<<<<<<<<<<<<
 *                     for g in self._groups[1:]])
 *         return tuple([default if g is None else g
 */
    __Pyx_XDECREF(__pyx_r);
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 87, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_2);

      /* "match.pxi":88
 *         if self.encoded:
 *             return tuple([default if g is None else g.decode('utf8')
 *                     for g in self._groups[1:]])             # <<<<<<<<<<<<<<
 *         return tuple([default if g is None else g
 *                 for g in self._groups[1:]])
 */
      if (unlikely(__pyx_v_self->_groups == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(2, 88, __pyx_L6_error)
      }
      __pyx_t_3 = __Pyx_PyTuple_GetSlice(__pyx_v_self->_groups, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 88, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(2, 88, __pyx_L6_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 88, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
        __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_g, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "match.pxi":87
 *     def groups(self, default=None):
 *         if self.encoded:
 *             return tuple([default if g is None else g.decode('utf8')             # <<<<<<<<<<<<<<
 *                     for g in self._groups[1:]])
 *         return tuple([default if g is None else g
 */
        __pyx_t_1 = (__pyx_8genexpr3__pyx_v_g == Py_None);
        if ((__pyx_t_1 != 0)) {
          __Pyx_INCREF(__pyx_v_default);
          __pyx_t_3 = __pyx_v_default;
        } else {
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr3__pyx_v_g, __pyx_n_s_decode); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 87, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_8 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_n_u_utf8) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_n_u_utf8);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 87, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_3 = __pyx_t_6;
          __pyx_t_6 = 0;
        }
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(2, 87, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "match.pxi":88
 *         if self.encoded:
 *             return tuple([default if g is None else g.decode('utf8')
 *                     for g in self._groups[1:]])             # <<<<<<<<<<<<<<
 *         return tuple([default if g is None else g
 *                 for g in self._groups[1:]])
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_g); __pyx_8genexpr3__pyx_v_g = 0;
      goto __pyx_L9_exit_scope;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_g); __pyx_8genexpr3__pyx_v_g = 0;
      goto __pyx_L1_error;
      __pyx_L9_exit_scope:;
    } /* exit inner scope */

    /* "match.pxi":87
 *     def groups(self, default=None):
 *         if self.encoded:
 *             return tuple([default if g is None else g.decode('utf8')             # <<<<<<<<<<<<<<
 *                     for g in self._groups[1:]])
 *         return tuple([default if g is None else g
 */
    __pyx_t_4 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "match.pxi":86
 * 
 *     def groups(self, default=None):
 *         if self.encoded:             # <<<<<<<<<<<<<<
 *             return tuple([default if g is None else g.decode('utf8')
 *                     for g in self._groups[1:]])
 */
  }

  /* "match.pxi":89
 *             return tuple([default if g is None else g.decode('utf8')
 *                     for g in self._groups[1:]])
 *         return tuple([default if g is None else g             # <<<<<<<<<<<<<<
 *                 for g in self._groups[1:]])
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 89, __pyx_L12_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "match.pxi":90
 *                     for g in self._groups[1:]])
 *         return tuple([default if g is None else g
 *                 for g in self._groups[1:]])             # <<<<<<<<<<<<<<
 * 
 *     def group(self, *args):
 */
    if (unlikely(__pyx_v_self->_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 90, __pyx_L12_error)
    }
    __pyx_t_2 = __Pyx_PyTuple_GetSlice(__pyx_v_self->_groups, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 90, __pyx_L12_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(2, 90, __pyx_L12_error)
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 90, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_g, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "match.pxi":89
 *             return tuple([default if g is None else g.decode('utf8')
 *                     for g in self._groups[1:]])
 *         return tuple([default if g is None else g             # <<<<<<<<<<<<<<
 *                 for g in self._groups[1:]])
 * 
 */
      __pyx_t_1 = (__pyx_8genexpr4__pyx_v_g == Py_None);
      if ((__pyx_t_1 != 0)) {
        __Pyx_INCREF(__pyx_v_default);
        __pyx_t_2 = __pyx_v_default;
      } else {
        __Pyx_INCREF(__pyx_8genexpr4__pyx_v_g);
        __pyx_t_2 = __pyx_8genexpr4__pyx_v_g;
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_2))) __PYX_ERR(2, 89, __pyx_L12_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "match.pxi":90
 *                     for g in self._groups[1:]])
 *         return tuple([default if g is None else g
 *                 for g in self._groups[1:]])             # <<<<<<<<<<<<<<
 * 
 *     def group(self, *args):
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_g); __pyx_8genexpr4__pyx_v_g = 0;
    goto __pyx_L15_exit_scope;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_g); __pyx_8genexpr4__pyx_v_g = 0;
    goto __pyx_L1_error;
    __pyx_L15_exit_scope:;
  } /* exit inner scope */

  /* "match.pxi":89
 *             return tuple([default if g is None else g.decode('utf8')
 *                     for g in self._groups[1:]])
 *         return tuple([default if g is None else g             # <<<<<<<<<<<<<<
 *                 for g in self._groups[1:]])
 * 
 */
  __pyx_t_3 = PyList_AsTuple(((PyObject*)__pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "match.pxi":85
 *         return self._named_groups
 * 
 *     def groups(self, default=None):             # <<<<<<<<<<<<<<
 *         if self.encoded:
 *             return tuple([default if g is None else g.decode('utf8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("re2.Match.groups", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_g);
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":92
 *                 for g in self._groups[1:]])
 * 
 *     def group(self, *args):             # <<<<<<<<<<<<<<
 *         if len(args) == 0:
 *             groupnum = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_5Match_5group(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3re2_5Match_5group(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("group (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "group", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_3re2_5Match_4group(((struct __pyx_obj_3re2_Match *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_5Match_4group(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_groupnum = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_8genexpr5__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("group", 0);

  /* "match.pxi":93
 * 
 *     def group(self, *args):
 *         if len(args) == 0:             # <<<<<<<<<<<<<<
 *             groupnum = 0
 *         elif len(args) == 1:
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(2, 93, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 == 0) != 0);
  if (__pyx_t_2) {

    /* "match.pxi":94
 *     def group(self, *args):
 *         if len(args) == 0:
 *             groupnum = 0             # <<<<<<<<<<<<<<
 *         elif len(args) == 1:
 *             groupnum = args[0]
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_v_groupnum = __pyx_int_0;

    /* "match.pxi":93
 * 
 *     def group(self, *args):
 *         if len(args) == 0:             # <<<<<<<<<<<<<<
 *             groupnum = 0
 *         elif len(args) == 1:
 */
    goto __pyx_L3;
  }

  /* "match.pxi":95
 *         if len(args) == 0:
 *             groupnum = 0
 *         elif len(args) == 1:             # <<<<<<<<<<<<<<
 *             groupnum = args[0]
 *         else:  # len(args) > 1:
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(2, 95, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "match.pxi":96
 *             groupnum = 0
 *         elif len(args) == 1:
 *             groupnum = args[0]             # <<<<<<<<<<<<<<
 *         else:  # len(args) > 1:
 *             return tuple([self.group(i) for i in args])
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_groupnum = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "match.pxi":95
 *         if len(args) == 0:
 *             groupnum = 0
 *         elif len(args) == 1:             # <<<<<<<<<<<<<<
 *             groupnum = args[0]
 *         else:  # len(args) > 1:
 */
    goto __pyx_L3;
  }

  /* "match.pxi":98
 *             groupnum = args[0]
 *         else:  # len(args) > 1:
 *             return tuple([self.group(i) for i in args])             # <<<<<<<<<<<<<<
 *         if self.encoded:
 *             result = self._group(groupnum)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    { /* enter inner scope */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 98, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __pyx_v_args; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;
      for (;;) {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(2, 98, __pyx_L6_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 98, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
        __Pyx_XDECREF_SET(__pyx_8genexpr5__pyx_v_i, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_group); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 98, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_8genexpr5__pyx_v_i) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_8genexpr5__pyx_v_i);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 98, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 98, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_i); __pyx_8genexpr5__pyx_v_i = 0;
      goto __pyx_L9_exit_scope;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_i); __pyx_8genexpr5__pyx_v_i = 0;
      goto __pyx_L1_error;
      __pyx_L9_exit_scope:;
    } /* exit inner scope */
    __pyx_t_4 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "match.pxi":99
 *         else:  # len(args) > 1:
 *             return tuple([self.group(i) for i in args])
 *         if self.encoded:             # <<<<<<<<<<<<<<
 *             result = self._group(groupnum)
 *             return None if result is None else result.decode('utf8')
 */
  __pyx_t_2 = (__pyx_v_self->encoded != 0);
  if (__pyx_t_2) {

    /* "match.pxi":100
 *             return tuple([self.group(i) for i in args])
 *         if self.encoded:
 *             result = self._group(groupnum)             # <<<<<<<<<<<<<<
 *             return None if result is None else result.decode('utf8')
 *         return self._group(groupnum)
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_self->__pyx_vtab)->_group(__pyx_v_self, __pyx_v_groupnum); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_result = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "match.pxi":101
 *         if self.encoded:
 *             result = self._group(groupnum)
 *             return None if result is None else result.decode('utf8')             # <<<<<<<<<<<<<<
 *         return self._group(groupnum)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = (__pyx_v_result == ((PyObject*)Py_None));
    if ((__pyx_t_2 != 0)) {
      __Pyx_INCREF(Py_None);
      __pyx_t_4 = Py_None;
    } else {
      if (unlikely(__pyx_v_result == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
        __PYX_ERR(2, 101, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_decode_bytes(__pyx_v_result, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __pyx_t_3;
      __pyx_t_3 = 0;
    }
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "match.pxi":99
 *         else:  # len(args) > 1:
 *             return tuple([self.group(i) for i in args])
 *         if self.encoded:             # <<<<<<<<<<<<<<
 *             result = self._group(groupnum)
 *             return None if result is None else result.decode('utf8')
 */
  }

  /* "match.pxi":102
 *             result = self._group(groupnum)
 *             return None if result is None else result.decode('utf8')
 *         return self._group(groupnum)             # <<<<<<<<<<<<<<
 * 
 *     def groupdict(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_self->__pyx_vtab)->_group(__pyx_v_self, __pyx_v_groupnum); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "match.pxi":92
 *                 for g in self._groups[1:]])
 * 
 *     def group(self, *args):             # <<<<<<<<<<<<<<
 *         if len(args) == 0:
 *             groupnum = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("re2.Match.group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_groupnum);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":104
 *         return self._group(groupnum)
 * 
 *     def groupdict(self):             # <<<<<<<<<<<<<<
 *         result = self._groupdict()
 *         if self.encoded:
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_5Match_7groupdict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3re2_5Match_7groupdict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("groupdict (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_5Match_6groupdict(((struct __pyx_obj_3re2_Match *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_5Match_6groupdict(struct __pyx_obj_3re2_Match *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_8genexpr6__pyx_v_a = NULL;
  PyObject *__pyx_8genexpr6__pyx_v_b = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("groupdict", 0);

  /* "match.pxi":105
 * 
 *     def groupdict(self):
 *         result = self._groupdict()             # <<<<<<<<<<<<<<
 *         if self.encoded:
 *             return {a: None if b is None else b.decode('utf8')
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_self->__pyx_vtab)->_groupdict(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "match.pxi":106
 *     def groupdict(self):
 *         result = self._groupdict()
 *         if self.encoded:             # <<<<<<<<<<<<<<
 *             return {a: None if b is None else b.decode('utf8')
 *                     for a, b in result.items()}
 */
  __pyx_t_2 = (__pyx_v_self->encoded != 0);
  if (__pyx_t_2) {

    /* "match.pxi":107
 *         result = self._groupdict()
 *         if self.encoded:
 *             return {a: None if b is None else b.decode('utf8')             # <<<<<<<<<<<<<<
 *                     for a, b in result.items()}
 *         return result
 */
    __Pyx_XDECREF(__pyx_r);
    { /* enter inner scope */
      __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 107, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);

      /* "match.pxi":108
 *         if self.encoded:
 *             return {a: None if b is None else b.decode('utf8')
 *                     for a, b in result.items()}             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
      __pyx_t_4 = 0;
      if (unlikely(__pyx_v_result == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
        __PYX_ERR(2, 108, __pyx_L6_error)
      }
      __pyx_t_7 = __Pyx_dict_iterator(__pyx_v_result, 1, __pyx_n_s_items, (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 108, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_3);
      __pyx_t_3 = __pyx_t_7;
      __pyx_t_7 = 0;
      while (1) {
        __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_5, &__pyx_t_4, &__pyx_t_7, &__pyx_t_8, NULL, __pyx_t_6);
        if (unlikely(__pyx_t_9 == 0)) break;
        if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(2, 108, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_XDECREF_SET(__pyx_8genexpr6__pyx_v_a, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_XDECREF_SET(__pyx_8genexpr6__pyx_v_b, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "match.pxi":107
 *         result = self._groupdict()
 *         if self.encoded:
 *             return {a: None if b is None else b.decode('utf8')             # <<<<<<<<<<<<<<
 *                     for a, b in result.items()}
 *         return result
 */
        __pyx_t_2 = (__pyx_8genexpr6__pyx_v_b == Py_None);
        if ((__pyx_t_2 != 0)) {
          __Pyx_INCREF(Py_None);
          __pyx_t_8 = Py_None;
        } else {
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr6__pyx_v_b, __pyx_n_s_decode); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 107, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
            }
          }
          __pyx_t_7 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_n_u_utf8) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_n_u_utf8);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 107, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_8 = __pyx_t_7;
          __pyx_t_7 = 0;
        }
        if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_8genexpr6__pyx_v_a, (PyObject*)__pyx_t_8))) __PYX_ERR(2, 107, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_a); __pyx_8genexpr6__pyx_v_a = 0;
      __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_b); __pyx_8genexpr6__pyx_v_b = 0;
      goto __pyx_L9_exit_scope;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_a); __pyx_8genexpr6__pyx_v_a = 0;
      __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_b); __pyx_8genexpr6__pyx_v_b = 0;
      goto __pyx_L1_error;
      __pyx_L9_exit_scope:;
    } /* exit inner scope */
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "match.pxi":106
 *     def groupdict(self):
 *         result = self._groupdict()
 *         if self.encoded:             # <<<<<<<<<<<<<<
 *             return {a: None if b is None else b.decode('utf8')
 *                     for a, b in result.items()}
 */
  }

  /* "match.pxi":109
 *             return {a: None if b is None else b.decode('utf8')
 *                     for a, b in result.items()}
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def expand(self, object template):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "match.pxi":104
 *         return self._group(groupnum)
 * 
 *     def groupdict(self):             # <<<<<<<<<<<<<<
 *         result = self._groupdict()
 *         if self.encoded:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("re2.Match.groupdict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_a);
  __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":111
 *         return result
 * 
 *     def expand(self, object template):             # <<<<<<<<<<<<<<
 *         """Expand a template with groups."""
 *         cdef bytearray result = bytearray()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_5Match_9expand(PyObject *__pyx_v_self, PyObject *__pyx_v_template); /*proto*/
static char __pyx_doc_3re2_5Match_8expand[] = "Expand a template with groups.";
static PyObject *__pyx_pw_3re2_5Match_9expand(PyObject *__pyx_v_self, PyObject *__pyx_v_template) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("expand (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_5Match_8expand(((struct __pyx_obj_3re2_Match *)__pyx_v_self), ((PyObject *)__pyx_v_template));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_5Match_8expand(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_template) {
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_v_templ = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("expand", 0);

  /* "match.pxi":113
 *     def expand(self, object template):
 *         """Expand a template with groups."""
 *         cdef bytearray result = bytearray()             # <<<<<<<<<<<<<<
 *         if isinstance(template, unicode):
 *             if not PY2 and not self.encoded:
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)(&PyByteArray_Type))); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "match.pxi":114
 *         """Expand a template with groups."""
 *         cdef bytearray result = bytearray()
 *         if isinstance(template, unicode):             # <<<<<<<<<<<<<<
 *             if not PY2 and not self.encoded:
 *                 raise ValueError(
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_template); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "match.pxi":115
 *         cdef bytearray result = bytearray()
 *         if isinstance(template, unicode):
 *             if not PY2 and not self.encoded:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                         'cannot expand unicode template on bytes pattern')
 */
    __pyx_t_2 = ((!(PY2 != 0)) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_self->encoded != 0)) != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;
    if (unlikely(__pyx_t_3)) {

      /* "match.pxi":116
 *         if isinstance(template, unicode):
 *             if not PY2 and not self.encoded:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                         'cannot expand unicode template on bytes pattern')
 *             templ = template.encode('utf8')
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(2, 116, __pyx_L1_error)

      /* "match.pxi":115
 *         cdef bytearray result = bytearray()
 *         if isinstance(template, unicode):
 *             if not PY2 and not self.encoded:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                         'cannot expand unicode template on bytes pattern')
 */
    }

    /* "match.pxi":118
 *                 raise ValueError(
 *                         'cannot expand unicode template on bytes pattern')
 *             templ = template.encode('utf8')             # <<<<<<<<<<<<<<
 *         else:
 *             if not PY2 and self.encoded:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_template, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_n_u_utf8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_u_utf8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_templ = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "match.pxi":114
 *         """Expand a template with groups."""
 *         cdef bytearray result = bytearray()
 *         if isinstance(template, unicode):             # <<<<<<<<<<<<<<
 *             if not PY2 and not self.encoded:
 *                 raise ValueError(
 */
    goto __pyx_L3;
  }

  /* "match.pxi":120
 *             templ = template.encode('utf8')
 *         else:
 *             if not PY2 and self.encoded:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                         'cannot expand bytes template on unicode pattern')
 */
  /*else*/ {
    __pyx_t_2 = ((!(PY2 != 0)) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_2 = (__pyx_v_self->encoded != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L8_bool_binop_done:;
    if (unlikely(__pyx_t_3)) {

      /* "match.pxi":121
 *         else:
 *             if not PY2 and self.encoded:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                         'cannot expand bytes template on unicode pattern')
 *             templ = bytes(template)
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(2, 121, __pyx_L1_error)

      /* "match.pxi":120
 *             templ = template.encode('utf8')
 *         else:
 *             if not PY2 and self.encoded:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                         'cannot expand bytes template on unicode pattern')
 */
    }

    /* "match.pxi":123
 *                 raise ValueError(
 *                         'cannot expand bytes template on unicode pattern')
 *             templ = bytes(template)             # <<<<<<<<<<<<<<
 *         self._expand(templ, result)
 *         return result.decode('utf8') if self.encoded else bytes(result)
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_v_template); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_templ = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "match.pxi":124
 *                         'cannot expand bytes template on unicode pattern')
 *             templ = bytes(template)
 *         self._expand(templ, result)             # <<<<<<<<<<<<<<
 *         return result.decode('utf8') if self.encoded else bytes(result)
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_templ))||((__pyx_v_templ) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_templ)->tp_name), 0))) __PYX_ERR(2, 124, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_self->__pyx_vtab)->_expand(__pyx_v_self, ((PyObject*)__pyx_v_templ), __pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "match.pxi":125
 *             templ = bytes(template)
 *         self._expand(templ, result)
 *         return result.decode('utf8') if self.encoded else bytes(result)             # <<<<<<<<<<<<<<
 * 
 *     cdef _expand(self, bytes templ, bytearray result):
 */
  __Pyx_XDECREF(__pyx_r);
  if ((__pyx_v_self->encoded != 0)) {
    __pyx_t_4 = __Pyx_decode_bytearray(__pyx_v_result, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "match.pxi":111
 *         return result
 * 
 *     def expand(self, object template):             # <<<<<<<<<<<<<<
 *         """Expand a template with groups."""
 *         cdef bytearray result = bytearray()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("re2.Match.expand", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_templ);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":127
 *         return result.decode('utf8') if self.encoded else bytes(result)
 * 
 *     cdef _expand(self, bytes templ, bytearray result):             # <<<<<<<<<<<<<<
 *         """Expand template by appending to an existing bytearray.
 *         Everything remains UTF-8 encoded."""
 */

static PyObject *__pyx_f_3re2_5Match__expand(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_templ, PyObject *__pyx_v_result) {
  char *__pyx_v_cstring;
  int __pyx_v_n;
  int __pyx_v_prev;
  int __pyx_v_size;
  PyObject *__pyx_v_groupno = NULL;
  PyObject *__pyx_v_groupval = NULL;
  int __pyx_v_start;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_expand", 0);

  /* "match.pxi":131
 *         Everything remains UTF-8 encoded."""
 *         cdef char * cstring
 *         cdef int n = 0, prev = 0, size             # <<<<<<<<<<<<<<
 * 
 *         # NB: cstring is used to get single characters, to avoid difference in
 */
  __pyx_v_n = 0;
  __pyx_v_prev = 0;

  /* "match.pxi":135
 *         # NB: cstring is used to get single characters, to avoid difference in
 *         # Python 2/3 behavior of bytes objects.
 *         cstring = templ             # <<<<<<<<<<<<<<
 *         size = len(templ)
 *         while True:
 */
  if (unlikely(__pyx_v_templ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(2, 135, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyBytes_AsWritableString(__pyx_v_templ); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(2, 135, __pyx_L1_error)
  __pyx_v_cstring = __pyx_t_1;

  /* "match.pxi":136
 *         # Python 2/3 behavior of bytes objects.
 *         cstring = templ
 *         size = len(templ)             # <<<<<<<<<<<<<<
 *         while True:
 *             prev = n
 */
  if (unlikely(__pyx_v_templ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 136, __pyx_L1_error)
  }
  __pyx_t_2 = PyBytes_GET_SIZE(__pyx_v_templ); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(2, 136, __pyx_L1_error)
  __pyx_v_size = __pyx_t_2;

  /* "match.pxi":137
 *         cstring = templ
 *         size = len(templ)
 *         while True:             # <<<<<<<<<<<<<<
 *             prev = n
 *             n = templ.find(b'\\', prev)
 */
  while (1) {

    /* "match.pxi":138
 *         size = len(templ)
 *         while True:
 *             prev = n             # <<<<<<<<<<<<<<
 *             n = templ.find(b'\\', prev)
 *             if n == -1:
 */
    __pyx_v_prev = __pyx_v_n;

    /* "match.pxi":139
 *         while True:
 *             prev = n
 *             n = templ.find(b'\\', prev)             # <<<<<<<<<<<<<<
 *             if n == -1:
 *                 result.extend(templ[prev:])
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_prev); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyBytes_Type_find, __pyx_v_templ, __pyx_kp_b__8, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 139, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_n = __pyx_t_5;

    /* "match.pxi":140
 *             prev = n
 *             n = templ.find(b'\\', prev)
 *             if n == -1:             # <<<<<<<<<<<<<<
 *                 result.extend(templ[prev:])
 *                 break
 */
    __pyx_t_6 = ((__pyx_v_n == -1L) != 0);
    if (__pyx_t_6) {

      /* "match.pxi":141
 *             n = templ.find(b'\\', prev)
 *             if n == -1:
 *                 result.extend(templ[prev:])             # <<<<<<<<<<<<<<
 *                 break
 *             result.extend(templ[prev:n])
 */
      if (unlikely(__pyx_v_templ == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(2, 141, __pyx_L1_error)
      }
      __pyx_t_4 = PySequence_GetSlice(__pyx_v_templ, __pyx_v_prev, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "match.pxi":142
 *             if n == -1:
 *                 result.extend(templ[prev:])
 *                 break             # <<<<<<<<<<<<<<
 *             result.extend(templ[prev:n])
 *             n += 1
 */
      goto __pyx_L4_break;

      /* "match.pxi":140
 *             prev = n
 *             n = templ.find(b'\\', prev)
 *             if n == -1:             # <<<<<<<<<<<<<<
 *                 result.extend(templ[prev:])
 *                 break
 */
    }

    /* "match.pxi":143
 *                 result.extend(templ[prev:])
 *                 break
 *             result.extend(templ[prev:n])             # <<<<<<<<<<<<<<
 *             n += 1
 *             if (n + 2 < size and cstring[n] == b'x'
 */
    if (unlikely(__pyx_v_templ == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 143, __pyx_L1_error)
    }
    __pyx_t_3 = PySequence_GetSlice(__pyx_v_templ, __pyx_v_prev, __pyx_v_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "match.pxi":144
 *                 break
 *             result.extend(templ[prev:n])
 *             n += 1             # <<<<<<<<<<<<<<
 *             if (n + 2 < size and cstring[n] == b'x'
 *                     and ishex(cstring[n + 1]) and ishex(cstring[n + 2])):
 */
    __pyx_v_n = (__pyx_v_n + 1);

    /* "match.pxi":145
 *             result.extend(templ[prev:n])
 *             n += 1
 *             if (n + 2 < size and cstring[n] == b'x'             # <<<<<<<<<<<<<<
 *                     and ishex(cstring[n + 1]) and ishex(cstring[n + 2])):
 *                 # hex char reference \x1f
 */
    __pyx_t_7 = (((__pyx_v_n + 2) < __pyx_v_size) != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }

    /* "match.pxi":146
 *             n += 1
 *             if (n + 2 < size and cstring[n] == b'x'
 *                     and ishex(cstring[n + 1]) and ishex(cstring[n + 2])):             # <<<<<<<<<<<<<<
 *                 # hex char reference \x1f
 *                 result.append(int(templ[n + 1:n + 3], base=16) & 255)
 */
    __pyx_t_7 = (((__pyx_v_cstring[__pyx_v_n]) == 'x') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = (__pyx_f_3re2_ishex((__pyx_v_cstring[(__pyx_v_n + 1)])) != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = (__pyx_f_3re2_ishex((__pyx_v_cstring[(__pyx_v_n + 2)])) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "match.pxi":145
 *             result.extend(templ[prev:n])
 *             n += 1
 *             if (n + 2 < size and cstring[n] == b'x'             # <<<<<<<<<<<<<<
 *                     and ishex(cstring[n + 1]) and ishex(cstring[n + 2])):
 *                 # hex char reference \x1f
 */
    if (__pyx_t_6) {

      /* "match.pxi":148
 *                     and ishex(cstring[n + 1]) and ishex(cstring[n + 2])):
 *                 # hex char reference \x1f
 *                 result.append(int(templ[n + 1:n + 3], base=16) & 255)             # <<<<<<<<<<<<<<
 *                 n += 3
 *             elif (n + 2 < size and isoct(cstring[n]) and isoct(cstring[n + 1])
 */
      if (unlikely(__pyx_v_templ == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(2, 148, __pyx_L1_error)
      }
      __pyx_t_4 = PySequence_GetSlice(__pyx_v_templ, (__pyx_v_n + 1), (__pyx_v_n + 3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_base, __pyx_int_16) < 0) __PYX_ERR(2, 148, __pyx_L1_error)
      __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyInt_AndObjC(__pyx_t_8, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = __Pyx_PyByteArray_AppendObject(__pyx_v_result, __pyx_t_4); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 148, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "match.pxi":149
 *                 # hex char reference \x1f
 *                 result.append(int(templ[n + 1:n + 3], base=16) & 255)
 *                 n += 3             # <<<<<<<<<<<<<<
 *             elif (n + 2 < size and isoct(cstring[n]) and isoct(cstring[n + 1])
 *                     and isoct(cstring[n + 2])):
 */
      __pyx_v_n = (__pyx_v_n + 3);

      /* "match.pxi":145
 *             result.extend(templ[prev:n])
 *             n += 1
 *             if (n + 2 < size and cstring[n] == b'x'             # <<<<<<<<<<<<<<
 *                     and ishex(cstring[n + 1]) and ishex(cstring[n + 2])):
 *                 # hex char reference \x1f
 */
      goto __pyx_L6;
    }

    /* "match.pxi":150
 *                 result.append(int(templ[n + 1:n + 3], base=16) & 255)
 *                 n += 3
 *             elif (n + 2 < size and isoct(cstring[n]) and isoct(cstring[n + 1])             # <<<<<<<<<<<<<<
 *                     and isoct(cstring[n + 2])):
 *                 # octal char reference \123
 */
    __pyx_t_7 = (((__pyx_v_n + 2) < __pyx_v_size) != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_7 = (__pyx_f_3re2_isoct((__pyx_v_cstring[__pyx_v_n])) != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L11_bool_binop_done;
    }

    /* "match.pxi":151
 *                 n += 3
 *             elif (n + 2 < size and isoct(cstring[n]) and isoct(cstring[n + 1])
 *                     and isoct(cstring[n + 2])):             # <<<<<<<<<<<<<<
 *                 # octal char reference \123
 *                 result.append(int(templ[n:n + 3], base=8) & 255)
 */
    __pyx_t_7 = (__pyx_f_3re2_isoct((__pyx_v_cstring[(__pyx_v_n + 1)])) != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_7 = (__pyx_f_3re2_isoct((__pyx_v_cstring[(__pyx_v_n + 2)])) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L11_bool_binop_done:;

    /* "match.pxi":150
 *                 result.append(int(templ[n + 1:n + 3], base=16) & 255)
 *                 n += 3
 *             elif (n + 2 < size and isoct(cstring[n]) and isoct(cstring[n + 1])             # <<<<<<<<<<<<<<
 *                     and isoct(cstring[n + 2])):
 *                 # octal char reference \123
 */
    if (__pyx_t_6) {

      /* "match.pxi":153
 *                     and isoct(cstring[n + 2])):
 *                 # octal char reference \123
 *                 result.append(int(templ[n:n + 3], base=8) & 255)             # <<<<<<<<<<<<<<
 *                 n += 3
 *             elif cstring[n] == b'0':
 */
      if (unlikely(__pyx_v_templ == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(2, 153, __pyx_L1_error)
      }
      __pyx_t_4 = PySequence_GetSlice(__pyx_v_templ, __pyx_v_n, (__pyx_v_n + 3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_base, __pyx_int_8) < 0) __PYX_ERR(2, 153, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyInt_AndObjC(__pyx_t_3, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyByteArray_AppendObject(__pyx_v_result, __pyx_t_4); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 153, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "match.pxi":154
 *                 # octal char reference \123
 *                 result.append(int(templ[n:n + 3], base=8) & 255)
 *                 n += 3             # <<<<<<<<<<<<<<
 *             elif cstring[n] == b'0':
 *                 if n + 1 < size and isoct(cstring[n + 1]):
 */
      __pyx_v_n = (__pyx_v_n + 3);

      /* "match.pxi":150
 *                 result.append(int(templ[n + 1:n + 3], base=16) & 255)
 *                 n += 3
 *             elif (n + 2 < size and isoct(cstring[n]) and isoct(cstring[n + 1])             # <<<<<<<<<<<<<<
 *                     and isoct(cstring[n + 2])):
 *                 # octal char reference \123
 */
      goto __pyx_L6;
    }

    /* "match.pxi":155
 *                 result.append(int(templ[n:n + 3], base=8) & 255)
 *                 n += 3
 *             elif cstring[n] == b'0':             # <<<<<<<<<<<<<<
 *                 if n + 1 < size and isoct(cstring[n + 1]):
 *                     # 2 character octal: \01
 */
    __pyx_t_6 = (((__pyx_v_cstring[__pyx_v_n]) == '0') != 0);
    if (__pyx_t_6) {

      /* "match.pxi":156
 *                 n += 3
 *             elif cstring[n] == b'0':
 *                 if n + 1 < size and isoct(cstring[n + 1]):             # <<<<<<<<<<<<<<
 *                     # 2 character octal: \01
 *                     result.append(int(templ[n:n + 2], base=8))
 */
      __pyx_t_7 = (((__pyx_v_n + 1) < __pyx_v_size) != 0);
      if (__pyx_t_7) {
      } else {
        __pyx_t_6 = __pyx_t_7;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_t_7 = (__pyx_f_3re2_isoct((__pyx_v_cstring[(__pyx_v_n + 1)])) != 0);
      __pyx_t_6 = __pyx_t_7;
      __pyx_L16_bool_binop_done:;
      if (__pyx_t_6) {

        /* "match.pxi":158
 *                 if n + 1 < size and isoct(cstring[n + 1]):
 *                     # 2 character octal: \01
 *                     result.append(int(templ[n:n + 2], base=8))             # <<<<<<<<<<<<<<
 *                     n += 2
 *                 else:  # nul-terminator literal \0
 */
        if (unlikely(__pyx_v_templ == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(2, 158, __pyx_L1_error)
        }
        __pyx_t_4 = PySequence_GetSlice(__pyx_v_templ, __pyx_v_n, (__pyx_v_n + 2)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 158, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 158, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 158, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_base, __pyx_int_8) < 0) __PYX_ERR(2, 158, __pyx_L1_error)
        __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 158, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_9 = __Pyx_PyByteArray_AppendObject(__pyx_v_result, __pyx_t_8); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 158, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "match.pxi":159
 *                     # 2 character octal: \01
 *                     result.append(int(templ[n:n + 2], base=8))
 *                     n += 2             # <<<<<<<<<<<<<<
 *                 else:  # nul-terminator literal \0
 *                     result.append(b'\0')
 */
        __pyx_v_n = (__pyx_v_n + 2);

        /* "match.pxi":156
 *                 n += 3
 *             elif cstring[n] == b'0':
 *                 if n + 1 < size and isoct(cstring[n + 1]):             # <<<<<<<<<<<<<<
 *                     # 2 character octal: \01
 *                     result.append(int(templ[n:n + 2], base=8))
 */
        goto __pyx_L15;
      }

      /* "match.pxi":161
 *                     n += 2
 *                 else:  # nul-terminator literal \0
 *                     result.append(b'\0')             # <<<<<<<<<<<<<<
 *                     n += 1
 *             elif b'0' <= cstring[n] <= b'9':  # numeric group reference
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyByteArray_Append(__pyx_v_result, '\x00'); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 161, __pyx_L1_error)

        /* "match.pxi":162
 *                 else:  # nul-terminator literal \0
 *                     result.append(b'\0')
 *                     n += 1             # <<<<<<<<<<<<<<
 *             elif b'0' <= cstring[n] <= b'9':  # numeric group reference
 *                 if n + 1 < size and isdigit(cstring[n + 1]):
 */
        __pyx_v_n = (__pyx_v_n + 1);
      }
      __pyx_L15:;

      /* "match.pxi":155
 *                 result.append(int(templ[n:n + 3], base=8) & 255)
 *                 n += 3
 *             elif cstring[n] == b'0':             # <<<<<<<<<<<<<<
 *                 if n + 1 < size and isoct(cstring[n + 1]):
 *                     # 2 character octal: \01
 */
      goto __pyx_L6;
    }

    /* "match.pxi":163
 *                     result.append(b'\0')
 *                     n += 1
 *             elif b'0' <= cstring[n] <= b'9':  # numeric group reference             # <<<<<<<<<<<<<<
 *                 if n + 1 < size and isdigit(cstring[n + 1]):
 *                     # 2 digit group ref \12
 */
    __pyx_t_6 = ('0' <= (__pyx_v_cstring[__pyx_v_n]));
    if (__pyx_t_6) {
      __pyx_t_6 = ((__pyx_v_cstring[__pyx_v_n]) <= '9');
    }
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {

      /* "match.pxi":164
 *                     n += 1
 *             elif b'0' <= cstring[n] <= b'9':  # numeric group reference
 *                 if n + 1 < size and isdigit(cstring[n + 1]):             # <<<<<<<<<<<<<<
 *                     # 2 digit group ref \12
 *                     groupno = int(templ[n:n + 2])
 */
      __pyx_t_6 = (((__pyx_v_n + 1) < __pyx_v_size) != 0);
      if (__pyx_t_6) {
      } else {
        __pyx_t_7 = __pyx_t_6;
        goto __pyx_L19_bool_binop_done;
      }
      __pyx_t_6 = (__pyx_f_3re2_isdigit((__pyx_v_cstring[(__pyx_v_n + 1)])) != 0);
      __pyx_t_7 = __pyx_t_6;
      __pyx_L19_bool_binop_done:;
      if (__pyx_t_7) {

        /* "match.pxi":166
 *                 if n + 1 < size and isdigit(cstring[n + 1]):
 *                     # 2 digit group ref \12
 *                     groupno = int(templ[n:n + 2])             # <<<<<<<<<<<<<<
 *                     n += 2
 *                 else:
 */
        if (unlikely(__pyx_v_templ == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(2, 166, __pyx_L1_error)
        }
        __pyx_t_8 = PySequence_GetSlice(__pyx_v_templ, __pyx_v_n, (__pyx_v_n + 2)); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 166, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 166, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF_SET(__pyx_v_groupno, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "match.pxi":167
 *                     # 2 digit group ref \12
 *                     groupno = int(templ[n:n + 2])
 *                     n += 2             # <<<<<<<<<<<<<<
 *                 else:
 *                     # 1 digit group ref \1
 */
        __pyx_v_n = (__pyx_v_n + 2);

        /* "match.pxi":164
 *                     n += 1
 *             elif b'0' <= cstring[n] <= b'9':  # numeric group reference
 *                 if n + 1 < size and isdigit(cstring[n + 1]):             # <<<<<<<<<<<<<<
 *                     # 2 digit group ref \12
 *                     groupno = int(templ[n:n + 2])
 */
        goto __pyx_L18;
      }

      /* "match.pxi":170
 *                 else:
 *                     # 1 digit group ref \1
 *                     groupno = int(templ[n:n + 1])             # <<<<<<<<<<<<<<
 *                     n += 1
 *                 if groupno <= self.re.groups:
 */
      /*else*/ {
        if (unlikely(__pyx_v_templ == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(2, 170, __pyx_L1_error)
        }
        __pyx_t_4 = PySequence_GetSlice(__pyx_v_templ, __pyx_v_n, (__pyx_v_n + 1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 170, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 170, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_groupno, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "match.pxi":171
 *                     # 1 digit group ref \1
 *                     groupno = int(templ[n:n + 1])
 *                     n += 1             # <<<<<<<<<<<<<<
 *                 if groupno <= self.re.groups:
 *                     groupval = self._group(groupno)
 */
        __pyx_v_n = (__pyx_v_n + 1);
      }
      __pyx_L18:;

      /* "match.pxi":172
 *                     groupno = int(templ[n:n + 1])
 *                     n += 1
 *                 if groupno <= self.re.groups:             # <<<<<<<<<<<<<<
 *                     groupval = self._group(groupno)
 *                     if groupval is not None:
 */
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->re->groups); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_groupno, __pyx_t_8, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 172, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(2, 172, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (likely(__pyx_t_7)) {

        /* "match.pxi":173
 *                     n += 1
 *                 if groupno <= self.re.groups:
 *                     groupval = self._group(groupno)             # <<<<<<<<<<<<<<
 *                     if groupval is not None:
 *                         result.extend(groupval)
 */
        __pyx_t_4 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_self->__pyx_vtab)->_group(__pyx_v_self, __pyx_v_groupno); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 173, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_XDECREF_SET(__pyx_v_groupval, ((PyObject*)__pyx_t_4));
        __pyx_t_4 = 0;

        /* "match.pxi":174
 *                 if groupno <= self.re.groups:
 *                     groupval = self._group(groupno)
 *                     if groupval is not None:             # <<<<<<<<<<<<<<
 *                         result.extend(groupval)
 *                 else:
 */
        __pyx_t_7 = (__pyx_v_groupval != ((PyObject*)Py_None));
        __pyx_t_6 = (__pyx_t_7 != 0);
        if (__pyx_t_6) {

          /* "match.pxi":175
 *                     groupval = self._group(groupno)
 *                     if groupval is not None:
 *                         result.extend(groupval)             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise RegexError('invalid group reference.')
 */
          __pyx_t_4 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_v_groupval); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 175, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "match.pxi":174
 *                 if groupno <= self.re.groups:
 *                     groupval = self._group(groupno)
 *                     if groupval is not None:             # <<<<<<<<<<<<<<
 *                         result.extend(groupval)
 *                 else:
 */
        }

        /* "match.pxi":172
 *                     groupno = int(templ[n:n + 1])
 *                     n += 1
 *                 if groupno <= self.re.groups:             # <<<<<<<<<<<<<<
 *                     groupval = self._group(groupno)
 *                     if groupval is not None:
 */
        goto __pyx_L21;
      }

      /* "match.pxi":177
 *                         result.extend(groupval)
 *                 else:
 *                     raise RegexError('invalid group reference.')             # <<<<<<<<<<<<<<
 *             elif cstring[n] == b'g':  # named group reference
 *                 n += 1
 */
      /*else*/ {
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_RegexError); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 177, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_3, __pyx_kp_u_invalid_group_reference) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_kp_u_invalid_group_reference);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 177, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 177, __pyx_L1_error)
      }
      __pyx_L21:;

      /* "match.pxi":163
 *                     result.append(b'\0')
 *                     n += 1
 *             elif b'0' <= cstring[n] <= b'9':  # numeric group reference             # <<<<<<<<<<<<<<
 *                 if n + 1 < size and isdigit(cstring[n + 1]):
 *                     # 2 digit group ref \12
 */
      goto __pyx_L6;
    }

    /* "match.pxi":178
 *                 else:
 *                     raise RegexError('invalid group reference.')
 *             elif cstring[n] == b'g':  # named group reference             # <<<<<<<<<<<<<<
 *                 n += 1
 *                 if n >= size or cstring[n] != b'<':
 */
    __pyx_t_6 = (((__pyx_v_cstring[__pyx_v_n]) == 'g') != 0);
    if (__pyx_t_6) {

      /* "match.pxi":179
 *                     raise RegexError('invalid group reference.')
 *             elif cstring[n] == b'g':  # named group reference
 *                 n += 1             # <<<<<<<<<<<<<<
 *                 if n >= size or cstring[n] != b'<':
 *                     raise RegexError('missing group name')
 */
      __pyx_v_n = (__pyx_v_n + 1);

      /* "match.pxi":180
 *             elif cstring[n] == b'g':  # named group reference
 *                 n += 1
 *                 if n >= size or cstring[n] != b'<':             # <<<<<<<<<<<<<<
 *                     raise RegexError('missing group name')
 *                 n += 1
 */
      __pyx_t_7 = ((__pyx_v_n >= __pyx_v_size) != 0);
      if (!__pyx_t_7) {
      } else {
        __pyx_t_6 = __pyx_t_7;
        goto __pyx_L24_bool_binop_done;
      }
      __pyx_t_7 = (((__pyx_v_cstring[__pyx_v_n]) != '<') != 0);
      __pyx_t_6 = __pyx_t_7;
      __pyx_L24_bool_binop_done:;
      if (unlikely(__pyx_t_6)) {

        /* "match.pxi":181
 *                 n += 1
 *                 if n >= size or cstring[n] != b'<':
 *                     raise RegexError('missing group name')             # <<<<<<<<<<<<<<
 *                 n += 1
 *                 start = n
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_RegexError); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 181, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_3, __pyx_kp_u_missing_group_name) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_kp_u_missing_group_name);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 181, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 181, __pyx_L1_error)

        /* "match.pxi":180
 *             elif cstring[n] == b'g':  # named group reference
 *                 n += 1
 *                 if n >= size or cstring[n] != b'<':             # <<<<<<<<<<<<<<
 *                     raise RegexError('missing group name')
 *                 n += 1
 */
      }

      /* "match.pxi":182
 *                 if n >= size or cstring[n] != b'<':
 *                     raise RegexError('missing group name')
 *                 n += 1             # <<<<<<<<<<<<<<
 *                 start = n
 *                 while cstring[n] != b'>':
 */
      __pyx_v_n = (__pyx_v_n + 1);

      /* "match.pxi":183
 *                     raise RegexError('missing group name')
 *                 n += 1
 *                 start = n             # <<<<<<<<<<<<<<
 *                 while cstring[n] != b'>':
 *                     if not isident(cstring[n]):
 */
      __pyx_v_start = __pyx_v_n;

      /* "match.pxi":184
 *                 n += 1
 *                 start = n
 *                 while cstring[n] != b'>':             # <<<<<<<<<<<<<<
 *                     if not isident(cstring[n]):
 *                         raise RegexError('bad character in group name')
 */
      while (1) {
        __pyx_t_6 = (((__pyx_v_cstring[__pyx_v_n]) != '>') != 0);
        if (!__pyx_t_6) break;

        /* "match.pxi":185
 *                 start = n
 *                 while cstring[n] != b'>':
 *                     if not isident(cstring[n]):             # <<<<<<<<<<<<<<
 *                         raise RegexError('bad character in group name')
 *                     n += 1
 */
        __pyx_t_6 = ((!(__pyx_f_3re2_isident((__pyx_v_cstring[__pyx_v_n])) != 0)) != 0);
        if (unlikely(__pyx_t_6)) {

          /* "match.pxi":186
 *                 while cstring[n] != b'>':
 *                     if not isident(cstring[n]):
 *                         raise RegexError('bad character in group name')             # <<<<<<<<<<<<<<
 *                     n += 1
 *                     if n >= size:
 */
          __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_RegexError); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 186, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_3 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_8, function);
            }
          }
          __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_3, __pyx_kp_u_bad_character_in_group_name) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_kp_u_bad_character_in_group_name);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 186, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_Raise(__pyx_t_4, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __PYX_ERR(2, 186, __pyx_L1_error)

          /* "match.pxi":185
 *                 start = n
 *                 while cstring[n] != b'>':
 *                     if not isident(cstring[n]):             # <<<<<<<<<<<<<<
 *                         raise RegexError('bad character in group name')
 *                     n += 1
 */
        }

        /* "match.pxi":187
 *                     if not isident(cstring[n]):
 *                         raise RegexError('bad character in group name')
 *                     n += 1             # <<<<<<<<<<<<<<
 *                     if n >= size:
 *                         raise RegexError('unterminated group name')
 */
        __pyx_v_n = (__pyx_v_n + 1);

        /* "match.pxi":188
 *                         raise RegexError('bad character in group name')
 *                     n += 1
 *                     if n >= size:             # <<<<<<<<<<<<<<
 *                         raise RegexError('unterminated group name')
 *                 if templ[start:n].isdigit():
 */
        __pyx_t_6 = ((__pyx_v_n >= __pyx_v_size) != 0);
        if (unlikely(__pyx_t_6)) {

          /* "match.pxi":189
 *                     n += 1
 *                     if n >= size:
 *                         raise RegexError('unterminated group name')             # <<<<<<<<<<<<<<
 *                 if templ[start:n].isdigit():
 *                     name = int(templ[start:n])
 */
          __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_RegexError); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 189, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_3 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_8, function);
            }
          }
          __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_3, __pyx_kp_u_unterminated_group_name) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_kp_u_unterminated_group_name);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 189, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_Raise(__pyx_t_4, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __PYX_ERR(2, 189, __pyx_L1_error)

          /* "match.pxi":188
 *                         raise RegexError('bad character in group name')
 *                     n += 1
 *                     if n >= size:             # <<<<<<<<<<<<<<
 *                         raise RegexError('unterminated group name')
 *                 if templ[start:n].isdigit():
 */
        }
      }

      /* "match.pxi":190
 *                     if n >= size:
 *                         raise RegexError('unterminated group name')
 *                 if templ[start:n].isdigit():             # <<<<<<<<<<<<<<
 *                     name = int(templ[start:n])
 *                 elif isdigit(cstring[start]):
 */
      if (unlikely(__pyx_v_templ == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(2, 190, __pyx_L1_error)
      }
      __pyx_t_8 = PySequence_GetSlice(__pyx_v_templ, __pyx_v_start, __pyx_v_n); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 190, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_isdigit); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 190, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 190, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 190, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {

        /* "match.pxi":191
 *                         raise RegexError('unterminated group name')
 *                 if templ[start:n].isdigit():
 *                     name = int(templ[start:n])             # <<<<<<<<<<<<<<
 *                 elif isdigit(cstring[start]):
 *                     raise RegexError('bad character in group name')
 */
        if (unlikely(__pyx_v_templ == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(2, 191, __pyx_L1_error)
        }
        __pyx_t_4 = PySequence_GetSlice(__pyx_v_templ, __pyx_v_start, __pyx_v_n); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 191, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 191, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "match.pxi":190
 *                     if n >= size:
 *                         raise RegexError('unterminated group name')
 *                 if templ[start:n].isdigit():             # <<<<<<<<<<<<<<
 *                     name = int(templ[start:n])
 *                 elif isdigit(cstring[start]):
 */
        goto __pyx_L30;
      }

      /* "match.pxi":192
 *                 if templ[start:n].isdigit():
 *                     name = int(templ[start:n])
 *                 elif isdigit(cstring[start]):             # <<<<<<<<<<<<<<
 *                     raise RegexError('bad character in group name')
 *                 else:
 */
      __pyx_t_6 = (__pyx_f_3re2_isdigit((__pyx_v_cstring[__pyx_v_start])) != 0);
      if (unlikely(__pyx_t_6)) {

        /* "match.pxi":193
 *                     name = int(templ[start:n])
 *                 elif isdigit(cstring[start]):
 *                     raise RegexError('bad character in group name')             # <<<<<<<<<<<<<<
 *                 else:
 *                     name = templ[start:n]
 */
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_RegexError); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 193, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_3 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_8, __pyx_kp_u_bad_character_in_group_name) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_bad_character_in_group_name);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 193, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(2, 193, __pyx_L1_error)

        /* "match.pxi":192
 *                 if templ[start:n].isdigit():
 *                     name = int(templ[start:n])
 *                 elif isdigit(cstring[start]):             # <<<<<<<<<<<<<<
 *                     raise RegexError('bad character in group name')
 *                 else:
 */
      }

      /* "match.pxi":195
 *                     raise RegexError('bad character in group name')
 *                 else:
 *                     name = templ[start:n]             # <<<<<<<<<<<<<<
 *                     if self.encoded:
 *                         name = name.decode('utf8')
 */
      /*else*/ {
        if (unlikely(__pyx_v_templ == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(2, 195, __pyx_L1_error)
        }
        __pyx_t_3 = PySequence_GetSlice(__pyx_v_templ, __pyx_v_start, __pyx_v_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 195, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "match.pxi":196
 *                 else:
 *                     name = templ[start:n]
 *                     if self.encoded:             # <<<<<<<<<<<<<<
 *                         name = name.decode('utf8')
 *                 groupval = self._group(name)
 */
        __pyx_t_6 = (__pyx_v_self->encoded != 0);
        if (__pyx_t_6) {

          /* "match.pxi":197
 *                     name = templ[start:n]
 *                     if self.encoded:
 *                         name = name.decode('utf8')             # <<<<<<<<<<<<<<
 *                 groupval = self._group(name)
 *                 if groupval is not None:
 */
          __pyx_t_3 = __Pyx_decode_bytes(__pyx_v_name, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 197, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF_SET(__pyx_v_name, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "match.pxi":196
 *                 else:
 *                     name = templ[start:n]
 *                     if self.encoded:             # <<<<<<<<<<<<<<
 *                         name = name.decode('utf8')
 *                 groupval = self._group(name)
 */
        }
      }
      __pyx_L30:;

      /* "match.pxi":198
 *                     if self.encoded:
 *                         name = name.decode('utf8')
 *                 groupval = self._group(name)             # <<<<<<<<<<<<<<
 *                 if groupval is not None:
 *                     result.extend(groupval)
 */
      __pyx_t_3 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_self->__pyx_vtab)->_group(__pyx_v_self, __pyx_v_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_groupval, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "match.pxi":199
 *                         name = name.decode('utf8')
 *                 groupval = self._group(name)
 *                 if groupval is not None:             # <<<<<<<<<<<<<<
 *                     result.extend(groupval)
 *                 n += 1
 */
      __pyx_t_6 = (__pyx_v_groupval != ((PyObject*)Py_None));
      __pyx_t_7 = (__pyx_t_6 != 0);
      if (__pyx_t_7) {

        /* "match.pxi":200
 *                 groupval = self._group(name)
 *                 if groupval is not None:
 *                     result.extend(groupval)             # <<<<<<<<<<<<<<
 *                 n += 1
 *             else:
 */
        __pyx_t_3 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyByteArray_Type_extend, __pyx_v_result, __pyx_v_groupval); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 200, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "match.pxi":199
 *                         name = name.decode('utf8')
 *                 groupval = self._group(name)
 *                 if groupval is not None:             # <<<<<<<<<<<<<<
 *                     result.extend(groupval)
 *                 n += 1
 */
      }

      /* "match.pxi":201
 *                 if groupval is not None:
 *                     result.extend(groupval)
 *                 n += 1             # <<<<<<<<<<<<<<
 *             else:
 *                 if cstring[n] == b'n':
 */
      __pyx_v_n = (__pyx_v_n + 1);

      /* "match.pxi":178
 *                 else:
 *                     raise RegexError('invalid group reference.')
 *             elif cstring[n] == b'g':  # named group reference             # <<<<<<<<<<<<<<
 *                 n += 1
 *                 if n >= size or cstring[n] != b'<':
 */
      goto __pyx_L6;
    }

    /* "match.pxi":203
 *                 n += 1
 *             else:
 *                 if cstring[n] == b'n':             # <<<<<<<<<<<<<<
 *                     result.append(b'\n')
 *                 elif cstring[n] == b'r':
 */
    /*else*/ {
      __pyx_t_7 = (((__pyx_v_cstring[__pyx_v_n]) == 'n') != 0);
      if (__pyx_t_7) {

        /* "match.pxi":204
 *             else:
 *                 if cstring[n] == b'n':
 *                     result.append(b'\n')             # <<<<<<<<<<<<<<
 *                 elif cstring[n] == b'r':
 *                     result.append(b'\r')
 */
        __pyx_t_9 = __Pyx_PyByteArray_Append(__pyx_v_result, '\n'); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 204, __pyx_L1_error)

        /* "match.pxi":203
 *                 n += 1
 *             else:
 *                 if cstring[n] == b'n':             # <<<<<<<<<<<<<<
 *                     result.append(b'\n')
 *                 elif cstring[n] == b'r':
 */
        goto __pyx_L33;
      }

      /* "match.pxi":205
 *                 if cstring[n] == b'n':
 *                     result.append(b'\n')
 *                 elif cstring[n] == b'r':             # <<<<<<<<<<<<<<
 *                     result.append(b'\r')
 *                 elif cstring[n] == b't':
 */
      __pyx_t_7 = (((__pyx_v_cstring[__pyx_v_n]) == 'r') != 0);
      if (__pyx_t_7) {

        /* "match.pxi":206
 *                     result.append(b'\n')
 *                 elif cstring[n] == b'r':
 *                     result.append(b'\r')             # <<<<<<<<<<<<<<
 *                 elif cstring[n] == b't':
 *                     result.append(b'\t')
 */
        __pyx_t_9 = __Pyx_PyByteArray_Append(__pyx_v_result, '\r'); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 206, __pyx_L1_error)

        /* "match.pxi":205
 *                 if cstring[n] == b'n':
 *                     result.append(b'\n')
 *                 elif cstring[n] == b'r':             # <<<<<<<<<<<<<<
 *                     result.append(b'\r')
 *                 elif cstring[n] == b't':
 */
        goto __pyx_L33;
      }

      /* "match.pxi":207
 *                 elif cstring[n] == b'r':
 *                     result.append(b'\r')
 *                 elif cstring[n] == b't':             # <<<<<<<<<<<<<<
 *                     result.append(b'\t')
 *                 elif cstring[n] == b'v':
 */
      __pyx_t_7 = (((__pyx_v_cstring[__pyx_v_n]) == 't') != 0);
      if (__pyx_t_7) {

        /* "match.pxi":208
 *                     result.append(b'\r')
 *                 elif cstring[n] == b't':
 *                     result.append(b'\t')             # <<<<<<<<<<<<<<
 *                 elif cstring[n] == b'v':
 *                     result.append(b'\v')
 */
        __pyx_t_9 = __Pyx_PyByteArray_Append(__pyx_v_result, '\t'); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 208, __pyx_L1_error)

        /* "match.pxi":207
 *                 elif cstring[n] == b'r':
 *                     result.append(b'\r')
 *                 elif cstring[n] == b't':             # <<<<<<<<<<<<<<
 *                     result.append(b'\t')
 *                 elif cstring[n] == b'v':
 */
        goto __pyx_L33;
      }

      /* "match.pxi":209
 *                 elif cstring[n] == b't':
 *                     result.append(b'\t')
 *                 elif cstring[n] == b'v':             # <<<<<<<<<<<<<<
 *                     result.append(b'\v')
 *                 elif cstring[n] == b'f':
 */
      __pyx_t_7 = (((__pyx_v_cstring[__pyx_v_n]) == 'v') != 0);
      if (__pyx_t_7) {

        /* "match.pxi":210
 *                     result.append(b'\t')
 *                 elif cstring[n] == b'v':
 *                     result.append(b'\v')             # <<<<<<<<<<<<<<
 *                 elif cstring[n] == b'f':
 *                     result.append(b'\f')
 */
        __pyx_t_9 = __Pyx_PyByteArray_Append(__pyx_v_result, '\x0B'); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 210, __pyx_L1_error)

        /* "match.pxi":209
 *                 elif cstring[n] == b't':
 *                     result.append(b'\t')
 *                 elif cstring[n] == b'v':             # <<<<<<<<<<<<<<
 *                     result.append(b'\v')
 *                 elif cstring[n] == b'f':
 */
        goto __pyx_L33;
      }

      /* "match.pxi":211
 *                 elif cstring[n] == b'v':
 *                     result.append(b'\v')
 *                 elif cstring[n] == b'f':             # <<<<<<<<<<<<<<
 *                     result.append(b'\f')
 *                 elif cstring[n] == b'a':
 */
      __pyx_t_7 = (((__pyx_v_cstring[__pyx_v_n]) == 'f') != 0);
      if (__pyx_t_7) {

        /* "match.pxi":212
 *                     result.append(b'\v')
 *                 elif cstring[n] == b'f':
 *                     result.append(b'\f')             # <<<<<<<<<<<<<<
 *                 elif cstring[n] == b'a':
 *                     result.append(b'\a')
 */
        __pyx_t_9 = __Pyx_PyByteArray_Append(__pyx_v_result, '\x0C'); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 212, __pyx_L1_error)

        /* "match.pxi":211
 *                 elif cstring[n] == b'v':
 *                     result.append(b'\v')
 *                 elif cstring[n] == b'f':             # <<<<<<<<<<<<<<
 *                     result.append(b'\f')
 *                 elif cstring[n] == b'a':
 */
        goto __pyx_L33;
      }

      /* "match.pxi":213
 *                 elif cstring[n] == b'f':
 *                     result.append(b'\f')
 *                 elif cstring[n] == b'a':             # <<<<<<<<<<<<<<
 *                     result.append(b'\a')
 *                 elif cstring[n] == b'b':
 */
      __pyx_t_7 = (((__pyx_v_cstring[__pyx_v_n]) == 'a') != 0);
      if (__pyx_t_7) {

        /* "match.pxi":214
 *                     result.append(b'\f')
 *                 elif cstring[n] == b'a':
 *                     result.append(b'\a')             # <<<<<<<<<<<<<<
 *                 elif cstring[n] == b'b':
 *                     result.append(b'\b')
 */
        __pyx_t_9 = __Pyx_PyByteArray_Append(__pyx_v_result, '\x07'); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 214, __pyx_L1_error)

        /* "match.pxi":213
 *                 elif cstring[n] == b'f':
 *                     result.append(b'\f')
 *                 elif cstring[n] == b'a':             # <<<<<<<<<<<<<<
 *                     result.append(b'\a')
 *                 elif cstring[n] == b'b':
 */
        goto __pyx_L33;
      }

      /* "match.pxi":215
 *                 elif cstring[n] == b'a':
 *                     result.append(b'\a')
 *                 elif cstring[n] == b'b':             # <<<<<<<<<<<<<<
 *                     result.append(b'\b')
 *                 elif cstring[n] == b'\\':
 */
      __pyx_t_7 = (((__pyx_v_cstring[__pyx_v_n]) == 'b') != 0);
      if (__pyx_t_7) {

        /* "match.pxi":216
 *                     result.append(b'\a')
 *                 elif cstring[n] == b'b':
 *                     result.append(b'\b')             # <<<<<<<<<<<<<<
 *                 elif cstring[n] == b'\\':
 *                     result.append(b'\\')
 */
        __pyx_t_9 = __Pyx_PyByteArray_Append(__pyx_v_result, '\x08'); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 216, __pyx_L1_error)

        /* "match.pxi":215
 *                 elif cstring[n] == b'a':
 *                     result.append(b'\a')
 *                 elif cstring[n] == b'b':             # <<<<<<<<<<<<<<
 *                     result.append(b'\b')
 *                 elif cstring[n] == b'\\':
 */
        goto __pyx_L33;
      }

      /* "match.pxi":217
 *                 elif cstring[n] == b'b':
 *                     result.append(b'\b')
 *                 elif cstring[n] == b'\\':             # <<<<<<<<<<<<<<
 *                     result.append(b'\\')
 *                 else:  # copy verbatim
 */
      __pyx_t_7 = (((__pyx_v_cstring[__pyx_v_n]) == '\\') != 0);
      if (__pyx_t_7) {

        /* "match.pxi":218
 *                     result.append(b'\b')
 *                 elif cstring[n] == b'\\':
 *                     result.append(b'\\')             # <<<<<<<<<<<<<<
 *                 else:  # copy verbatim
 *                     result.append(b'\\')
 */
        __pyx_t_9 = __Pyx_PyByteArray_Append(__pyx_v_result, '\\'); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 218, __pyx_L1_error)

        /* "match.pxi":217
 *                 elif cstring[n] == b'b':
 *                     result.append(b'\b')
 *                 elif cstring[n] == b'\\':             # <<<<<<<<<<<<<<
 *                     result.append(b'\\')
 *                 else:  # copy verbatim
 */
        goto __pyx_L33;
      }

      /* "match.pxi":220
 *                     result.append(b'\\')
 *                 else:  # copy verbatim
 *                     result.append(b'\\')             # <<<<<<<<<<<<<<
 *                     result.append(cstring[n])
 *                 n += 1
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyByteArray_Append(__pyx_v_result, '\\'); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 220, __pyx_L1_error)

        /* "match.pxi":221
 *                 else:  # copy verbatim
 *                     result.append(b'\\')
 *                     result.append(cstring[n])             # <<<<<<<<<<<<<<
 *                 n += 1
 *         return bytes(result)
 */
        __pyx_t_9 = __Pyx_PyByteArray_Append(__pyx_v_result, (__pyx_v_cstring[__pyx_v_n])); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 221, __pyx_L1_error)
      }
      __pyx_L33:;

      /* "match.pxi":222
 *                     result.append(b'\\')
 *                     result.append(cstring[n])
 *                 n += 1             # <<<<<<<<<<<<<<
 *         return bytes(result)
 * 
 */
      __pyx_v_n = (__pyx_v_n + 1);
    }
    __pyx_L6:;
  }
  __pyx_L4_break:;

  /* "match.pxi":223
 *                     result.append(cstring[n])
 *                 n += 1
 *         return bytes(result)             # <<<<<<<<<<<<<<
 * 
 *     def start(self, group=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_v_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "match.pxi":127
 *         return result.decode('utf8') if self.encoded else bytes(result)
 * 
 *     cdef _expand(self, bytes templ, bytearray result):             # <<<<<<<<<<<<<<
 *         """Expand template by appending to an existing bytearray.
 *         Everything remains UTF-8 encoded."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("re2.Match._expand", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_groupno);
  __Pyx_XDECREF(__pyx_v_groupval);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":225
 *         return bytes(result)
 * 
 *     def start(self, group=0):             # <<<<<<<<<<<<<<
 *         return self.span(group)[0]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_5Match_11start(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3re2_5Match_11start(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_group = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_group,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_group);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "start") < 0)) __PYX_ERR(2, 225, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_group = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("start", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 225, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Match.start", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_5Match_10start(((struct __pyx_obj_3re2_Match *)__pyx_v_self), __pyx_v_group);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_5Match_10start(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_group) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("start", 0);

  /* "match.pxi":226
 * 
 *     def start(self, group=0):
 *         return self.span(group)[0]             # <<<<<<<<<<<<<<
 * 
 *     def end(self, group=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_span); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_group) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_group);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "match.pxi":225
 *         return bytes(result)
 * 
 *     def start(self, group=0):             # <<<<<<<<<<<<<<
 *         return self.span(group)[0]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.Match.start", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":228
 *         return self.span(group)[0]
 * 
 *     def end(self, group=0):             # <<<<<<<<<<<<<<
 *         return self.span(group)[1]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_5Match_13end(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3re2_5Match_13end(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_group = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_group,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_group);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "end") < 0)) __PYX_ERR(2, 228, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_group = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("end", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 228, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Match.end", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_5Match_12end(((struct __pyx_obj_3re2_Match *)__pyx_v_self), __pyx_v_group);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_5Match_12end(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_group) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end", 0);

  /* "match.pxi":229
 * 
 *     def end(self, group=0):
 *         return self.span(group)[1]             # <<<<<<<<<<<<<<
 * 
 *     def span(self, group=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_span); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_group) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_group);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "match.pxi":228
 *         return self.span(group)[0]
 * 
 *     def end(self, group=0):             # <<<<<<<<<<<<<<
 *         return self.span(group)[1]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.Match.end", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":231
 *         return self.span(group)[1]
 * 
 *     def span(self, group=0):             # <<<<<<<<<<<<<<
 *         if isinstance(group, int):
 *             if group > len(self.regs):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_5Match_15span(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3re2_5Match_15span(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_group = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("span (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_group,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_group);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "span") < 0)) __PYX_ERR(2, 231, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_group = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("span", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 231, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.Match.span", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_5Match_14span(((struct __pyx_obj_3re2_Match *)__pyx_v_self), __pyx_v_group);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_5Match_14span(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_group) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_UCS4 __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("span", 0);

  /* "match.pxi":232
 * 
 *     def span(self, group=0):
 *         if isinstance(group, int):             # <<<<<<<<<<<<<<
 *             if group > len(self.regs):
 *                 raise IndexError("no such group %d; available groups: %r"
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_group); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "match.pxi":233
 *     def span(self, group=0):
 *         if isinstance(group, int):
 *             if group > len(self.regs):             # <<<<<<<<<<<<<<
 *                 raise IndexError("no such group %d; available groups: %r"
 *                         % (group, list(range(len(self.regs)))))
 */
    __pyx_t_3 = __pyx_v_self->regs;
    __Pyx_INCREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(2, 233, __pyx_L1_error)
    }
    __pyx_t_4 = PyTuple_GET_SIZE(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(2, 233, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_group, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 233, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 233, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_t_2)) {

      /* "match.pxi":234
 *         if isinstance(group, int):
 *             if group > len(self.regs):
 *                 raise IndexError("no such group %d; available groups: %r"             # <<<<<<<<<<<<<<
 *                         % (group, list(range(len(self.regs)))))
 *             return self.regs[group]
 */
      __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 234, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = 0;
      __pyx_t_6 = 127;
      __Pyx_INCREF(__pyx_kp_u_no_such_group);
      __pyx_t_4 += 14;
      __Pyx_GIVEREF(__pyx_kp_u_no_such_group);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_no_such_group);

      /* "match.pxi":235
 *             if group > len(self.regs):
 *                 raise IndexError("no such group %d; available groups: %r"
 *                         % (group, list(range(len(self.regs)))))             # <<<<<<<<<<<<<<
 *             return self.regs[group]
 *         else:
 */
      __pyx_t_3 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_v_group), __pyx_n_u_d); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_6;
      __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u_available_groups);
      __pyx_t_4 += 20;
      __Pyx_GIVEREF(__pyx_kp_u_available_groups);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_available_groups);
      __pyx_t_3 = __pyx_v_self->regs;
      __Pyx_INCREF(__pyx_t_3);
      if (unlikely(__pyx_t_3 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        __PYX_ERR(2, 235, __pyx_L1_error)
      }
      __pyx_t_7 = PyTuple_GET_SIZE(__pyx_t_3); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(2, 235, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PySequence_List(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_3), __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_6;
      __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "match.pxi":234
 *         if isinstance(group, int):
 *             if group > len(self.regs):
 *                 raise IndexError("no such group %d; available groups: %r"             # <<<<<<<<<<<<<<
 *                         % (group, list(range(len(self.regs)))))
 *             return self.regs[group]
 */
      __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_5, 4, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 234, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 234, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(2, 234, __pyx_L1_error)

      /* "match.pxi":233
 *     def span(self, group=0):
 *         if isinstance(group, int):
 *             if group > len(self.regs):             # <<<<<<<<<<<<<<
 *                 raise IndexError("no such group %d; available groups: %r"
 *                         % (group, list(range(len(self.regs)))))
 */
    }

    /* "match.pxi":236
 *                 raise IndexError("no such group %d; available groups: %r"
 *                         % (group, list(range(len(self.regs)))))
 *             return self.regs[group]             # <<<<<<<<<<<<<<
 *         else:
 *             self._groupdict()
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(__pyx_v_self->regs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 236, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_self->regs, __pyx_v_group); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "match.pxi":232
 * 
 *     def span(self, group=0):
 *         if isinstance(group, int):             # <<<<<<<<<<<<<<
 *             if group > len(self.regs):
 *                 raise IndexError("no such group %d; available groups: %r"
 */
  }

  /* "match.pxi":238
 *             return self.regs[group]
 *         else:
 *             self._groupdict()             # <<<<<<<<<<<<<<
 *             if group not in self.re.groupindex:
 *                 raise IndexError("no such group %r; available groups: %r"
 */
  /*else*/ {
    __pyx_t_5 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_self->__pyx_vtab)->_groupdict(__pyx_v_self); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "match.pxi":239
 *         else:
 *             self._groupdict()
 *             if group not in self.re.groupindex:             # <<<<<<<<<<<<<<
 *                 raise IndexError("no such group %r; available groups: %r"
 *                         % (group, list(self.re.groupindex)))
 */
    if (unlikely(__pyx_v_self->re->groupindex == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(2, 239, __pyx_L1_error)
    }
    __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_v_group, __pyx_v_self->re->groupindex, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 239, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (unlikely(__pyx_t_1)) {

      /* "match.pxi":240
 *             self._groupdict()
 *             if group not in self.re.groupindex:
 *                 raise IndexError("no such group %r; available groups: %r"             # <<<<<<<<<<<<<<
 *                         % (group, list(self.re.groupindex)))
 *             return self.regs[self.re.groupindex[group]]
 */
      __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 240, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = 0;
      __pyx_t_6 = 127;
      __Pyx_INCREF(__pyx_kp_u_no_such_group);
      __pyx_t_4 += 14;
      __Pyx_GIVEREF(__pyx_kp_u_no_such_group);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_no_such_group);

      /* "match.pxi":241
 *             if group not in self.re.groupindex:
 *                 raise IndexError("no such group %r; available groups: %r"
 *                         % (group, list(self.re.groupindex)))             # <<<<<<<<<<<<<<
 *             return self.regs[self.re.groupindex[group]]
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_group), __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_6;
      __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_INCREF(__pyx_kp_u_available_groups);
      __pyx_t_4 += 20;
      __Pyx_GIVEREF(__pyx_kp_u_available_groups);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_available_groups);
      __pyx_t_8 = PySequence_List(__pyx_v_self->re->groupindex); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_8), __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_6;
      __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "match.pxi":240
 *             self._groupdict()
 *             if group not in self.re.groupindex:
 *                 raise IndexError("no such group %r; available groups: %r"             # <<<<<<<<<<<<<<
 *                         % (group, list(self.re.groupindex)))
 *             return self.regs[self.re.groupindex[group]]
 */
      __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_5, 4, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 240, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 240, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(2, 240, __pyx_L1_error)

      /* "match.pxi":239
 *         else:
 *             self._groupdict()
 *             if group not in self.re.groupindex:             # <<<<<<<<<<<<<<
 *                 raise IndexError("no such group %r; available groups: %r"
 *                         % (group, list(self.re.groupindex)))
 */
    }

    /* "match.pxi":242
 *                 raise IndexError("no such group %r; available groups: %r"
 *                         % (group, list(self.re.groupindex)))
 *             return self.regs[self.re.groupindex[group]]             # <<<<<<<<<<<<<<
 * 
 *     cdef _make_spans(self, char * cstring, int size, int * cpos, int * upos):
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(__pyx_v_self->regs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 242, __pyx_L1_error)
    }
    if (unlikely(__pyx_v_self->re->groupindex == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 242, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->re->groupindex, __pyx_v_group); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_self->regs, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "match.pxi":231
 *         return self.span(group)[1]
 * 
 *     def span(self, group=0):             # <<<<<<<<<<<<<<
 *         if isinstance(group, int):
 *             if group > len(self.regs):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("re2.Match.span", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":244
 *             return self.regs[self.re.groupindex[group]]
 * 
 *     cdef _make_spans(self, char * cstring, int size, int * cpos, int * upos):             # <<<<<<<<<<<<<<
 *         cdef int start, end
 *         cdef StringPiece * piece
 */

static PyObject *__pyx_f_3re2_5Match__make_spans(struct __pyx_obj_3re2_Match *__pyx_v_self, char *__pyx_v_cstring, int __pyx_v_size, int *__pyx_v_cpos, int *__pyx_v_upos) {
  int __pyx_v_start;
  int __pyx_v_end;
  re2::StringPiece *__pyx_v_piece;
  PyObject *__pyx_v_spans = NULL;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_make_spans", 0);

  /* "match.pxi":248
 *         cdef StringPiece * piece
 * 
 *         spans = []             # <<<<<<<<<<<<<<
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_spans = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "match.pxi":249
 * 
 *         spans = []
 *         for i in range(self.nmatches):             # <<<<<<<<<<<<<<
 *             if self.matches[i].data() == NULL:
 *                 spans.append((-1, -1))
 */
  __pyx_t_2 = __pyx_v_self->nmatches;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "match.pxi":250
 *         spans = []
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:             # <<<<<<<<<<<<<<
 *                 spans.append((-1, -1))
 *             else:
 */
    __pyx_t_5 = (((__pyx_v_self->matches[__pyx_v_i]).data() == NULL) != 0);
    if (__pyx_t_5) {

      /* "match.pxi":251
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:
 *                 spans.append((-1, -1))             # <<<<<<<<<<<<<<
 *             else:
 *                 piece = &self.matches[i]
 */
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_spans, __pyx_tuple__12); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 251, __pyx_L1_error)

      /* "match.pxi":250
 *         spans = []
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:             # <<<<<<<<<<<<<<
 *                 spans.append((-1, -1))
 *             else:
 */
      goto __pyx_L5;
    }

    /* "match.pxi":253
 *                 spans.append((-1, -1))
 *             else:
 *                 piece = &self.matches[i]             # <<<<<<<<<<<<<<
 *                 if piece.data() == NULL:
 *                     return (-1, -1)
 */
    /*else*/ {
      __pyx_v_piece = (&(__pyx_v_self->matches[__pyx_v_i]));

      /* "match.pxi":254
 *             else:
 *                 piece = &self.matches[i]
 *                 if piece.data() == NULL:             # <<<<<<<<<<<<<<
 *                     return (-1, -1)
 *                 start = piece.data() - cstring
 */
      __pyx_t_5 = ((__pyx_v_piece->data() == NULL) != 0);
      if (__pyx_t_5) {

        /* "match.pxi":255
 *                 piece = &self.matches[i]
 *                 if piece.data() == NULL:
 *                     return (-1, -1)             # <<<<<<<<<<<<<<
 *                 start = piece.data() - cstring
 *                 end = start + piece.length()
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_tuple__12);
        __pyx_r = __pyx_tuple__12;
        goto __pyx_L0;

        /* "match.pxi":254
 *             else:
 *                 piece = &self.matches[i]
 *                 if piece.data() == NULL:             # <<<<<<<<<<<<<<
 *                     return (-1, -1)
 *                 start = piece.data() - cstring
 */
      }

      /* "match.pxi":256
 *                 if piece.data() == NULL:
 *                     return (-1, -1)
 *                 start = piece.data() - cstring             # <<<<<<<<<<<<<<
 *                 end = start + piece.length()
 *                 spans.append((start, end))
 */
      __pyx_v_start = (__pyx_v_piece->data() - __pyx_v_cstring);

      /* "match.pxi":257
 *                     return (-1, -1)
 *                 start = piece.data() - cstring
 *                 end = start + piece.length()             # <<<<<<<<<<<<<<
 *                 spans.append((start, end))
 * 
 */
      __pyx_v_end = (__pyx_v_start + __pyx_v_piece->length());

      /* "match.pxi":258
 *                 start = piece.data() - cstring
 *                 end = start + piece.length()
 *                 spans.append((start, end))             # <<<<<<<<<<<<<<
 * 
 *         if self.encoded == 2:
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 258, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_end); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 258, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 258, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
      __pyx_t_1 = 0;
      __pyx_t_7 = 0;
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_spans, __pyx_t_8); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 258, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_L5:;
  }

  /* "match.pxi":260
 *                 spans.append((start, end))
 * 
 *         if self.encoded == 2:             # <<<<<<<<<<<<<<
 *             spans = self._convert_spans(spans, cstring, size, cpos, upos)
 * 
 */
  __pyx_t_5 = ((__pyx_v_self->encoded == 2) != 0);
  if (__pyx_t_5) {

    /* "match.pxi":261
 * 
 *         if self.encoded == 2:
 *             spans = self._convert_spans(spans, cstring, size, cpos, upos)             # <<<<<<<<<<<<<<
 * 
 *         self.regs = tuple(spans)
 */
    __pyx_t_8 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_self->__pyx_vtab)->_convert_spans(__pyx_v_self, __pyx_v_spans, __pyx_v_cstring, __pyx_v_size, __pyx_v_cpos, __pyx_v_upos); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF_SET(__pyx_v_spans, ((PyObject*)__pyx_t_8));
    __pyx_t_8 = 0;

    /* "match.pxi":260
 *                 spans.append((start, end))
 * 
 *         if self.encoded == 2:             # <<<<<<<<<<<<<<
 *             spans = self._convert_spans(spans, cstring, size, cpos, upos)
 * 
 */
  }

  /* "match.pxi":263
 *             spans = self._convert_spans(spans, cstring, size, cpos, upos)
 * 
 *         self.regs = tuple(spans)             # <<<<<<<<<<<<<<
 * 
 *     cdef list _convert_spans(self, spans,
 */
  if (unlikely(__pyx_v_spans == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(2, 263, __pyx_L1_error)
  }
  __pyx_t_8 = PyList_AsTuple(__pyx_v_spans); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __Pyx_GOTREF(__pyx_v_self->regs);
  __Pyx_DECREF(__pyx_v_self->regs);
  __pyx_v_self->regs = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "match.pxi":244
 *             return self.regs[self.re.groupindex[group]]
 * 
 *     cdef _make_spans(self, char * cstring, int size, int * cpos, int * upos):             # <<<<<<<<<<<<<<
 *         cdef int start, end
 *         cdef StringPiece * piece
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("re2.Match._make_spans", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_spans);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":265
 *         self.regs = tuple(spans)
 * 
 *     cdef list _convert_spans(self, spans,             # <<<<<<<<<<<<<<
 *             char * cstring, int size, int * cpos, int * upos):
 *         cdef map[int, int] positions
 */

static PyObject *__pyx_f_3re2_5Match__convert_spans(CYTHON_UNUSED struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_spans, char *__pyx_v_cstring, int __pyx_v_size, int *__pyx_v_cpos, int *__pyx_v_upos) {
  std::map<int,int>  __pyx_v_positions;
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_8genexpr7__pyx_v_x;
  int __pyx_8genexpr7__pyx_v_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_convert_spans", 0);

  /* "match.pxi":269
 *         cdef map[int, int] positions
 *         cdef int x, y
 *         for x, y in spans:             # <<<<<<<<<<<<<<
 *             positions[x] = x
 *             positions[y] = y
 */
  if (likely(PyList_CheckExact(__pyx_v_spans)) || PyTuple_CheckExact(__pyx_v_spans)) {
    __pyx_t_1 = __pyx_v_spans; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_spans); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 269, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 269, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 269, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 269, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 269, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 269, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(2, 269, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 269, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 269, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 269, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(2, 269, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(2, 269, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 269, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 269, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_x = __pyx_t_9;
    __pyx_v_y = __pyx_t_10;

    /* "match.pxi":270
 *         cdef int x, y
 *         for x, y in spans:
 *             positions[x] = x             # <<<<<<<<<<<<<<
 *             positions[y] = y
 *         unicodeindices(positions, cstring, size, cpos, upos)
 */
    (__pyx_v_positions[__pyx_v_x]) = __pyx_v_x;

    /* "match.pxi":271
 *         for x, y in spans:
 *             positions[x] = x
 *             positions[y] = y             # <<<<<<<<<<<<<<
 *         unicodeindices(positions, cstring, size, cpos, upos)
 *         return [(positions[x], positions[y]) for x, y in spans]
 */
    (__pyx_v_positions[__pyx_v_y]) = __pyx_v_y;

    /* "match.pxi":269
 *         cdef map[int, int] positions
 *         cdef int x, y
 *         for x, y in spans:             # <<<<<<<<<<<<<<
 *             positions[x] = x
 *             positions[y] = y
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "match.pxi":272
 *             positions[x] = x
 *             positions[y] = y
 *         unicodeindices(positions, cstring, size, cpos, upos)             # <<<<<<<<<<<<<<
 *         return [(positions[x], positions[y]) for x, y in spans]
 * 
 */
  __pyx_f_3re2_unicodeindices(__pyx_v_positions, __pyx_v_cstring, __pyx_v_size, __pyx_v_cpos, __pyx_v_upos);

  /* "match.pxi":273
 *             positions[y] = y
 *         unicodeindices(positions, cstring, size, cpos, upos)
 *         return [(positions[x], positions[y]) for x, y in spans]             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_spans)) || PyTuple_CheckExact(__pyx_v_spans)) {
      __pyx_t_4 = __pyx_v_spans; __Pyx_INCREF(__pyx_t_4); __pyx_t_2 = 0;
      __pyx_t_3 = NULL;
    } else {
      __pyx_t_2 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_spans); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 273, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 273, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_3)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_6); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 273, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 273, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_6); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 273, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 273, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_3(__pyx_t_4);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(2, 273, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
        PyObject* sequence = __pyx_t_6;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(2, 273, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 273, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 273, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_11 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 273, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_8 = Py_TYPE(__pyx_t_11)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_11); if (unlikely(!__pyx_t_5)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_7 = __pyx_t_8(__pyx_t_11); if (unlikely(!__pyx_t_7)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_11), 2) < 0) __PYX_ERR(2, 273, __pyx_L1_error)
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L10_unpacking_done;
        __pyx_L9_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(2, 273, __pyx_L1_error)
        __pyx_L10_unpacking_done:;
      }
      __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 273, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 273, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_8genexpr7__pyx_v_x = __pyx_t_10;
      __pyx_8genexpr7__pyx_v_y = __pyx_t_9;
      __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_positions[__pyx_8genexpr7__pyx_v_x])); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 273, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_positions[__pyx_8genexpr7__pyx_v_y])); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 273, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 273, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
      __pyx_t_6 = 0;
      __pyx_t_7 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 273, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } /* exit inner scope */
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "match.pxi":265
 *         self.regs = tuple(spans)
 * 
 *     cdef list _convert_spans(self, spans,             # <<<<<<<<<<<<<<
 *             char * cstring, int size, int * cpos, int * upos):
 *         cdef map[int, int] positions
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("re2.Match._convert_spans", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":275
 *         return [(positions[x], positions[y]) for x, y in spans]
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         delete_StringPiece_array(self.matches)
 * 
 */

/* Python wrapper */
static void __pyx_pw_3re2_5Match_17__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3re2_5Match_17__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3re2_5Match_16__dealloc__(((struct __pyx_obj_3re2_Match *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3re2_5Match_16__dealloc__(struct __pyx_obj_3re2_Match *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "match.pxi":276
 * 
 *     def __dealloc__(self):
 *         delete_StringPiece_array(self.matches)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  delete[](__pyx_v_self->matches);

  /* "match.pxi":275
 *         return [(positions[x], positions[y]) for x, y in spans]
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         delete_StringPiece_array(self.matches)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "match.pxi":278
 *         delete_StringPiece_array(self.matches)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return '<re2.Match object; span=%r, match=%r>' % (
 *                 self.span(), self.group())
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_5Match_19__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3re2_5Match_19__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_5Match_18__repr__(((struct __pyx_obj_3re2_Match *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_5Match_18__repr__(struct __pyx_obj_3re2_Match *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "match.pxi":279
 * 
 *     def __repr__(self):
 *         return '<re2.Match object; span=%r, match=%r>' % (             # <<<<<<<<<<<<<<
 *                 self.span(), self.group())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_re2_Match_object_span);
  __pyx_t_2 += 24;
  __Pyx_GIVEREF(__pyx_kp_u_re2_Match_object_span);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_re2_Match_object_span);

  /* "match.pxi":280
 *     def __repr__(self):
 *         return '<re2.Match object; span=%r, match=%r>' % (
 *                 self.span(), self.group())             # <<<<<<<<<<<<<<
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_span); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_4), __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u_match_2);
  __pyx_t_2 += 8;
  __Pyx_GIVEREF(__pyx_kp_u_match_2);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_match_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_group); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_5), __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__13);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__13);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__13);

  /* "match.pxi":279
 * 
 *     def __repr__(self):
 *         return '<re2.Match object; span=%r, match=%r>' % (             # <<<<<<<<<<<<<<
 *                 self.span(), self.group())
 */
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "match.pxi":278
 *         delete_StringPiece_array(self.matches)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return '<re2.Match object; span=%r, match=%r>' % (
 *                 self.span(), self.group())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("re2.Match.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":2
 * cdef class Match:
 *     cdef readonly Pattern re             # <<<<<<<<<<<<<<
 *     cdef readonly object string
 *     cdef readonly int pos
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_5Match_2re_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3re2_5Match_2re_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_5Match_2re___get__(((struct __pyx_obj_3re2_Match *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_5Match_2re___get__(struct __pyx_obj_3re2_Match *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->re));
  __pyx_r = ((PyObject *)__pyx_v_self->re);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":3
 * cdef class Match:
 *     cdef readonly Pattern re
 *     cdef readonly object string             # <<<<<<<<<<<<<<
 *     cdef readonly int pos
 *     cdef readonly int endpos
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_5Match_6string_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3re2_5Match_6string_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_5Match_6string___get__(((struct __pyx_obj_3re2_Match *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_5Match_6string___get__(struct __pyx_obj_3re2_Match *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->string);
  __pyx_r = __pyx_v_self->string;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":4
 *     cdef readonly Pattern re
 *     cdef readonly object string
 *     cdef readonly int pos             # <<<<<<<<<<<<<<
 *     cdef readonly int endpos
 *     cdef readonly tuple regs
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_5Match_3pos_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3re2_5Match_3pos_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_5Match_3pos___get__(((struct __pyx_obj_3re2_Match *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_5Match_3pos___get__(struct __pyx_obj_3re2_Match *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Match.pos.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":5
 *     cdef readonly object string
 *     cdef readonly int pos
 *     cdef readonly int endpos             # <<<<<<<<<<<<<<
 *     cdef readonly tuple regs
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_5Match_6endpos_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3re2_5Match_6endpos_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_5Match_6endpos___get__(((struct __pyx_obj_3re2_Match *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_5Match_6endpos___get__(struct __pyx_obj_3re2_Match *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->endpos); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Match.endpos.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "match.pxi":6
 *     cdef readonly int pos
 *     cdef readonly int endpos
 *     cdef readonly tuple regs             # <<<<<<<<<<<<<<
 * 
 *     cdef StringPiece * matches
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_5Match_4regs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3re2_5Match_4regs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_5Match_4regs___get__(((struct __pyx_obj_3re2_Match *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_5Match_4regs___get__(struct __pyx_obj_3re2_Match *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->regs);
  __pyx_r = __pyx_v_self->regs;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.matches cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_5Match_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3re2_5Match_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_5Match_20__reduce_cython__(((struct __pyx_obj_3re2_Match *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_5Match_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3re2_Match *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.matches cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.matches cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(3, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.matches cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Match.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.matches cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.matches cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_5Match_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_3re2_5Match_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_5Match_22__setstate_cython__(((struct __pyx_obj_3re2_Match *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_5Match_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3re2_Match *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.matches cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.matches cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(3, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.matches cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.matches cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.Match.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":150
 * 
 * 
 * def purge():             # <<<<<<<<<<<<<<
 *     """Clear the regular expression caches."""
 *     _cache.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_7purge(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3re2_6purge[] = "Clear the regular expression caches.";
static PyMethodDef __pyx_mdef_3re2_7purge = {"purge", (PyCFunction)__pyx_pw_3re2_7purge, METH_NOARGS, __pyx_doc_3re2_6purge};
static PyObject *__pyx_pw_3re2_7purge(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("purge (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_6purge(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_6purge(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("purge", 0);

  /* "re2.pyx":152
 * def purge():
 *     """Clear the regular expression caches."""
 *     _cache.clear()             # <<<<<<<<<<<<<<
 *     _cache_repl.clear()
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_cache); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_clear); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":153
 *     """Clear the regular expression caches."""
 *     _cache.clear()
 *     _cache_repl.clear()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_cache_repl); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_clear); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":150
 * 
 * 
 * def purge():             # <<<<<<<<<<<<<<
 *     """Clear the regular expression caches."""
 *     _cache.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("re2.purge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":156
 * 
 * 
 * def search(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Scan through string looking for a match to the pattern, returning
 *     a ``Match`` object or none if no match was found."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_9search(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_8search[] = "Scan through string looking for a match to the pattern, returning\n    a ``Match`` object or none if no match was found.";
static PyMethodDef __pyx_mdef_3re2_9search = {"search", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_9search, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_8search};
static PyObject *__pyx_pw_3re2_9search(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("search (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_string,&__pyx_n_s_flags,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("search", 0, 2, 3, 1); __PYX_ERR(4, 156, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "search") < 0)) __PYX_ERR(4, 156, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pattern = values[0];
    __pyx_v_string = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 156, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("search", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 156, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.search", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_8search(__pyx_self, __pyx_v_pattern, __pyx_v_string, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_8search(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("search", 0);

  /* "re2.pyx":159
 *     """Scan through string looking for a match to the pattern, returning
 *     a ``Match`` object or none if no match was found."""
 *     return compile(pattern, flags).search(string)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_compile_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 159, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 159, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_v_pattern);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_search); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_string) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_string);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "re2.pyx":156
 * 
 * 
 * def search(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Scan through string looking for a match to the pattern, returning
 *     a ``Match`` object or none if no match was found."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("re2.search", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":162
 * 
 * 
 * def match(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Try to apply the pattern at the start of the string, returning
 *     a ``Match`` object, or ``None`` if no match was found."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_11match(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_10match[] = "Try to apply the pattern at the start of the string, returning\n    a ``Match`` object, or ``None`` if no match was found.";
static PyMethodDef __pyx_mdef_3re2_11match = {"match", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_11match, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_10match};
static PyObject *__pyx_pw_3re2_11match(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("match (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_string,&__pyx_n_s_flags,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("match", 0, 2, 3, 1); __PYX_ERR(4, 162, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "match") < 0)) __PYX_ERR(4, 162, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pattern = values[0];
    __pyx_v_string = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 162, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("match", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 162, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_10match(__pyx_self, __pyx_v_pattern, __pyx_v_string, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_10match(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("match", 0);

  /* "re2.pyx":165
 *     """Try to apply the pattern at the start of the string, returning
 *     a ``Match`` object, or ``None`` if no match was found."""
 *     return compile(pattern, flags).match(string)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_compile_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 165, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 165, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_v_pattern);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_match); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_string) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_string);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "re2.pyx":162
 * 
 * 
 * def match(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Try to apply the pattern at the start of the string, returning
 *     a ``Match`` object, or ``None`` if no match was found."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("re2.match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":168
 * 
 * 
 * def fullmatch(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Try to apply the pattern to the entire string, returning
 *     a ``Match`` object, or ``None`` if no match was found."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_13fullmatch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_12fullmatch[] = "Try to apply the pattern to the entire string, returning\n    a ``Match`` object, or ``None`` if no match was found.";
static PyMethodDef __pyx_mdef_3re2_13fullmatch = {"fullmatch", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_13fullmatch, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_12fullmatch};
static PyObject *__pyx_pw_3re2_13fullmatch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fullmatch (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_string,&__pyx_n_s_flags,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fullmatch", 0, 2, 3, 1); __PYX_ERR(4, 168, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fullmatch") < 0)) __PYX_ERR(4, 168, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pattern = values[0];
    __pyx_v_string = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 168, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fullmatch", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 168, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.fullmatch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_12fullmatch(__pyx_self, __pyx_v_pattern, __pyx_v_string, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_12fullmatch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fullmatch", 0);

  /* "re2.pyx":171
 *     """Try to apply the pattern to the entire string, returning
 *     a ``Match`` object, or ``None`` if no match was found."""
 *     return compile(pattern, flags).fullmatch(string)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_compile_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 171, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 171, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_v_pattern);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_fullmatch); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_string) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_string);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "re2.pyx":168
 * 
 * 
 * def fullmatch(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Try to apply the pattern to the entire string, returning
 *     a ``Match`` object, or ``None`` if no match was found."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("re2.fullmatch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":174
 * 
 * 
 * def contains(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Scan through string looking for a match to the pattern, returning
 *     True or False."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_15contains(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_14contains[] = "Scan through string looking for a match to the pattern, returning\n    True or False.";
static PyMethodDef __pyx_mdef_3re2_15contains = {"contains", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_15contains, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_14contains};
static PyObject *__pyx_pw_3re2_15contains(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("contains (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_string,&__pyx_n_s_flags,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("contains", 0, 2, 3, 1); __PYX_ERR(4, 174, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "contains") < 0)) __PYX_ERR(4, 174, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pattern = values[0];
    __pyx_v_string = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 174, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("contains", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 174, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.contains", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_14contains(__pyx_self, __pyx_v_pattern, __pyx_v_string, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_14contains(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("contains", 0);

  /* "re2.pyx":177
 *     """Scan through string looking for a match to the pattern, returning
 *     True or False."""
 *     return compile(pattern, flags).contains(string)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_compile_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 177, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 177, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_v_pattern);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_contains); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_string) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_string);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "re2.pyx":174
 * 
 * 
 * def contains(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Scan through string looking for a match to the pattern, returning
 *     True or False."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("re2.contains", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":180
 * 
 * 
 * def finditer(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Yield all non-overlapping matches in the string.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_17finditer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_16finditer[] = "Yield all non-overlapping matches in the string.\n\n    For each match, the iterator returns a ``Match`` object.\n    Empty matches are included in the result.";
static PyMethodDef __pyx_mdef_3re2_17finditer = {"finditer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_17finditer, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_16finditer};
static PyObject *__pyx_pw_3re2_17finditer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("finditer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_string,&__pyx_n_s_flags,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("finditer", 0, 2, 3, 1); __PYX_ERR(4, 180, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "finditer") < 0)) __PYX_ERR(4, 180, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pattern = values[0];
    __pyx_v_string = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 180, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("finditer", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 180, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.finditer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_16finditer(__pyx_self, __pyx_v_pattern, __pyx_v_string, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_16finditer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("finditer", 0);

  /* "re2.pyx":185
 *     For each match, the iterator returns a ``Match`` object.
 *     Empty matches are included in the result."""
 *     return compile(pattern, flags).finditer(string)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_compile_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 185, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 185, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_v_pattern);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_finditer_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_string) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_string);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "re2.pyx":180
 * 
 * 
 * def finditer(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Yield all non-overlapping matches in the string.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("re2.finditer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":188
 * 
 * 
 * def findall(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Return a list of all non-overlapping matches in the string.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_19findall(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_18findall[] = "Return a list of all non-overlapping matches in the string.\n\n    Each match is represented as a string or a tuple (when there are two ore\n    more groups). Empty matches are included in the result.";
static PyMethodDef __pyx_mdef_3re2_19findall = {"findall", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_19findall, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_18findall};
static PyObject *__pyx_pw_3re2_19findall(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("findall (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_string,&__pyx_n_s_flags,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("findall", 0, 2, 3, 1); __PYX_ERR(4, 188, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "findall") < 0)) __PYX_ERR(4, 188, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pattern = values[0];
    __pyx_v_string = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 188, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findall", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 188, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.findall", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_18findall(__pyx_self, __pyx_v_pattern, __pyx_v_string, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_18findall(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("findall", 0);

  /* "re2.pyx":193
 *     Each match is represented as a string or a tuple (when there are two ore
 *     more groups). Empty matches are included in the result."""
 *     return compile(pattern, flags).findall(string)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_compile_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 193, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 193, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_v_pattern);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_findall); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_string) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_string);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "re2.pyx":188
 * 
 * 
 * def findall(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Return a list of all non-overlapping matches in the string.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("re2.findall", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":196
 * 
 * 
 * def count(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Return number of non-overlapping matches in the string.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_21count(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_20count[] = "Return number of non-overlapping matches in the string.\n\n    Empty matches are included in the count.";
static PyMethodDef __pyx_mdef_3re2_21count = {"count", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_21count, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_20count};
static PyObject *__pyx_pw_3re2_21count(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_string,&__pyx_n_s_flags,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("count", 0, 2, 3, 1); __PYX_ERR(4, 196, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "count") < 0)) __PYX_ERR(4, 196, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pattern = values[0];
    __pyx_v_string = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 196, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("count", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 196, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_20count(__pyx_self, __pyx_v_pattern, __pyx_v_string, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_20count(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count", 0);

  /* "re2.pyx":200
 * 
 *     Empty matches are included in the count."""
 *     return compile(pattern, flags).count(string)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_compile_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 200, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 200, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_v_pattern);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_count); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_string) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_string);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "re2.pyx":196
 * 
 * 
 * def count(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Return number of non-overlapping matches in the string.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("re2.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":203
 * 
 * 
 * def split(pattern, string, int maxsplit=0, int flags=0):             # <<<<<<<<<<<<<<
 *     """Split the source string by the occurrences of the pattern,
 *     returning a list containing the resulting substrings."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_23split(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_22split[] = "Split the source string by the occurrences of the pattern,\n    returning a list containing the resulting substrings.";
static PyMethodDef __pyx_mdef_3re2_23split = {"split", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_23split, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_22split};
static PyObject *__pyx_pw_3re2_23split(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_maxsplit;
  int __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("split (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_string,&__pyx_n_s_maxsplit,&__pyx_n_s_flags,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("split", 0, 2, 4, 1); __PYX_ERR(4, 203, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxsplit);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "split") < 0)) __PYX_ERR(4, 203, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pattern = values[0];
    __pyx_v_string = values[1];
    if (values[2]) {
      __pyx_v_maxsplit = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_maxsplit == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 203, __pyx_L3_error)
    } else {
      __pyx_v_maxsplit = ((int)0);
    }
    if (values[3]) {
      __pyx_v_flags = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 203, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("split", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 203, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_22split(__pyx_self, __pyx_v_pattern, __pyx_v_string, __pyx_v_maxsplit, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_22split(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_maxsplit, int __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("split", 0);

  /* "re2.pyx":206
 *     """Split the source string by the occurrences of the pattern,
 *     returning a list containing the resulting substrings."""
 *     return compile(pattern, flags).split(string, maxsplit)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_compile_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 206, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 206, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_v_pattern);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_maxsplit); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_string, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 206, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_string, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 206, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_string);
    __Pyx_GIVEREF(__pyx_v_string);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_v_string);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "re2.pyx":203
 * 
 * 
 * def split(pattern, string, int maxsplit=0, int flags=0):             # <<<<<<<<<<<<<<
 *     """Split the source string by the occurrences of the pattern,
 *     returning a list containing the resulting substrings."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("re2.split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":209
 * 
 * 
 * def sub(pattern, repl, string, int count=0, int flags=0):             # <<<<<<<<<<<<<<
 *     """Return the string obtained by replacing the leftmost
 *     non-overlapping occurrences of the pattern in string by the
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_25sub(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_24sub[] = "Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement ``repl``. ``repl`` can be either a string or a callable;\n    if a string, backslash escapes in it are processed. If it is\n    a callable, it's passed the ``Match`` object and must return\n    a replacement string to be used.";
static PyMethodDef __pyx_mdef_3re2_25sub = {"sub", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_25sub, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_24sub};
static PyObject *__pyx_pw_3re2_25sub(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  PyObject *__pyx_v_repl = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_count;
  int __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sub (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_repl,&__pyx_n_s_string,&__pyx_n_s_count,&__pyx_n_s_flags,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_repl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sub", 0, 3, 5, 1); __PYX_ERR(4, 209, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sub", 0, 3, 5, 2); __PYX_ERR(4, 209, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_count);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sub") < 0)) __PYX_ERR(4, 209, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pattern = values[0];
    __pyx_v_repl = values[1];
    __pyx_v_string = values[2];
    if (values[3]) {
      __pyx_v_count = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 209, __pyx_L3_error)
    } else {
      __pyx_v_count = ((int)0);
    }
    if (values[4]) {
      __pyx_v_flags = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 209, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sub", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 209, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_24sub(__pyx_self, __pyx_v_pattern, __pyx_v_repl, __pyx_v_string, __pyx_v_count, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_24sub(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, int __pyx_v_count, int __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sub", 0);

  /* "re2.pyx":216
 *     a callable, it's passed the ``Match`` object and must return
 *     a replacement string to be used."""
 *     return compile(pattern, flags).sub(repl, string, count)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_compile_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 216, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 216, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_v_pattern);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sub); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_count); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_repl, __pyx_v_string, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 216, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_repl, __pyx_v_string, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 216, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_repl);
    __Pyx_GIVEREF(__pyx_v_repl);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_v_repl);
    __Pyx_INCREF(__pyx_v_string);
    __Pyx_GIVEREF(__pyx_v_string);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_v_string);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_6, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "re2.pyx":209
 * 
 * 
 * def sub(pattern, repl, string, int count=0, int flags=0):             # <<<<<<<<<<<<<<
 *     """Return the string obtained by replacing the leftmost
 *     non-overlapping occurrences of the pattern in string by the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("re2.sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":219
 * 
 * 
 * def subn(pattern, repl, string, int count=0, int flags=0):             # <<<<<<<<<<<<<<
 *     """Return a 2-tuple containing ``(new_string, number)``.
 *     new_string is the string obtained by replacing the leftmost
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_27subn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3re2_26subn[] = "Return a 2-tuple containing ``(new_string, number)``.\n    new_string is the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in the source\n    string by the replacement ``repl``. ``number`` is the number of\n    substitutions that were made. ``repl`` can be either a string or a\n    callable; if a string, backslash escapes in it are processed.\n    If it is a callable, it's passed the ``Match`` object and must\n    return a replacement string to be used.";
static PyMethodDef __pyx_mdef_3re2_27subn = {"subn", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_27subn, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_26subn};
static PyObject *__pyx_pw_3re2_27subn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0;
  PyObject *__pyx_v_repl = 0;
  PyObject *__pyx_v_string = 0;
  int __pyx_v_count;
  int __pyx_v_flags;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("subn (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_repl,&__pyx_n_s_string,&__pyx_n_s_count,&__pyx_n_s_flags,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_repl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("subn", 0, 3, 5, 1); __PYX_ERR(4, 219, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("subn", 0, 3, 5, 2); __PYX_ERR(4, 219, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_count);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "subn") < 0)) __PYX_ERR(4, 219, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pattern = values[0];
    __pyx_v_repl = values[1];
    __pyx_v_string = values[2];
    if (values[3]) {
      __pyx_v_count = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 219, __pyx_L3_error)
    } else {
      __pyx_v_count = ((int)0);
    }
    if (values[4]) {
      __pyx_v_flags = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 219, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("subn", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 219, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("re2.subn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3re2_26subn(__pyx_self, __pyx_v_pattern, __pyx_v_repl, __pyx_v_string, __pyx_v_count, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_26subn(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, int __pyx_v_count, int __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("subn", 0);

  /* "re2.pyx":228
 *     If it is a callable, it's passed the ``Match`` object and must
 *     return a replacement string to be used."""
 *     return compile(pattern, flags).subn(repl, string, count)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_compile_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 228, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 228, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_v_pattern);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_pattern);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_subn); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_count); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_repl, __pyx_v_string, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 228, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_repl, __pyx_v_string, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 228, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_repl);
    __Pyx_GIVEREF(__pyx_v_repl);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_v_repl);
    __Pyx_INCREF(__pyx_v_string);
    __Pyx_GIVEREF(__pyx_v_string);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_v_string);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_6, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "re2.pyx":219
 * 
 * 
 * def subn(pattern, repl, string, int count=0, int flags=0):             # <<<<<<<<<<<<<<
 *     """Return a 2-tuple containing ``(new_string, number)``.
 *     new_string is the string obtained by replacing the leftmost
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("re2.subn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":231
 * 
 * 
 * def escape(pattern):             # <<<<<<<<<<<<<<
 *     """Escape all non-alphanumeric characters in pattern."""
 *     cdef bint uni = isinstance(pattern, unicode)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_29escape(PyObject *__pyx_self, PyObject *__pyx_v_pattern); /*proto*/
static char __pyx_doc_3re2_28escape[] = "Escape all non-alphanumeric characters in pattern.";
static PyMethodDef __pyx_mdef_3re2_29escape = {"escape", (PyCFunction)__pyx_pw_3re2_29escape, METH_O, __pyx_doc_3re2_28escape};
static PyObject *__pyx_pw_3re2_29escape(PyObject *__pyx_self, PyObject *__pyx_v_pattern) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("escape (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_28escape(__pyx_self, ((PyObject *)__pyx_v_pattern));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_28escape(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern) {
  int __pyx_v_uni;
  PyObject *__pyx_v_s = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_8genexpr8__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  long __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("escape", 0);

  /* "re2.pyx":233
 * def escape(pattern):
 *     """Escape all non-alphanumeric characters in pattern."""
 *     cdef bint uni = isinstance(pattern, unicode)             # <<<<<<<<<<<<<<
 *     cdef list s
 *     if PY2 or uni:
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_pattern); 
  __pyx_v_uni = __pyx_t_1;

  /* "re2.pyx":235
 *     cdef bint uni = isinstance(pattern, unicode)
 *     cdef list s
 *     if PY2 or uni:             # <<<<<<<<<<<<<<
 *         s = list(pattern)
 *     else:
 */
  __pyx_t_2 = (PY2 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_uni != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "re2.pyx":236
 *     cdef list s
 *     if PY2 or uni:
 *         s = list(pattern)             # <<<<<<<<<<<<<<
 *     else:
 *         s = [bytes([c]) for c in pattern]
 */
    __pyx_t_3 = PySequence_List(__pyx_v_pattern); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_s = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "re2.pyx":235
 *     cdef bint uni = isinstance(pattern, unicode)
 *     cdef list s
 *     if PY2 or uni:             # <<<<<<<<<<<<<<
 *         s = list(pattern)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "re2.pyx":238
 *         s = list(pattern)
 *     else:
 *         s = [bytes([c]) for c in pattern]             # <<<<<<<<<<<<<<
 *     for i in range(len(pattern)):
 *         # c = pattern[i]
 */
  /*else*/ {
    { /* enter inner scope */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 238, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_v_pattern)) || PyTuple_CheckExact(__pyx_v_pattern)) {
        __pyx_t_4 = __pyx_v_pattern; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
        __pyx_t_6 = NULL;
      } else {
        __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_pattern); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 238, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 238, __pyx_L8_error)
      }
      for (;;) {
        if (likely(!__pyx_t_6)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(4, 238, __pyx_L8_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 238, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(4, 238, __pyx_L8_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 238, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_6(__pyx_t_4);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(4, 238, __pyx_L8_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr8__pyx_v_c, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 238, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_8genexpr8__pyx_v_c);
        __Pyx_GIVEREF(__pyx_8genexpr8__pyx_v_c);
        PyList_SET_ITEM(__pyx_t_7, 0, __pyx_8genexpr8__pyx_v_c);
        __pyx_t_8 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 238, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_8))) __PYX_ERR(4, 238, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_c); __pyx_8genexpr8__pyx_v_c = 0;
      goto __pyx_L11_exit_scope;
      __pyx_L8_error:;
      __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_c); __pyx_8genexpr8__pyx_v_c = 0;
      goto __pyx_L1_error;
      __pyx_L11_exit_scope:;
    } /* exit inner scope */
    __pyx_v_s = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "re2.pyx":239
 *     else:
 *         s = [bytes([c]) for c in pattern]
 *     for i in range(len(pattern)):             # <<<<<<<<<<<<<<
 *         # c = pattern[i]
 *         c = s[i]
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_pattern); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(4, 239, __pyx_L1_error)
  __pyx_t_9 = __pyx_t_5;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "re2.pyx":241
 *     for i in range(len(pattern)):
 *         # c = pattern[i]
 *         c = s[i]             # <<<<<<<<<<<<<<
 *         if ord(c) < 0x80 and not c.isalnum():
 *             if uni:
 */
    __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_s, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "re2.pyx":242
 *         # c = pattern[i]
 *         c = s[i]
 *         if ord(c) < 0x80 and not c.isalnum():             # <<<<<<<<<<<<<<
 *             if uni:
 *                 if c == u'\000':
 */
    __pyx_t_11 = __Pyx_PyObject_Ord(__pyx_v_c); if (unlikely(__pyx_t_11 == ((long)(long)(Py_UCS4)-1))) __PYX_ERR(4, 242, __pyx_L1_error)
    __pyx_t_2 = ((__pyx_t_11 < 0x80) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L15_bool_binop_done;
    }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_c, __pyx_n_s_isalnum); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(4, 242, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_12 = ((!__pyx_t_2) != 0);
    __pyx_t_1 = __pyx_t_12;
    __pyx_L15_bool_binop_done:;
    if (__pyx_t_1) {

      /* "re2.pyx":243
 *         c = s[i]
 *         if ord(c) < 0x80 and not c.isalnum():
 *             if uni:             # <<<<<<<<<<<<<<
 *                 if c == u'\000':
 *                     s[i] = u'\\000'
 */
      __pyx_t_1 = (__pyx_v_uni != 0);
      if (__pyx_t_1) {

        /* "re2.pyx":244
 *         if ord(c) < 0x80 and not c.isalnum():
 *             if uni:
 *                 if c == u'\000':             # <<<<<<<<<<<<<<
 *                     s[i] = u'\\000'
 *                 else:
 */
        __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_c, __pyx_kp_u__16, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(4, 244, __pyx_L1_error)
        if (__pyx_t_1) {

          /* "re2.pyx":245
 *             if uni:
 *                 if c == u'\000':
 *                     s[i] = u'\\000'             # <<<<<<<<<<<<<<
 *                 else:
 *                     s[i] = u"\\" + c
 */
          if (unlikely(__Pyx_SetItemInt(__pyx_v_s, __pyx_v_i, __pyx_kp_u_000, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1) < 0)) __PYX_ERR(4, 245, __pyx_L1_error)

          /* "re2.pyx":244
 *         if ord(c) < 0x80 and not c.isalnum():
 *             if uni:
 *                 if c == u'\000':             # <<<<<<<<<<<<<<
 *                     s[i] = u'\\000'
 *                 else:
 */
          goto __pyx_L18;
        }

        /* "re2.pyx":247
 *                     s[i] = u'\\000'
 *                 else:
 *                     s[i] = u"\\" + c             # <<<<<<<<<<<<<<
 *             else:
 *                 if c == b'\000':
 */
        /*else*/ {
          __pyx_t_3 = PyNumber_Add(__pyx_kp_u__8, __pyx_v_c); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 247, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_SetItemInt(__pyx_v_s, __pyx_v_i, __pyx_t_3, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1) < 0)) __PYX_ERR(4, 247, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_L18:;

        /* "re2.pyx":243
 *         c = s[i]
 *         if ord(c) < 0x80 and not c.isalnum():
 *             if uni:             # <<<<<<<<<<<<<<
 *                 if c == u'\000':
 *                     s[i] = u'\\000'
 */
        goto __pyx_L17;
      }

      /* "re2.pyx":249
 *                     s[i] = u"\\" + c
 *             else:
 *                 if c == b'\000':             # <<<<<<<<<<<<<<
 *                     s[i] = b'\\000'
 *                 else:
 */
      /*else*/ {
        __pyx_t_1 = (__Pyx_PyBytes_Equals(__pyx_v_c, __pyx_kp_b__16, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(4, 249, __pyx_L1_error)
        if (__pyx_t_1) {

          /* "re2.pyx":250
 *             else:
 *                 if c == b'\000':
 *                     s[i] = b'\\000'             # <<<<<<<<<<<<<<
 *                 else:
 *                     s[i] = b'\\' + c
 */
          if (unlikely(__Pyx_SetItemInt(__pyx_v_s, __pyx_v_i, __pyx_kp_b_000, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1) < 0)) __PYX_ERR(4, 250, __pyx_L1_error)

          /* "re2.pyx":249
 *                     s[i] = u"\\" + c
 *             else:
 *                 if c == b'\000':             # <<<<<<<<<<<<<<
 *                     s[i] = b'\\000'
 *                 else:
 */
          goto __pyx_L19;
        }

        /* "re2.pyx":252
 *                     s[i] = b'\\000'
 *                 else:
 *                     s[i] = b'\\' + c             # <<<<<<<<<<<<<<
 *     return u''.join(s) if uni else b''.join(s)
 * 
 */
        /*else*/ {
          __pyx_t_3 = PyNumber_Add(__pyx_kp_b__8, __pyx_v_c); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 252, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_SetItemInt(__pyx_v_s, __pyx_v_i, __pyx_t_3, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1) < 0)) __PYX_ERR(4, 252, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_L19:;
      }
      __pyx_L17:;

      /* "re2.pyx":242
 *         # c = pattern[i]
 *         c = s[i]
 *         if ord(c) < 0x80 and not c.isalnum():             # <<<<<<<<<<<<<<
 *             if uni:
 *                 if c == u'\000':
 */
    }
  }

  /* "re2.pyx":253
 *                 else:
 *                     s[i] = b'\\' + c
 *     return u''.join(s) if uni else b''.join(s)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if ((__pyx_v_uni != 0)) {
    __pyx_t_4 = PyUnicode_Join(__pyx_kp_u__7, __pyx_v_s); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyBytes_Join(__pyx_kp_b__7, __pyx_v_s); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "re2.pyx":231
 * 
 * 
 * def escape(pattern):             # <<<<<<<<<<<<<<
 *     """Escape all non-alphanumeric characters in pattern."""
 *     cdef bint uni = isinstance(pattern, unicode)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("re2.escape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":266
 * 
 * 
 * def set_fallback_notification(level):             # <<<<<<<<<<<<<<
 *     """Set the fallback notification to a level; one of:
 *         FALLBACK_QUIETLY
 */

/* Python wrapper */
static PyObject *__pyx_pw_3re2_31set_fallback_notification(PyObject *__pyx_self, PyObject *__pyx_v_level); /*proto*/
static char __pyx_doc_3re2_30set_fallback_notification[] = "Set the fallback notification to a level; one of:\n        FALLBACK_QUIETLY\n        FALLBACK_WARNING\n        FALLBACK_EXCEPTION\n    ";
static PyMethodDef __pyx_mdef_3re2_31set_fallback_notification = {"set_fallback_notification", (PyCFunction)__pyx_pw_3re2_31set_fallback_notification, METH_O, __pyx_doc_3re2_30set_fallback_notification};
static PyObject *__pyx_pw_3re2_31set_fallback_notification(PyObject *__pyx_self, PyObject *__pyx_v_level) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_fallback_notification (wrapper)", 0);
  __pyx_r = __pyx_pf_3re2_30set_fallback_notification(__pyx_self, ((PyObject *)__pyx_v_level));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3re2_30set_fallback_notification(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_level) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_fallback_notification", 0);
  __Pyx_INCREF(__pyx_v_level);

  /* "re2.pyx":273
 *     """
 *     global current_notification
 *     level = int(level)             # <<<<<<<<<<<<<<
 *     if level < 0 or level > 2:
 *         raise ValueError("This function expects a valid notification level.")
 */
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_v_level); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_level, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "re2.pyx":274
 *     global current_notification
 *     level = int(level)
 *     if level < 0 or level > 2:             # <<<<<<<<<<<<<<
 *         raise ValueError("This function expects a valid notification level.")
 *     current_notification = level
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_level, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 274, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(4, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_level, __pyx_int_2, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 274, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(4, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_2)) {

    /* "re2.pyx":275
 *     level = int(level)
 *     if level < 0 or level > 2:
 *         raise ValueError("This function expects a valid notification level.")             # <<<<<<<<<<<<<<
 *     current_notification = level
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(4, 275, __pyx_L1_error)

    /* "re2.pyx":274
 *     global current_notification
 *     level = int(level)
 *     if level < 0 or level > 2:             # <<<<<<<<<<<<<<
 *         raise ValueError("This function expects a valid notification level.")
 *     current_notification = level
 */
  }

  /* "re2.pyx":276
 *     if level < 0 or level > 2:
 *         raise ValueError("This function expects a valid notification level.")
 *     current_notification = level             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_level); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 276, __pyx_L1_error)
  __pyx_v_3re2_current_notification = __pyx_t_4;

  /* "re2.pyx":266
 * 
 * 
 * def set_fallback_notification(level):             # <<<<<<<<<<<<<<
 *     """Set the fallback notification to a level; one of:
 *         FALLBACK_QUIETLY
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.set_fallback_notification", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_level);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":279
 * 
 * 
 * cdef bint ishex(unsigned char c):             # <<<<<<<<<<<<<<
 *     """Test whether ``c`` is in ``[0-9a-fA-F]``"""
 *     return (b'0' <= c <= b'9' or b'a' <= c <= b'f' or b'A' <= c <= b'F')
 */

static int __pyx_f_3re2_ishex(unsigned char __pyx_v_c) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("ishex", 0);

  /* "re2.pyx":281
 * cdef bint ishex(unsigned char c):
 *     """Test whether ``c`` is in ``[0-9a-fA-F]``"""
 *     return (b'0' <= c <= b'9' or b'a' <= c <= b'f' or b'A' <= c <= b'F')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ('0' <= __pyx_v_c);
  if (__pyx_t_2) {
    __pyx_t_2 = (__pyx_v_c <= '9');
  }
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_3 = ('a' <= __pyx_v_c);
  if (__pyx_t_3) {
    __pyx_t_3 = (__pyx_v_c <= 'f');
  }
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = ('A' <= __pyx_v_c);
  if (__pyx_t_2) {
    __pyx_t_2 = (__pyx_v_c <= 'F');
  }
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "re2.pyx":279
 * 
 * 
 * cdef bint ishex(unsigned char c):             # <<<<<<<<<<<<<<
 *     """Test whether ``c`` is in ``[0-9a-fA-F]``"""
 *     return (b'0' <= c <= b'9' or b'a' <= c <= b'f' or b'A' <= c <= b'F')
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":284
 * 
 * 
 * cdef bint isoct(unsigned char c):             # <<<<<<<<<<<<<<
 *     """Test whether ``c`` is in ``[0-7]``"""
 *     return b'0' <= c <= b'7'
 */

static int __pyx_f_3re2_isoct(unsigned char __pyx_v_c) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("isoct", 0);

  /* "re2.pyx":286
 * cdef bint isoct(unsigned char c):
 *     """Test whether ``c`` is in ``[0-7]``"""
 *     return b'0' <= c <= b'7'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ('0' <= __pyx_v_c);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_c <= '7');
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "re2.pyx":284
 * 
 * 
 * cdef bint isoct(unsigned char c):             # <<<<<<<<<<<<<<
 *     """Test whether ``c`` is in ``[0-7]``"""
 *     return b'0' <= c <= b'7'
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":289
 * 
 * 
 * cdef bint isdigit(unsigned char c):             # <<<<<<<<<<<<<<
 *     """Test whether ``c`` is in ``[0-9]``"""
 *     return b'0' <= c <= b'9'
 */

static int __pyx_f_3re2_isdigit(unsigned char __pyx_v_c) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("isdigit", 0);

  /* "re2.pyx":291
 * cdef bint isdigit(unsigned char c):
 *     """Test whether ``c`` is in ``[0-9]``"""
 *     return b'0' <= c <= b'9'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ('0' <= __pyx_v_c);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_c <= '9');
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "re2.pyx":289
 * 
 * 
 * cdef bint isdigit(unsigned char c):             # <<<<<<<<<<<<<<
 *     """Test whether ``c`` is in ``[0-9]``"""
 *     return b'0' <= c <= b'9'
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":294
 * 
 * 
 * cdef bint isident(unsigned char c):             # <<<<<<<<<<<<<<
 *     """Test whether ``c`` is in ``[a-zA-Z0-9_]``"""
 *     return (b'a' <= c <= b'z' or b'A' <= c <= b'Z'
 */

static int __pyx_f_3re2_isident(unsigned char __pyx_v_c) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("isident", 0);

  /* "re2.pyx":296
 * cdef bint isident(unsigned char c):
 *     """Test whether ``c`` is in ``[a-zA-Z0-9_]``"""
 *     return (b'a' <= c <= b'z' or b'A' <= c <= b'Z'             # <<<<<<<<<<<<<<
 *         or b'0' <= c <= b'9' or c == b'_')
 * 
 */
  __pyx_t_2 = ('a' <= __pyx_v_c);
  if (__pyx_t_2) {
    __pyx_t_2 = (__pyx_v_c <= 'z');
  }
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L3_bool_binop_done;
  }

  /* "re2.pyx":297
 *     """Test whether ``c`` is in ``[a-zA-Z0-9_]``"""
 *     return (b'a' <= c <= b'z' or b'A' <= c <= b'Z'
 *         or b'0' <= c <= b'9' or c == b'_')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = ('A' <= __pyx_v_c);
  if (__pyx_t_3) {

    /* "re2.pyx":296
 * cdef bint isident(unsigned char c):
 *     """Test whether ``c`` is in ``[a-zA-Z0-9_]``"""
 *     return (b'a' <= c <= b'z' or b'A' <= c <= b'Z'             # <<<<<<<<<<<<<<
 *         or b'0' <= c <= b'9' or c == b'_')
 * 
 */
    __pyx_t_3 = (__pyx_v_c <= 'Z');
  }
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }

  /* "re2.pyx":297
 *     """Test whether ``c`` is in ``[a-zA-Z0-9_]``"""
 *     return (b'a' <= c <= b'z' or b'A' <= c <= b'Z'
 *         or b'0' <= c <= b'9' or c == b'_')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ('0' <= __pyx_v_c);
  if (__pyx_t_2) {
    __pyx_t_2 = (__pyx_v_c <= '9');
  }
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_c == '_') != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "re2.pyx":294
 * 
 * 
 * cdef bint isident(unsigned char c):             # <<<<<<<<<<<<<<
 *     """Test whether ``c`` is in ``[a-zA-Z0-9_]``"""
 *     return (b'a' <= c <= b'z' or b'A' <= c <= b'Z'
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":300
 * 
 * 
 * cdef inline bytes cpp_to_bytes(cpp_string input):             # <<<<<<<<<<<<<<
 *     """Convert from a std::string object to a python string."""
 *     # By taking the slice we go to the right size,
 */

static CYTHON_INLINE PyObject *__pyx_f_3re2_cpp_to_bytes(std::string __pyx_v_input) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cpp_to_bytes", 0);

  /* "re2.pyx":304
 *     # By taking the slice we go to the right size,
 *     # despite spurious or missing null characters.
 *     return input.data()[:input.length()]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_input.data() + 0, __pyx_v_input.length() - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "re2.pyx":300
 * 
 * 
 * cdef inline bytes cpp_to_bytes(cpp_string input):             # <<<<<<<<<<<<<<
 *     """Convert from a std::string object to a python string."""
 *     # By taking the slice we go to the right size,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.cpp_to_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":307
 * 
 * 
 * cdef inline unicode cpp_to_unicode(cpp_string input):             # <<<<<<<<<<<<<<
 *     """Convert a std::string object to a unicode string."""
 *     return cpython.unicode.PyUnicode_DecodeUTF8(
 */

static CYTHON_INLINE PyObject *__pyx_f_3re2_cpp_to_unicode(std::string __pyx_v_input) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cpp_to_unicode", 0);

  /* "re2.pyx":309
 * cdef inline unicode cpp_to_unicode(cpp_string input):
 *     """Convert a std::string object to a unicode string."""
 *     return cpython.unicode.PyUnicode_DecodeUTF8(             # <<<<<<<<<<<<<<
 *             input.data(), input.length(), 'strict')
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "re2.pyx":310
 *     """Convert a std::string object to a unicode string."""
 *     return cpython.unicode.PyUnicode_DecodeUTF8(
 *             input.data(), input.length(), 'strict')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyUnicode_DecodeUTF8(__pyx_v_input.data(), __pyx_v_input.length(), ((char *)"strict")); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "re2.pyx":307
 * 
 * 
 * cdef inline unicode cpp_to_unicode(cpp_string input):             # <<<<<<<<<<<<<<
 *     """Convert a std::string object to a unicode string."""
 *     return cpython.unicode.PyUnicode_DecodeUTF8(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.cpp_to_unicode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":313
 * 
 * 
 * cdef inline unicode char_to_unicode(const char * input, int length):             # <<<<<<<<<<<<<<
 *     """Convert a C string to a unicode string."""
 *     return cpython.unicode.PyUnicode_DecodeUTF8(input, length, 'strict')
 */

static CYTHON_INLINE PyObject *__pyx_f_3re2_char_to_unicode(char const *__pyx_v_input, int __pyx_v_length) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("char_to_unicode", 0);

  /* "re2.pyx":315
 * cdef inline unicode char_to_unicode(const char * input, int length):
 *     """Convert a C string to a unicode string."""
 *     return cpython.unicode.PyUnicode_DecodeUTF8(input, length, 'strict')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyUnicode_DecodeUTF8(__pyx_v_input, __pyx_v_length, ((char *)"strict")); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "re2.pyx":313
 * 
 * 
 * cdef inline unicode char_to_unicode(const char * input, int length):             # <<<<<<<<<<<<<<
 *     """Convert a C string to a unicode string."""
 *     return cpython.unicode.PyUnicode_DecodeUTF8(input, length, 'strict')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("re2.char_to_unicode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":318
 * 
 * 
 * cdef inline unicode_to_bytes(object pystring, int * encoded,             # <<<<<<<<<<<<<<
 *         int checkotherencoding):
 *     """Convert a unicode string to a utf8 bytes object, if necessary.
 */

static CYTHON_INLINE PyObject *__pyx_f_3re2_unicode_to_bytes(PyObject *__pyx_v_pystring, int *__pyx_v_encoded, int __pyx_v_checkotherencoding) {
  Py_ssize_t __pyx_v_origlen;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unicode_to_bytes", 0);
  __Pyx_INCREF(__pyx_v_pystring);

  /* "re2.pyx":327
 *     encoded is set to 1 if encoded string can be treated as ASCII,
 *     and 2 if it contains multibyte unicode characters."""
 *     if cpython.unicode.PyUnicode_Check(pystring):             # <<<<<<<<<<<<<<
 *         origlen = len(pystring)
 *         pystring = pystring.encode('utf8')
 */
  __pyx_t_1 = (PyUnicode_Check(__pyx_v_pystring) != 0);
  if (__pyx_t_1) {

    /* "re2.pyx":328
 *     and 2 if it contains multibyte unicode characters."""
 *     if cpython.unicode.PyUnicode_Check(pystring):
 *         origlen = len(pystring)             # <<<<<<<<<<<<<<
 *         pystring = pystring.encode('utf8')
 *         encoded[0] = 1 if origlen == len(pystring) else 2
 */
    __pyx_t_2 = PyObject_Length(__pyx_v_pystring); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(4, 328, __pyx_L1_error)
    __pyx_v_origlen = __pyx_t_2;

    /* "re2.pyx":329
 *     if cpython.unicode.PyUnicode_Check(pystring):
 *         origlen = len(pystring)
 *         pystring = pystring.encode('utf8')             # <<<<<<<<<<<<<<
 *         encoded[0] = 1 if origlen == len(pystring) else 2
 *     else:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_pystring, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_n_u_utf8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_u_utf8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_pystring, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "re2.pyx":330
 *         origlen = len(pystring)
 *         pystring = pystring.encode('utf8')
 *         encoded[0] = 1 if origlen == len(pystring) else 2             # <<<<<<<<<<<<<<
 *     else:
 *         encoded[0] = 0
 */
    __pyx_t_2 = PyObject_Length(__pyx_v_pystring); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(4, 330, __pyx_L1_error)
    if (((__pyx_v_origlen == __pyx_t_2) != 0)) {
      __pyx_t_6 = 1;
    } else {
      __pyx_t_6 = 2;
    }
    (__pyx_v_encoded[0]) = __pyx_t_6;

    /* "re2.pyx":327
 *     encoded is set to 1 if encoded string can be treated as ASCII,
 *     and 2 if it contains multibyte unicode characters."""
 *     if cpython.unicode.PyUnicode_Check(pystring):             # <<<<<<<<<<<<<<
 *         origlen = len(pystring)
 *         pystring = pystring.encode('utf8')
 */
    goto __pyx_L3;
  }

  /* "re2.pyx":332
 *         encoded[0] = 1 if origlen == len(pystring) else 2
 *     else:
 *         encoded[0] = 0             # <<<<<<<<<<<<<<
 *     if not PY2 and checkotherencoding > 0 and not encoded[0]:
 *         raise TypeError("can't use a string pattern on a bytes-like object")
 */
  /*else*/ {
    (__pyx_v_encoded[0]) = 0;
  }
  __pyx_L3:;

  /* "re2.pyx":333
 *     else:
 *         encoded[0] = 0
 *     if not PY2 and checkotherencoding > 0 and not encoded[0]:             # <<<<<<<<<<<<<<
 *         raise TypeError("can't use a string pattern on a bytes-like object")
 *     elif not PY2 and checkotherencoding == 0 and encoded[0]:
 */
  __pyx_t_7 = ((!(PY2 != 0)) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_1 = __pyx_t_7;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_7 = ((__pyx_v_checkotherencoding > 0) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_1 = __pyx_t_7;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_7 = ((!((__pyx_v_encoded[0]) != 0)) != 0);
  __pyx_t_1 = __pyx_t_7;
  __pyx_L5_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "re2.pyx":334
 *         encoded[0] = 0
 *     if not PY2 and checkotherencoding > 0 and not encoded[0]:
 *         raise TypeError("can't use a string pattern on a bytes-like object")             # <<<<<<<<<<<<<<
 *     elif not PY2 and checkotherencoding == 0 and encoded[0]:
 *         raise TypeError("can't use a bytes pattern on a string-like object")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(4, 334, __pyx_L1_error)

    /* "re2.pyx":333
 *     else:
 *         encoded[0] = 0
 *     if not PY2 and checkotherencoding > 0 and not encoded[0]:             # <<<<<<<<<<<<<<
 *         raise TypeError("can't use a string pattern on a bytes-like object")
 *     elif not PY2 and checkotherencoding == 0 and encoded[0]:
 */
  }

  /* "re2.pyx":335
 *     if not PY2 and checkotherencoding > 0 and not encoded[0]:
 *         raise TypeError("can't use a string pattern on a bytes-like object")
 *     elif not PY2 and checkotherencoding == 0 and encoded[0]:             # <<<<<<<<<<<<<<
 *         raise TypeError("can't use a bytes pattern on a string-like object")
 *     return pystring
 */
  __pyx_t_7 = ((!(PY2 != 0)) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_1 = __pyx_t_7;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_7 = ((__pyx_v_checkotherencoding == 0) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_1 = __pyx_t_7;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_7 = ((__pyx_v_encoded[0]) != 0);
  __pyx_t_1 = __pyx_t_7;
  __pyx_L8_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "re2.pyx":336
 *         raise TypeError("can't use a string pattern on a bytes-like object")
 *     elif not PY2 and checkotherencoding == 0 and encoded[0]:
 *         raise TypeError("can't use a bytes pattern on a string-like object")             # <<<<<<<<<<<<<<
 *     return pystring
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(4, 336, __pyx_L1_error)

    /* "re2.pyx":335
 *     if not PY2 and checkotherencoding > 0 and not encoded[0]:
 *         raise TypeError("can't use a string pattern on a bytes-like object")
 *     elif not PY2 and checkotherencoding == 0 and encoded[0]:             # <<<<<<<<<<<<<<
 *         raise TypeError("can't use a bytes pattern on a string-like object")
 *     return pystring
 */
  }

  /* "re2.pyx":337
 *     elif not PY2 and checkotherencoding == 0 and encoded[0]:
 *         raise TypeError("can't use a bytes pattern on a string-like object")
 *     return pystring             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pystring);
  __pyx_r = __pyx_v_pystring;
  goto __pyx_L0;

  /* "re2.pyx":318
 * 
 * 
 * cdef inline unicode_to_bytes(object pystring, int * encoded,             # <<<<<<<<<<<<<<
 *         int checkotherencoding):
 *     """Convert a unicode string to a utf8 bytes object, if necessary.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("re2.unicode_to_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pystring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":340
 * 
 * 
 * cdef inline int pystring_to_cstring(             # <<<<<<<<<<<<<<
 *         object pystring, char ** cstring, Py_ssize_t * size,
 *         Py_buffer * buf):
 */

static CYTHON_INLINE int __pyx_f_3re2_pystring_to_cstring(PyObject *__pyx_v_pystring, char **__pyx_v_cstring, Py_ssize_t *__pyx_v_size, Py_buffer *__pyx_v_buf) {
  int __pyx_v_result;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pystring_to_cstring", 0);

  /* "re2.pyx":346
 * 
 *     On success, return 0, and set ``cstring``, ``size``, and ``buf``."""
 *     cdef int result = -1             # <<<<<<<<<<<<<<
 *     cstring[0] = NULL
 *     size[0] = 0
 */
  __pyx_v_result = -1;

  /* "re2.pyx":347
 *     On success, return 0, and set ``cstring``, ``size``, and ``buf``."""
 *     cdef int result = -1
 *     cstring[0] = NULL             # <<<<<<<<<<<<<<
 *     size[0] = 0
 *     if PY2:
 */
  (__pyx_v_cstring[0]) = NULL;

  /* "re2.pyx":348
 *     cdef int result = -1
 *     cstring[0] = NULL
 *     size[0] = 0             # <<<<<<<<<<<<<<
 *     if PY2:
 *         # Although the new-style buffer interface was backported to Python 2.6,
 */
  (__pyx_v_size[0]) = 0;

  /* "re2.pyx":349
 *     cstring[0] = NULL
 *     size[0] = 0
 *     if PY2:             # <<<<<<<<<<<<<<
 *         # Although the new-style buffer interface was backported to Python 2.6,
 *         # some modules, notably mmap, only support the old buffer interface.
 */
  __pyx_t_1 = (PY2 != 0);
  if (__pyx_t_1) {

    /* "re2.pyx":353
 *         # some modules, notably mmap, only support the old buffer interface.
 *         # Cf. http://bugs.python.org/issue9229
 *         if PyObject_CheckReadBuffer(pystring) == 1:             # <<<<<<<<<<<<<<
 *             result = PyObject_AsReadBuffer(
 *                     pystring, <const void **>cstring, size)
 */
    __pyx_t_1 = ((PyObject_CheckReadBuffer(__pyx_v_pystring) == 1) != 0);
    if (__pyx_t_1) {

      /* "re2.pyx":354
 *         # Cf. http://bugs.python.org/issue9229
 *         if PyObject_CheckReadBuffer(pystring) == 1:
 *             result = PyObject_AsReadBuffer(             # <<<<<<<<<<<<<<
 *                     pystring, <const void **>cstring, size)
 *     elif PyObject_CheckBuffer(pystring) == 1:  # new-style Buffer interface
 */
      __pyx_v_result = PyObject_AsReadBuffer(__pyx_v_pystring, ((void const **)__pyx_v_cstring), __pyx_v_size);

      /* "re2.pyx":353
 *         # some modules, notably mmap, only support the old buffer interface.
 *         # Cf. http://bugs.python.org/issue9229
 *         if PyObject_CheckReadBuffer(pystring) == 1:             # <<<<<<<<<<<<<<
 *             result = PyObject_AsReadBuffer(
 *                     pystring, <const void **>cstring, size)
 */
    }

    /* "re2.pyx":349
 *     cstring[0] = NULL
 *     size[0] = 0
 *     if PY2:             # <<<<<<<<<<<<<<
 *         # Although the new-style buffer interface was backported to Python 2.6,
 *         # some modules, notably mmap, only support the old buffer interface.
 */
    goto __pyx_L3;
  }

  /* "re2.pyx":356
 *             result = PyObject_AsReadBuffer(
 *                     pystring, <const void **>cstring, size)
 *     elif PyObject_CheckBuffer(pystring) == 1:  # new-style Buffer interface             # <<<<<<<<<<<<<<
 *         result = PyObject_GetBuffer(pystring, buf, PyBUF_SIMPLE)
 *         if result == 0:
 */
  __pyx_t_1 = ((PyObject_CheckBuffer(__pyx_v_pystring) == 1) != 0);
  if (__pyx_t_1) {

    /* "re2.pyx":357
 *                     pystring, <const void **>cstring, size)
 *     elif PyObject_CheckBuffer(pystring) == 1:  # new-style Buffer interface
 *         result = PyObject_GetBuffer(pystring, buf, PyBUF_SIMPLE)             # <<<<<<<<<<<<<<
 *         if result == 0:
 *             cstring[0] = <char *>buf.buf
 */
    __pyx_t_2 = PyObject_GetBuffer(__pyx_v_pystring, __pyx_v_buf, PyBUF_SIMPLE); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(4, 357, __pyx_L1_error)
    __pyx_v_result = __pyx_t_2;

    /* "re2.pyx":358
 *     elif PyObject_CheckBuffer(pystring) == 1:  # new-style Buffer interface
 *         result = PyObject_GetBuffer(pystring, buf, PyBUF_SIMPLE)
 *         if result == 0:             # <<<<<<<<<<<<<<
 *             cstring[0] = <char *>buf.buf
 *             size[0] = buf.len
 */
    __pyx_t_1 = ((__pyx_v_result == 0) != 0);
    if (__pyx_t_1) {

      /* "re2.pyx":359
 *         result = PyObject_GetBuffer(pystring, buf, PyBUF_SIMPLE)
 *         if result == 0:
 *             cstring[0] = <char *>buf.buf             # <<<<<<<<<<<<<<
 *             size[0] = buf.len
 *     return result
 */
      (__pyx_v_cstring[0]) = ((char *)__pyx_v_buf->buf);

      /* "re2.pyx":360
 *         if result == 0:
 *             cstring[0] = <char *>buf.buf
 *             size[0] = buf.len             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
      __pyx_t_3 = __pyx_v_buf->len;
      (__pyx_v_size[0]) = __pyx_t_3;

      /* "re2.pyx":358
 *     elif PyObject_CheckBuffer(pystring) == 1:  # new-style Buffer interface
 *         result = PyObject_GetBuffer(pystring, buf, PyBUF_SIMPLE)
 *         if result == 0:             # <<<<<<<<<<<<<<
 *             cstring[0] = <char *>buf.buf
 *             size[0] = buf.len
 */
    }

    /* "re2.pyx":356
 *             result = PyObject_AsReadBuffer(
 *                     pystring, <const void **>cstring, size)
 *     elif PyObject_CheckBuffer(pystring) == 1:  # new-style Buffer interface             # <<<<<<<<<<<<<<
 *         result = PyObject_GetBuffer(pystring, buf, PyBUF_SIMPLE)
 *         if result == 0:
 */
  }
  __pyx_L3:;

  /* "re2.pyx":361
 *             cstring[0] = <char *>buf.buf
 *             size[0] = buf.len
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "re2.pyx":340
 * 
 * 
 * cdef inline int pystring_to_cstring(             # <<<<<<<<<<<<<<
 *         object pystring, char ** cstring, Py_ssize_t * size,
 *         Py_buffer * buf):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("re2.pystring_to_cstring", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":364
 * 
 * 
 * cdef inline void release_cstring(Py_buffer *buf):             # <<<<<<<<<<<<<<
 *     """Release buffer if necessary."""
 *     if not PY2:
 */

static CYTHON_INLINE void __pyx_f_3re2_release_cstring(Py_buffer *__pyx_v_buf) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("release_cstring", 0);

  /* "re2.pyx":366
 * cdef inline void release_cstring(Py_buffer *buf):
 *     """Release buffer if necessary."""
 *     if not PY2:             # <<<<<<<<<<<<<<
 *         PyBuffer_Release(buf)
 * 
 */
  __pyx_t_1 = ((!(PY2 != 0)) != 0);
  if (__pyx_t_1) {

    /* "re2.pyx":367
 *     """Release buffer if necessary."""
 *     if not PY2:
 *         PyBuffer_Release(buf)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    PyBuffer_Release(__pyx_v_buf);

    /* "re2.pyx":366
 * cdef inline void release_cstring(Py_buffer *buf):
 *     """Release buffer if necessary."""
 *     if not PY2:             # <<<<<<<<<<<<<<
 *         PyBuffer_Release(buf)
 * 
 */
  }

  /* "re2.pyx":364
 * 
 * 
 * cdef inline void release_cstring(Py_buffer *buf):             # <<<<<<<<<<<<<<
 *     """Release buffer if necessary."""
 *     if not PY2:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "re2.pyx":370
 * 
 * 
 * cdef utf8indices(char * cstring, int size, int *pos, int *endpos):             # <<<<<<<<<<<<<<
 *     """Convert unicode indices ``pos`` and ``endpos`` to UTF-8 indices.
 * 
 */

static PyObject *__pyx_f_3re2_utf8indices(char *__pyx_v_cstring, int __pyx_v_size, int *__pyx_v_pos, int *__pyx_v_endpos) {
  unsigned char *__pyx_v_data;
  int __pyx_v_newpos;
  int __pyx_v_newendpos;
  int __pyx_v_cpos;
  int __pyx_v_upos;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("utf8indices", 0);

  /* "re2.pyx":374
 * 
 *     If the indices are out of range, leave them unchanged."""
 *     cdef unsigned char * data = <unsigned char *>cstring             # <<<<<<<<<<<<<<
 *     cdef int newpos = pos[0], newendpos = -1
 *     cdef int cpos = 0, upos = 0
 */
  __pyx_v_data = ((unsigned char *)__pyx_v_cstring);

  /* "re2.pyx":375
 *     If the indices are out of range, leave them unchanged."""
 *     cdef unsigned char * data = <unsigned char *>cstring
 *     cdef int newpos = pos[0], newendpos = -1             # <<<<<<<<<<<<<<
 *     cdef int cpos = 0, upos = 0
 *     while cpos < size:
 */
  __pyx_v_newpos = (__pyx_v_pos[0]);
  __pyx_v_newendpos = -1;

  /* "re2.pyx":376
 *     cdef unsigned char * data = <unsigned char *>cstring
 *     cdef int newpos = pos[0], newendpos = -1
 *     cdef int cpos = 0, upos = 0             # <<<<<<<<<<<<<<
 *     while cpos < size:
 *         if data[cpos] < 0x80:
 */
  __pyx_v_cpos = 0;
  __pyx_v_upos = 0;

  /* "re2.pyx":377
 *     cdef int newpos = pos[0], newendpos = -1
 *     cdef int cpos = 0, upos = 0
 *     while cpos < size:             # <<<<<<<<<<<<<<
 *         if data[cpos] < 0x80:
 *             cpos += 1
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_cpos < __pyx_v_size) != 0);
    if (!__pyx_t_1) break;

    /* "re2.pyx":378
 *     cdef int cpos = 0, upos = 0
 *     while cpos < size:
 *         if data[cpos] < 0x80:             # <<<<<<<<<<<<<<
 *             cpos += 1
 *             upos += 1
 */
    __pyx_t_1 = (((__pyx_v_data[__pyx_v_cpos]) < 0x80) != 0);
    if (__pyx_t_1) {

      /* "re2.pyx":379
 *     while cpos < size:
 *         if data[cpos] < 0x80:
 *             cpos += 1             # <<<<<<<<<<<<<<
 *             upos += 1
 *         elif data[cpos] < 0xe0:
 */
      __pyx_v_cpos = (__pyx_v_cpos + 1);

      /* "re2.pyx":380
 *         if data[cpos] < 0x80:
 *             cpos += 1
 *             upos += 1             # <<<<<<<<<<<<<<
 *         elif data[cpos] < 0xe0:
 *             cpos += 2
 */
      __pyx_v_upos = (__pyx_v_upos + 1);

      /* "re2.pyx":378
 *     cdef int cpos = 0, upos = 0
 *     while cpos < size:
 *         if data[cpos] < 0x80:             # <<<<<<<<<<<<<<
 *             cpos += 1
 *             upos += 1
 */
      goto __pyx_L5;
    }

    /* "re2.pyx":381
 *             cpos += 1
 *             upos += 1
 *         elif data[cpos] < 0xe0:             # <<<<<<<<<<<<<<
 *             cpos += 2
 *             upos += 1
 */
    __pyx_t_1 = (((__pyx_v_data[__pyx_v_cpos]) < 0xe0) != 0);
    if (__pyx_t_1) {

      /* "re2.pyx":382
 *             upos += 1
 *         elif data[cpos] < 0xe0:
 *             cpos += 2             # <<<<<<<<<<<<<<
 *             upos += 1
 *         elif data[cpos] < 0xf0:
 */
      __pyx_v_cpos = (__pyx_v_cpos + 2);

      /* "re2.pyx":383
 *         elif data[cpos] < 0xe0:
 *             cpos += 2
 *             upos += 1             # <<<<<<<<<<<<<<
 *         elif data[cpos] < 0xf0:
 *             cpos += 3
 */
      __pyx_v_upos = (__pyx_v_upos + 1);

      /* "re2.pyx":381
 *             cpos += 1
 *             upos += 1
 *         elif data[cpos] < 0xe0:             # <<<<<<<<<<<<<<
 *             cpos += 2
 *             upos += 1
 */
      goto __pyx_L5;
    }

    /* "re2.pyx":384
 *             cpos += 2
 *             upos += 1
 *         elif data[cpos] < 0xf0:             # <<<<<<<<<<<<<<
 *             cpos += 3
 *             upos += 1
 */
    __pyx_t_1 = (((__pyx_v_data[__pyx_v_cpos]) < 0xf0) != 0);
    if (__pyx_t_1) {

      /* "re2.pyx":385
 *             upos += 1
 *         elif data[cpos] < 0xf0:
 *             cpos += 3             # <<<<<<<<<<<<<<
 *             upos += 1
 *         else:
 */
      __pyx_v_cpos = (__pyx_v_cpos + 3);

      /* "re2.pyx":386
 *         elif data[cpos] < 0xf0:
 *             cpos += 3
 *             upos += 1             # <<<<<<<<<<<<<<
 *         else:
 *             cpos += 4
 */
      __pyx_v_upos = (__pyx_v_upos + 1);

      /* "re2.pyx":384
 *             cpos += 2
 *             upos += 1
 *         elif data[cpos] < 0xf0:             # <<<<<<<<<<<<<<
 *             cpos += 3
 *             upos += 1
 */
      goto __pyx_L5;
    }

    /* "re2.pyx":388
 *             upos += 1
 *         else:
 *             cpos += 4             # <<<<<<<<<<<<<<
 *             upos += 1
 *             # wide unicode chars get 2 unichars when python is compiled
 */
    /*else*/ {
      __pyx_v_cpos = (__pyx_v_cpos + 4);

      /* "re2.pyx":389
 *         else:
 *             cpos += 4
 *             upos += 1             # <<<<<<<<<<<<<<
 *             # wide unicode chars get 2 unichars when python is compiled
 *             # with --enable-unicode=ucs2
 */
      __pyx_v_upos = (__pyx_v_upos + 1);

      /* "re2.pyx":393
 *             # with --enable-unicode=ucs2
 *             # TODO: verify this; cf. http://docs.cython.org/en/latest/src/tutorial/strings.html#narrow-unicode-builds
 *             emit_ifndef_py_unicode_wide()             # <<<<<<<<<<<<<<
 *             upos += 1
 *             emit_endif()
 */
      #if !defined(Py_UNICODE_WIDE) //();

      /* "re2.pyx":394
 *             # TODO: verify this; cf. http://docs.cython.org/en/latest/src/tutorial/strings.html#narrow-unicode-builds
 *             emit_ifndef_py_unicode_wide()
 *             upos += 1             # <<<<<<<<<<<<<<
 *             emit_endif()
 * 
 */
      __pyx_v_upos = (__pyx_v_upos + 1);

      /* "re2.pyx":395
 *             emit_ifndef_py_unicode_wide()
 *             upos += 1
 *             emit_endif()             # <<<<<<<<<<<<<<
 * 
 *         if upos == pos[0]:
 */
      #endif //();
    }
    __pyx_L5:;

    /* "re2.pyx":397
 *             emit_endif()
 * 
 *         if upos == pos[0]:             # <<<<<<<<<<<<<<
 *             newpos = cpos
 *             if endpos[0] == -1:
 */
    __pyx_t_1 = ((__pyx_v_upos == (__pyx_v_pos[0])) != 0);
    if (__pyx_t_1) {

      /* "re2.pyx":398
 * 
 *         if upos == pos[0]:
 *             newpos = cpos             # <<<<<<<<<<<<<<
 *             if endpos[0] == -1:
 *                 break
 */
      __pyx_v_newpos = __pyx_v_cpos;

      /* "re2.pyx":399
 *         if upos == pos[0]:
 *             newpos = cpos
 *             if endpos[0] == -1:             # <<<<<<<<<<<<<<
 *                 break
 *         elif upos == endpos[0]:
 */
      __pyx_t_1 = (((__pyx_v_endpos[0]) == -1L) != 0);
      if (__pyx_t_1) {

        /* "re2.pyx":400
 *             newpos = cpos
 *             if endpos[0] == -1:
 *                 break             # <<<<<<<<<<<<<<
 *         elif upos == endpos[0]:
 *             newendpos = cpos
 */
        goto __pyx_L4_break;

        /* "re2.pyx":399
 *         if upos == pos[0]:
 *             newpos = cpos
 *             if endpos[0] == -1:             # <<<<<<<<<<<<<<
 *                 break
 *         elif upos == endpos[0]:
 */
      }

      /* "re2.pyx":397
 *             emit_endif()
 * 
 *         if upos == pos[0]:             # <<<<<<<<<<<<<<
 *             newpos = cpos
 *             if endpos[0] == -1:
 */
      goto __pyx_L6;
    }

    /* "re2.pyx":401
 *             if endpos[0] == -1:
 *                 break
 *         elif upos == endpos[0]:             # <<<<<<<<<<<<<<
 *             newendpos = cpos
 *             break
 */
    __pyx_t_1 = ((__pyx_v_upos == (__pyx_v_endpos[0])) != 0);
    if (__pyx_t_1) {

      /* "re2.pyx":402
 *                 break
 *         elif upos == endpos[0]:
 *             newendpos = cpos             # <<<<<<<<<<<<<<
 *             break
 *     pos[0] = newpos
 */
      __pyx_v_newendpos = __pyx_v_cpos;

      /* "re2.pyx":403
 *         elif upos == endpos[0]:
 *             newendpos = cpos
 *             break             # <<<<<<<<<<<<<<
 *     pos[0] = newpos
 *     endpos[0] = newendpos
 */
      goto __pyx_L4_break;

      /* "re2.pyx":401
 *             if endpos[0] == -1:
 *                 break
 *         elif upos == endpos[0]:             # <<<<<<<<<<<<<<
 *             newendpos = cpos
 *             break
 */
    }
    __pyx_L6:;
  }
  __pyx_L4_break:;

  /* "re2.pyx":404
 *             newendpos = cpos
 *             break
 *     pos[0] = newpos             # <<<<<<<<<<<<<<
 *     endpos[0] = newendpos
 * 
 */
  (__pyx_v_pos[0]) = __pyx_v_newpos;

  /* "re2.pyx":405
 *             break
 *     pos[0] = newpos
 *     endpos[0] = newendpos             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_endpos[0]) = __pyx_v_newendpos;

  /* "re2.pyx":370
 * 
 * 
 * cdef utf8indices(char * cstring, int size, int *pos, int *endpos):             # <<<<<<<<<<<<<<
 *     """Convert unicode indices ``pos`` and ``endpos`` to UTF-8 indices.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "re2.pyx":408
 * 
 * 
 * cdef void unicodeindices(map[int, int] &positions,             # <<<<<<<<<<<<<<
 *         char * cstring, int size, int * cpos, int * upos):
 *     """Convert UTF-8 byte indices to unicode indices."""
 */

static void __pyx_f_3re2_unicodeindices(std::map<int,int>  &__pyx_v_positions, char *__pyx_v_cstring, int __pyx_v_size, int *__pyx_v_cpos, int *__pyx_v_upos) {
  unsigned char *__pyx_v_s;
  std::map<int,int> ::iterator __pyx_v_it;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  long __pyx_t_2;
  __Pyx_RefNannySetupContext("unicodeindices", 0);

  /* "re2.pyx":411
 *         char * cstring, int size, int * cpos, int * upos):
 *     """Convert UTF-8 byte indices to unicode indices."""
 *     cdef unsigned char * s = <unsigned char *>cstring             # <<<<<<<<<<<<<<
 *     cdef map[int, int].iterator it = positions.begin()
 * 
 */
  __pyx_v_s = ((unsigned char *)__pyx_v_cstring);

  /* "re2.pyx":412
 *     """Convert UTF-8 byte indices to unicode indices."""
 *     cdef unsigned char * s = <unsigned char *>cstring
 *     cdef map[int, int].iterator it = positions.begin()             # <<<<<<<<<<<<<<
 * 
 *     if dereference(it).first == -1:
 */
  __pyx_v_it = __pyx_v_positions.begin();

  /* "re2.pyx":414
 *     cdef map[int, int].iterator it = positions.begin()
 * 
 *     if dereference(it).first == -1:             # <<<<<<<<<<<<<<
 *         dereference(it).second = -1
 *         postincrement(it)
 */
  __pyx_t_1 = (((*__pyx_v_it).first == -1L) != 0);
  if (__pyx_t_1) {

    /* "re2.pyx":415
 * 
 *     if dereference(it).first == -1:
 *         dereference(it).second = -1             # <<<<<<<<<<<<<<
 *         postincrement(it)
 *         if it == positions.end():
 */
    (*__pyx_v_it).second = -1;

    /* "re2.pyx":416
 *     if dereference(it).first == -1:
 *         dereference(it).second = -1
 *         postincrement(it)             # <<<<<<<<<<<<<<
 *         if it == positions.end():
 *             return
 */
    (void)((__pyx_v_it++));

    /* "re2.pyx":417
 *         dereference(it).second = -1
 *         postincrement(it)
 *         if it == positions.end():             # <<<<<<<<<<<<<<
 *             return
 *     if dereference(it).first == cpos[0]:
 */
    __pyx_t_1 = ((__pyx_v_it == __pyx_v_positions.end()) != 0);
    if (__pyx_t_1) {

      /* "re2.pyx":418
 *         postincrement(it)
 *         if it == positions.end():
 *             return             # <<<<<<<<<<<<<<
 *     if dereference(it).first == cpos[0]:
 *         dereference(it).second = upos[0]
 */
      goto __pyx_L0;

      /* "re2.pyx":417
 *         dereference(it).second = -1
 *         postincrement(it)
 *         if it == positions.end():             # <<<<<<<<<<<<<<
 *             return
 *     if dereference(it).first == cpos[0]:
 */
    }

    /* "re2.pyx":414
 *     cdef map[int, int].iterator it = positions.begin()
 * 
 *     if dereference(it).first == -1:             # <<<<<<<<<<<<<<
 *         dereference(it).second = -1
 *         postincrement(it)
 */
  }

  /* "re2.pyx":419
 *         if it == positions.end():
 *             return
 *     if dereference(it).first == cpos[0]:             # <<<<<<<<<<<<<<
 *         dereference(it).second = upos[0]
 *         postincrement(it)
 */
  __pyx_t_1 = (((*__pyx_v_it).first == (__pyx_v_cpos[0])) != 0);
  if (__pyx_t_1) {

    /* "re2.pyx":420
 *             return
 *     if dereference(it).first == cpos[0]:
 *         dereference(it).second = upos[0]             # <<<<<<<<<<<<<<
 *         postincrement(it)
 *         if it == positions.end():
 */
    (*__pyx_v_it).second = (__pyx_v_upos[0]);

    /* "re2.pyx":421
 *     if dereference(it).first == cpos[0]:
 *         dereference(it).second = upos[0]
 *         postincrement(it)             # <<<<<<<<<<<<<<
 *         if it == positions.end():
 *             return
 */
    (void)((__pyx_v_it++));

    /* "re2.pyx":422
 *         dereference(it).second = upos[0]
 *         postincrement(it)
 *         if it == positions.end():             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_1 = ((__pyx_v_it == __pyx_v_positions.end()) != 0);
    if (__pyx_t_1) {

      /* "re2.pyx":423
 *         postincrement(it)
 *         if it == positions.end():
 *             return             # <<<<<<<<<<<<<<
 * 
 *     while cpos[0] < size:
 */
      goto __pyx_L0;

      /* "re2.pyx":422
 *         dereference(it).second = upos[0]
 *         postincrement(it)
 *         if it == positions.end():             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    }

    /* "re2.pyx":419
 *         if it == positions.end():
 *             return
 *     if dereference(it).first == cpos[0]:             # <<<<<<<<<<<<<<
 *         dereference(it).second = upos[0]
 *         postincrement(it)
 */
  }

  /* "re2.pyx":425
 *             return
 * 
 *     while cpos[0] < size:             # <<<<<<<<<<<<<<
 *         if s[cpos[0]] < 0x80:
 *             cpos[0] += 1
 */
  while (1) {
    __pyx_t_1 = (((__pyx_v_cpos[0]) < __pyx_v_size) != 0);
    if (!__pyx_t_1) break;

    /* "re2.pyx":426
 * 
 *     while cpos[0] < size:
 *         if s[cpos[0]] < 0x80:             # <<<<<<<<<<<<<<
 *             cpos[0] += 1
 *             upos[0] += 1
 */
    __pyx_t_1 = (((__pyx_v_s[(__pyx_v_cpos[0])]) < 0x80) != 0);
    if (__pyx_t_1) {

      /* "re2.pyx":427
 *     while cpos[0] < size:
 *         if s[cpos[0]] < 0x80:
 *             cpos[0] += 1             # <<<<<<<<<<<<<<
 *             upos[0] += 1
 *         elif s[cpos[0]] < 0xe0:
 */
      __pyx_t_2 = 0;
      (__pyx_v_cpos[__pyx_t_2]) = ((__pyx_v_cpos[__pyx_t_2]) + 1);

      /* "re2.pyx":428
 *         if s[cpos[0]] < 0x80:
 *             cpos[0] += 1
 *             upos[0] += 1             # <<<<<<<<<<<<<<
 *         elif s[cpos[0]] < 0xe0:
 *             cpos[0] += 2
 */
      __pyx_t_2 = 0;
      (__pyx_v_upos[__pyx_t_2]) = ((__pyx_v_upos[__pyx_t_2]) + 1);

      /* "re2.pyx":426
 * 
 *     while cpos[0] < size:
 *         if s[cpos[0]] < 0x80:             # <<<<<<<<<<<<<<
 *             cpos[0] += 1
 *             upos[0] += 1
 */
      goto __pyx_L9;
    }

    /* "re2.pyx":429
 *             cpos[0] += 1
 *             upos[0] += 1
 *         elif s[cpos[0]] < 0xe0:             # <<<<<<<<<<<<<<
 *             cpos[0] += 2
 *             upos[0] += 1
 */
    __pyx_t_1 = (((__pyx_v_s[(__pyx_v_cpos[0])]) < 0xe0) != 0);
    if (__pyx_t_1) {

      /* "re2.pyx":430
 *             upos[0] += 1
 *         elif s[cpos[0]] < 0xe0:
 *             cpos[0] += 2             # <<<<<<<<<<<<<<
 *             upos[0] += 1
 *         elif s[cpos[0]] < 0xf0:
 */
      __pyx_t_2 = 0;
      (__pyx_v_cpos[__pyx_t_2]) = ((__pyx_v_cpos[__pyx_t_2]) + 2);

      /* "re2.pyx":431
 *         elif s[cpos[0]] < 0xe0:
 *             cpos[0] += 2
 *             upos[0] += 1             # <<<<<<<<<<<<<<
 *         elif s[cpos[0]] < 0xf0:
 *             cpos[0] += 3
 */
      __pyx_t_2 = 0;
      (__pyx_v_upos[__pyx_t_2]) = ((__pyx_v_upos[__pyx_t_2]) + 1);

      /* "re2.pyx":429
 *             cpos[0] += 1
 *             upos[0] += 1
 *         elif s[cpos[0]] < 0xe0:             # <<<<<<<<<<<<<<
 *             cpos[0] += 2
 *             upos[0] += 1
 */
      goto __pyx_L9;
    }

    /* "re2.pyx":432
 *             cpos[0] += 2
 *             upos[0] += 1
 *         elif s[cpos[0]] < 0xf0:             # <<<<<<<<<<<<<<
 *             cpos[0] += 3
 *             upos[0] += 1
 */
    __pyx_t_1 = (((__pyx_v_s[(__pyx_v_cpos[0])]) < 0xf0) != 0);
    if (__pyx_t_1) {

      /* "re2.pyx":433
 *             upos[0] += 1
 *         elif s[cpos[0]] < 0xf0:
 *             cpos[0] += 3             # <<<<<<<<<<<<<<
 *             upos[0] += 1
 *         else:
 */
      __pyx_t_2 = 0;
      (__pyx_v_cpos[__pyx_t_2]) = ((__pyx_v_cpos[__pyx_t_2]) + 3);

      /* "re2.pyx":434
 *         elif s[cpos[0]] < 0xf0:
 *             cpos[0] += 3
 *             upos[0] += 1             # <<<<<<<<<<<<<<
 *         else:
 *             cpos[0] += 4
 */
      __pyx_t_2 = 0;
      (__pyx_v_upos[__pyx_t_2]) = ((__pyx_v_upos[__pyx_t_2]) + 1);

      /* "re2.pyx":432
 *             cpos[0] += 2
 *             upos[0] += 1
 *         elif s[cpos[0]] < 0xf0:             # <<<<<<<<<<<<<<
 *             cpos[0] += 3
 *             upos[0] += 1
 */
      goto __pyx_L9;
    }

    /* "re2.pyx":436
 *             upos[0] += 1
 *         else:
 *             cpos[0] += 4             # <<<<<<<<<<<<<<
 *             upos[0] += 1
 *             # wide unicode chars get 2 unichars when python is compiled
 */
    /*else*/ {
      __pyx_t_2 = 0;
      (__pyx_v_cpos[__pyx_t_2]) = ((__pyx_v_cpos[__pyx_t_2]) + 4);

      /* "re2.pyx":437
 *         else:
 *             cpos[0] += 4
 *             upos[0] += 1             # <<<<<<<<<<<<<<
 *             # wide unicode chars get 2 unichars when python is compiled
 *             # with --enable-unicode=ucs2
 */
      __pyx_t_2 = 0;
      (__pyx_v_upos[__pyx_t_2]) = ((__pyx_v_upos[__pyx_t_2]) + 1);

      /* "re2.pyx":441
 *             # with --enable-unicode=ucs2
 *             # TODO: verify this; cf. http://docs.cython.org/en/latest/src/tutorial/strings.html#narrow-unicode-builds
 *             emit_ifndef_py_unicode_wide()             # <<<<<<<<<<<<<<
 *             upos[0] += 1
 *             emit_endif()
 */
      #if !defined(Py_UNICODE_WIDE) //();

      /* "re2.pyx":442
 *             # TODO: verify this; cf. http://docs.cython.org/en/latest/src/tutorial/strings.html#narrow-unicode-builds
 *             emit_ifndef_py_unicode_wide()
 *             upos[0] += 1             # <<<<<<<<<<<<<<
 *             emit_endif()
 * 
 */
      __pyx_t_2 = 0;
      (__pyx_v_upos[__pyx_t_2]) = ((__pyx_v_upos[__pyx_t_2]) + 1);

      /* "re2.pyx":443
 *             emit_ifndef_py_unicode_wide()
 *             upos[0] += 1
 *             emit_endif()             # <<<<<<<<<<<<<<
 * 
 *         if dereference(it).first == cpos[0]:
 */
      #endif //();
    }
    __pyx_L9:;

    /* "re2.pyx":445
 *             emit_endif()
 * 
 *         if dereference(it).first == cpos[0]:             # <<<<<<<<<<<<<<
 *             dereference(it).second = upos[0]
 *             postincrement(it)
 */
    __pyx_t_1 = (((*__pyx_v_it).first == (__pyx_v_cpos[0])) != 0);
    if (__pyx_t_1) {

      /* "re2.pyx":446
 * 
 *         if dereference(it).first == cpos[0]:
 *             dereference(it).second = upos[0]             # <<<<<<<<<<<<<<
 *             postincrement(it)
 *             if it == positions.end():
 */
      (*__pyx_v_it).second = (__pyx_v_upos[0]);

      /* "re2.pyx":447
 *         if dereference(it).first == cpos[0]:
 *             dereference(it).second = upos[0]
 *             postincrement(it)             # <<<<<<<<<<<<<<
 *             if it == positions.end():
 *                 break
 */
      (void)((__pyx_v_it++));

      /* "re2.pyx":448
 *             dereference(it).second = upos[0]
 *             postincrement(it)
 *             if it == positions.end():             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
      __pyx_t_1 = ((__pyx_v_it == __pyx_v_positions.end()) != 0);
      if (__pyx_t_1) {

        /* "re2.pyx":449
 *             postincrement(it)
 *             if it == positions.end():
 *                 break             # <<<<<<<<<<<<<<
 * 
 * 
 */
        goto __pyx_L8_break;

        /* "re2.pyx":448
 *             dereference(it).second = upos[0]
 *             postincrement(it)
 *             if it == positions.end():             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
      }

      /* "re2.pyx":445
 *             emit_endif()
 * 
 *         if dereference(it).first == cpos[0]:             # <<<<<<<<<<<<<<
 *             dereference(it).second = upos[0]
 *             postincrement(it)
 */
    }
  }
  __pyx_L8_break:;

  /* "re2.pyx":408
 * 
 * 
 * cdef void unicodeindices(map[int, int] &positions,             # <<<<<<<<<<<<<<
 *         char * cstring, int size, int * cpos, int * upos):
 *     """Convert UTF-8 byte indices to unicode indices."""
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}
static struct __pyx_vtabstruct_3re2_Pattern __pyx_vtable_3re2_Pattern;

static PyObject *__pyx_tp_new_3re2_Pattern(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_3re2_Pattern *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3re2_Pattern *)o);
  p->__pyx_vtab = __pyx_vtabptr_3re2_Pattern;
  p->pattern = Py_None; Py_INCREF(Py_None);
  p->groupindex = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_3re2_Pattern(PyObject *o) {
  struct __pyx_obj_3re2_Pattern *p = (struct __pyx_obj_3re2_Pattern *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_3re2_7Pattern_32__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  if (p->__weakref__) PyObject_ClearWeakRefs(o);
  Py_CLEAR(p->pattern);
  Py_CLEAR(p->groupindex);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_3re2_Pattern(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3re2_Pattern *p = (struct __pyx_obj_3re2_Pattern *)o;
  if (p->pattern) {
    e = (*v)(p->pattern, a); if (e) return e;
  }
  if (p->groupindex) {
    e = (*v)(p->groupindex, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3re2_Pattern(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3re2_Pattern *p = (struct __pyx_obj_3re2_Pattern *)o;
  tmp = ((PyObject*)p->pattern);
  p->pattern = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->groupindex);
  p->groupindex = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_3re2_7Pattern_pattern(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3re2_7Pattern_7pattern_1__get__(o);
}

static PyObject *__pyx_getprop_3re2_7Pattern_flags(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3re2_7Pattern_5flags_1__get__(o);
}

static PyObject *__pyx_getprop_3re2_7Pattern_groups(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3re2_7Pattern_6groups_1__get__(o);
}

static PyObject *__pyx_getprop_3re2_7Pattern_groupindex(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3re2_7Pattern_10groupindex_1__get__(o);
}

static PyMethodDef __pyx_methods_3re2_Pattern[] = {
  {"search", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_7Pattern_1search, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_7Pattern_search},
  {"match", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_7Pattern_3match, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_7Pattern_2match},
  {"fullmatch", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_7Pattern_5fullmatch, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_7Pattern_4fullmatch},
  {"contains", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_7Pattern_7contains, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_7Pattern_6contains},
  {"count", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_7Pattern_9count, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_7Pattern_8count},
  {"findall", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_7Pattern_11findall, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_7Pattern_10findall},
  {"finditer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_7Pattern_13finditer, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_7Pattern_12finditer},
  {"_finditer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_7Pattern_15_finditer, METH_VARARGS|METH_KEYWORDS, 0},
  {"split", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_7Pattern_18split, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_7Pattern_17split},
  {"sub", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_7Pattern_20sub, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_7Pattern_19sub},
  {"subn", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_7Pattern_22subn, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_7Pattern_21subn},
  {"scanner", (PyCFunction)__pyx_pw_3re2_7Pattern_24scanner, METH_O, 0},
  {"_dump_pattern", (PyCFunction)__pyx_pw_3re2_7Pattern_26_dump_pattern, METH_NOARGS, 0},
  {"__reduce__", (PyCFunction)__pyx_pw_3re2_7Pattern_30__reduce__, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3re2_Pattern[] = {
  {(char *)"pattern", __pyx_getprop_3re2_7Pattern_pattern, 0, (char *)0, 0},
  {(char *)"flags", __pyx_getprop_3re2_7Pattern_flags, 0, (char *)0, 0},
  {(char *)"groups", __pyx_getprop_3re2_7Pattern_groups, 0, (char *)0, 0},
  {(char *)"groupindex", __pyx_getprop_3re2_7Pattern_groupindex, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3re2_Pattern = {
  PyVarObject_HEAD_INIT(0, 0)
  "re2.Pattern", /*tp_name*/
  sizeof(struct __pyx_obj_3re2_Pattern), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3re2_Pattern, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_3re2_7Pattern_28__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3re2_Pattern, /*tp_traverse*/
  __pyx_tp_clear_3re2_Pattern, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3re2_Pattern, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3re2_Pattern, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3re2_Pattern, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_3re2_Match __pyx_vtable_3re2_Match;

static PyObject *__pyx_tp_new_3re2_Match(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_3re2_Match *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3re2_Match *)o);
  p->__pyx_vtab = __pyx_vtabptr_3re2_Match;
  p->re = ((struct __pyx_obj_3re2_Pattern *)Py_None); Py_INCREF(Py_None);
  p->string = Py_None; Py_INCREF(Py_None);
  p->regs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_groups = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_named_groups = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_3re2_Match(PyObject *o) {
  struct __pyx_obj_3re2_Match *p = (struct __pyx_obj_3re2_Match *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_3re2_5Match_17__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->re);
  Py_CLEAR(p->string);
  Py_CLEAR(p->regs);
  Py_CLEAR(p->_groups);
  Py_CLEAR(p->_named_groups);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_3re2_Match(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3re2_Match *p = (struct __pyx_obj_3re2_Match *)o;
  if (p->re) {
    e = (*v)(((PyObject *)p->re), a); if (e) return e;
  }
  if (p->string) {
    e = (*v)(p->string, a); if (e) return e;
  }
  if (p->regs) {
    e = (*v)(p->regs, a); if (e) return e;
  }
  if (p->_groups) {
    e = (*v)(p->_groups, a); if (e) return e;
  }
  if (p->_named_groups) {
    e = (*v)(p->_named_groups, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3re2_Match(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3re2_Match *p = (struct __pyx_obj_3re2_Match *)o;
  tmp = ((PyObject*)p->re);
  p->re = ((struct __pyx_obj_3re2_Pattern *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->string);
  p->string = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->regs);
  p->regs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_groups);
  p->_groups = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_named_groups);
  p->_named_groups = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_3re2_5Match_lastindex(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3re2_5Match_9lastindex_1__get__(o);
}

static PyObject *__pyx_getprop_3re2_5Match_lastgroup(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3re2_5Match_9lastgroup_1__get__(o);
}

static PyObject *__pyx_getprop_3re2_5Match_re(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3re2_5Match_2re_1__get__(o);
}

static PyObject *__pyx_getprop_3re2_5Match_string(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3re2_5Match_6string_1__get__(o);
}

static PyObject *__pyx_getprop_3re2_5Match_pos(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3re2_5Match_3pos_1__get__(o);
}

static PyObject *__pyx_getprop_3re2_5Match_endpos(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3re2_5Match_6endpos_1__get__(o);
}

static PyObject *__pyx_getprop_3re2_5Match_regs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3re2_5Match_4regs_1__get__(o);
}

static PyMethodDef __pyx_methods_3re2_Match[] = {
  {"groups", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_5Match_3groups, METH_VARARGS|METH_KEYWORDS, 0},
  {"group", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_5Match_5group, METH_VARARGS|METH_KEYWORDS, 0},
  {"groupdict", (PyCFunction)__pyx_pw_3re2_5Match_7groupdict, METH_NOARGS, 0},
  {"expand", (PyCFunction)__pyx_pw_3re2_5Match_9expand, METH_O, __pyx_doc_3re2_5Match_8expand},
  {"start", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_5Match_11start, METH_VARARGS|METH_KEYWORDS, 0},
  {"end", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_5Match_13end, METH_VARARGS|METH_KEYWORDS, 0},
  {"span", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3re2_5Match_15span, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_3re2_5Match_21__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_3re2_5Match_23__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3re2_Match[] = {
  {(char *)"lastindex", __pyx_getprop_3re2_5Match_lastindex, 0, (char *)0, 0},
  {(char *)"lastgroup", __pyx_getprop_3re2_5Match_lastgroup, 0, (char *)0, 0},
  {(char *)"re", __pyx_getprop_3re2_5Match_re, 0, (char *)0, 0},
  {(char *)"string", __pyx_getprop_3re2_5Match_string, 0, (char *)0, 0},
  {(char *)"pos", __pyx_getprop_3re2_5Match_pos, 0, (char *)0, 0},
  {(char *)"endpos", __pyx_getprop_3re2_5Match_endpos, 0, (char *)0, 0},
  {(char *)"regs", __pyx_getprop_3re2_5Match_regs, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3re2_Match = {
  PyVarObject_HEAD_INIT(0, 0)
  "re2.Match", /*tp_name*/
  sizeof(struct __pyx_obj_3re2_Match), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3re2_Match, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_3re2_5Match_19__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3re2_Match, /*tp_traverse*/
  __pyx_tp_clear_3re2_Match, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3re2_Match, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3re2_Match, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_3re2_5Match_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3re2_Match, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_3re2___pyx_scope_struct___finditer *__pyx_freelist_3re2___pyx_scope_struct___finditer[8];
static int __pyx_freecount_3re2___pyx_scope_struct___finditer = 0;

static PyObject *__pyx_tp_new_3re2___pyx_scope_struct___finditer(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_3re2___pyx_scope_struct___finditer *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3re2___pyx_scope_struct___finditer > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3re2___pyx_scope_struct___finditer)))) {
    o = (PyObject*)__pyx_freelist_3re2___pyx_scope_struct___finditer[--__pyx_freecount_3re2___pyx_scope_struct___finditer];
    memset(o, 0, sizeof(struct __pyx_obj_3re2___pyx_scope_struct___finditer));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_3re2___pyx_scope_struct___finditer *)o);
  p->__pyx_v_buf.obj = NULL;
  return o;
}

static void __pyx_tp_dealloc_3re2___pyx_scope_struct___finditer(PyObject *o) {
  struct __pyx_obj_3re2___pyx_scope_struct___finditer *p = (struct __pyx_obj_3re2___pyx_scope_struct___finditer *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_bytestr);
  Py_CLEAR(p->__pyx_v_m);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_string);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3re2___pyx_scope_struct___finditer < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3re2___pyx_scope_struct___finditer)))) {
    __pyx_freelist_3re2___pyx_scope_struct___finditer[__pyx_freecount_3re2___pyx_scope_struct___finditer++] = ((struct __pyx_obj_3re2___pyx_scope_struct___finditer *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3re2___pyx_scope_struct___finditer(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3re2___pyx_scope_struct___finditer *p = (struct __pyx_obj_3re2___pyx_scope_struct___finditer *)o;
  if (p->__pyx_v_bytestr) {
    e = (*v)(p->__pyx_v_bytestr, a); if (e) return e;
  }
  if (p->__pyx_v_m) {
    e = (*v)(((PyObject *)p->__pyx_v_m), a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_string) {
    e = (*v)(p->__pyx_v_string, a); if (e) return e;
  }
  if (p->__pyx_v_buf.obj) {
    e = (*v)(p->__pyx_v_buf.obj, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_3re2___pyx_scope_struct___finditer = {
  PyVarObject_HEAD_INIT(0, 0)
  "re2.__pyx_scope_struct___finditer", /*tp_name*/
  sizeof(struct __pyx_obj_3re2___pyx_scope_struct___finditer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3re2___pyx_scope_struct___finditer, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3re2___pyx_scope_struct___finditer, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3re2___pyx_scope_struct___finditer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_re2(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_re2},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "re2",
    __pyx_k_Regular_expressions_using_Google, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_b_000, __pyx_k_000, sizeof(__pyx_k_000), 0, 0, 0, 0},
  {&__pyx_kp_u_000, __pyx_k_000, sizeof(__pyx_k_000), 0, 1, 0, 0},
  {&__pyx_kp_b_010, __pyx_k_010, sizeof(__pyx_k_010), 0, 0, 0, 0},
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_kp_s_A_wrapper_for_re_Pattern_to_supp, __pyx_k_A_wrapper_for_re_Pattern_to_supp, sizeof(__pyx_k_A_wrapper_for_re_Pattern_to_supp), 0, 0, 1, 0},
  {&__pyx_n_s_BackreferencesException, __pyx_k_BackreferencesException, sizeof(__pyx_k_BackreferencesException), 0, 0, 1, 1},
  {&__pyx_n_u_BackreferencesException, __pyx_k_BackreferencesException, sizeof(__pyx_k_BackreferencesException), 0, 1, 0, 1},
  {&__pyx_kp_u_Backreferences_not_supported, __pyx_k_Backreferences_not_supported, sizeof(__pyx_k_Backreferences_not_supported), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_process_flags_argument_wi, __pyx_k_Cannot_process_flags_argument_wi, sizeof(__pyx_k_Cannot_process_flags_argument_wi), 0, 1, 0, 0},
  {&__pyx_n_s_CharClassProblemException, __pyx_k_CharClassProblemException, sizeof(__pyx_k_CharClassProblemException), 0, 0, 1, 1},
  {&__pyx_n_u_CharClassProblemException, __pyx_k_CharClassProblemException, sizeof(__pyx_k_CharClassProblemException), 0, 1, 0, 1},
  {&__pyx_n_s_DEBUG, __pyx_k_DEBUG, sizeof(__pyx_k_DEBUG), 0, 0, 1, 1},
  {&__pyx_n_u_DEBUG, __pyx_k_DEBUG, sizeof(__pyx_k_DEBUG), 0, 1, 0, 1},
  {&__pyx_n_s_DOTALL, __pyx_k_DOTALL, sizeof(__pyx_k_DOTALL), 0, 0, 1, 1},
  {&__pyx_n_u_DOTALL, __pyx_k_DOTALL, sizeof(__pyx_k_DOTALL), 0, 1, 0, 1},
  {&__pyx_n_s_FALLBACK_EXCEPTION, __pyx_k_FALLBACK_EXCEPTION, sizeof(__pyx_k_FALLBACK_EXCEPTION), 0, 0, 1, 1},
  {&__pyx_n_u_FALLBACK_EXCEPTION, __pyx_k_FALLBACK_EXCEPTION, sizeof(__pyx_k_FALLBACK_EXCEPTION), 0, 1, 0, 1},
  {&__pyx_n_s_FALLBACK_QUIETLY, __pyx_k_FALLBACK_QUIETLY, sizeof(__pyx_k_FALLBACK_QUIETLY), 0, 0, 1, 1},
  {&__pyx_n_u_FALLBACK_QUIETLY, __pyx_k_FALLBACK_QUIETLY, sizeof(__pyx_k_FALLBACK_QUIETLY), 0, 1, 0, 1},
  {&__pyx_n_s_FALLBACK_WARNING, __pyx_k_FALLBACK_WARNING, sizeof(__pyx_k_FALLBACK_WARNING), 0, 0, 1, 1},
  {&__pyx_n_u_FALLBACK_WARNING, __pyx_k_FALLBACK_WARNING, sizeof(__pyx_k_FALLBACK_WARNING), 0, 1, 0, 1},
  {&__pyx_n_s_I, __pyx_k_I, sizeof(__pyx_k_I), 0, 0, 1, 1},
  {&__pyx_n_u_I, __pyx_k_I, sizeof(__pyx_k_I), 0, 1, 0, 1},
  {&__pyx_n_s_IGNORECASE, __pyx_k_IGNORECASE, sizeof(__pyx_k_IGNORECASE), 0, 0, 1, 1},
  {&__pyx_n_u_IGNORECASE, __pyx_k_IGNORECASE, sizeof(__pyx_k_IGNORECASE), 0, 1, 0, 1},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_n_s_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 0, 1, 1},
  {&__pyx_n_u_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 1, 0, 1},
  {&__pyx_n_s_LOCALE, __pyx_k_LOCALE, sizeof(__pyx_k_LOCALE), 0, 0, 1, 1},
  {&__pyx_n_u_LOCALE, __pyx_k_LOCALE, sizeof(__pyx_k_LOCALE), 0, 1, 0, 1},
  {&__pyx_n_s_M, __pyx_k_M, sizeof(__pyx_k_M), 0, 0, 1, 1},
  {&__pyx_n_u_M, __pyx_k_M, sizeof(__pyx_k_M), 0, 1, 0, 1},
  {&__pyx_n_s_MAXCACHE, __pyx_k_MAXCACHE, sizeof(__pyx_k_MAXCACHE), 0, 0, 1, 1},
  {&__pyx_n_s_MULTILINE, __pyx_k_MULTILINE, sizeof(__pyx_k_MULTILINE), 0, 0, 1, 1},
  {&__pyx_n_u_MULTILINE, __pyx_k_MULTILINE, sizeof(__pyx_k_MULTILINE), 0, 1, 0, 1},
  {&__pyx_n_s_Match, __pyx_k_Match, sizeof(__pyx_k_Match), 0, 0, 1, 1},
  {&__pyx_n_u_Match, __pyx_k_Match, sizeof(__pyx_k_Match), 0, 1, 0, 1},
  {&__pyx_kp_b_P_Nd, __pyx_k_P_Nd, sizeof(__pyx_k_P_Nd), 0, 0, 0, 0},
  {&__pyx_n_s_Pattern, __pyx_k_Pattern, sizeof(__pyx_k_Pattern), 0, 0, 1, 1},
  {&__pyx_n_u_Pattern, __pyx_k_Pattern, sizeof(__pyx_k_Pattern), 0, 1, 0, 1},
  {&__pyx_n_s_Pattern__finditer, __pyx_k_Pattern__finditer, sizeof(__pyx_k_Pattern__finditer), 0, 0, 1, 1},
  {&__pyx_n_s_PythonRePattern, __pyx_k_PythonRePattern, sizeof(__pyx_k_PythonRePattern), 0, 0, 1, 1},
  {&__pyx_n_s_PythonRePattern___init, __pyx_k_PythonRePattern___init, sizeof(__pyx_k_PythonRePattern___init), 0, 0, 1, 1},
  {&__pyx_n_s_PythonRePattern___reduce, __pyx_k_PythonRePattern___reduce, sizeof(__pyx_k_PythonRePattern___reduce), 0, 0, 1, 1},
  {&__pyx_n_s_PythonRePattern___repr, __pyx_k_PythonRePattern___repr, sizeof(__pyx_k_PythonRePattern___repr), 0, 0, 1, 1},
  {&__pyx_n_s_PythonRePattern_contains, __pyx_k_PythonRePattern_contains, sizeof(__pyx_k_PythonRePattern_contains), 0, 0, 1, 1},
  {&__pyx_n_s_PythonRePattern_count, __pyx_k_PythonRePattern_count, sizeof(__pyx_k_PythonRePattern_count), 0, 0, 1, 1},
  {&__pyx_n_s_PythonRePattern_findall, __pyx_k_PythonRePattern_findall, sizeof(__pyx_k_PythonRePattern_findall), 0, 0, 1, 1},
  {&__pyx_n_s_PythonRePattern_finditer, __pyx_k_PythonRePattern_finditer, sizeof(__pyx_k_PythonRePattern_finditer), 0, 0, 1, 1},
  {&__pyx_n_s_PythonRePattern_fullmatch, __pyx_k_PythonRePattern_fullmatch, sizeof(__pyx_k_PythonRePattern_fullmatch), 0, 0, 1, 1},
  {&__pyx_n_s_PythonRePattern_match, __pyx_k_PythonRePattern_match, sizeof(__pyx_k_PythonRePattern_match), 0, 0, 1, 1},
  {&__pyx_n_s_PythonRePattern_scanner, __pyx_k_PythonRePattern_scanner, sizeof(__pyx_k_PythonRePattern_scanner), 0, 0, 1, 1},
  {&__pyx_n_s_PythonRePattern_search, __pyx_k_PythonRePattern_search, sizeof(__pyx_k_PythonRePattern_search), 0, 0, 1, 1},
  {&__pyx_n_s_PythonRePattern_split, __pyx_k_PythonRePattern_split, sizeof(__pyx_k_PythonRePattern_split), 0, 0, 1, 1},
  {&__pyx_n_s_PythonRePattern_sub, __pyx_k_PythonRePattern_sub, sizeof(__pyx_k_PythonRePattern_sub), 0, 0, 1, 1},
  {&__pyx_n_s_PythonRePattern_subn, __pyx_k_PythonRePattern_subn, sizeof(__pyx_k_PythonRePattern_subn), 0, 0, 1, 1},
  {&__pyx_n_s_RegexError, __pyx_k_RegexError, sizeof(__pyx_k_RegexError), 0, 0, 1, 1},
  {&__pyx_n_u_RegexError, __pyx_k_RegexError, sizeof(__pyx_k_RegexError), 0, 1, 0, 1},
  {&__pyx_n_s_S, __pyx_k_S, sizeof(__pyx_k_S), 0, 0, 1, 1},
  {&__pyx_n_u_S, __pyx_k_S, sizeof(__pyx_k_S), 0, 1, 0, 1},
  {&__pyx_n_s_SREPattern, __pyx_k_SREPattern, sizeof(__pyx_k_SREPattern), 0, 0, 1, 1},
  {&__pyx_n_u_SREPattern, __pyx_k_SREPattern, sizeof(__pyx_k_SREPattern), 0, 1, 0, 1},
  {&__pyx_kp_s_Search_pattern_contains_backrefe, __pyx_k_Search_pattern_contains_backrefe, sizeof(__pyx_k_Search_pattern_contains_backrefe), 0, 0, 1, 0},
  {&__pyx_kp_s_Search_pattern_contains_unsuppor, __pyx_k_Search_pattern_contains_unsuppor, sizeof(__pyx_k_Search_pattern_contains_unsuppor), 0, 0, 1, 0},
  {&__pyx_kp_u_This_function_expects_a_valid_no, __pyx_k_This_function_expects_a_valid_no, sizeof(__pyx_k_This_function_expects_a_valid_no), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_U, __pyx_k_U, sizeof(__pyx_k_U), 0, 0, 1, 1},
  {&__pyx_n_u_U, __pyx_k_U, sizeof(__pyx_k_U), 0, 1, 0, 1},
  {&__pyx_n_s_UNICODE, __pyx_k_UNICODE, sizeof(__pyx_k_UNICODE), 0, 0, 1, 1},
  {&__pyx_n_u_UNICODE, __pyx_k_UNICODE, sizeof(__pyx_k_UNICODE), 0, 1, 0, 1},
  {&__pyx_n_s_VERBOSE, __pyx_k_VERBOSE, sizeof(__pyx_k_VERBOSE), 0, 0, 1, 1},
  {&__pyx_n_u_VERBOSE, __pyx_k_VERBOSE, sizeof(__pyx_k_VERBOSE), 0, 1, 0, 1},
  {&__pyx_n_s_VERSION, __pyx_k_VERSION, sizeof(__pyx_k_VERSION), 0, 0, 1, 1},
  {&__pyx_n_u_VERSION, __pyx_k_VERSION, sizeof(__pyx_k_VERSION), 0, 1, 0, 1},
  {&__pyx_n_s_VERSION_HEX, __pyx_k_VERSION_HEX, sizeof(__pyx_k_VERSION_HEX), 0, 0, 1, 1},
  {&__pyx_n_u_VERSION_HEX, __pyx_k_VERSION_HEX, sizeof(__pyx_k_VERSION_HEX), 0, 1, 0, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u_WARNING_Using_re_module_Reason_s, __pyx_k_WARNING_Using_re_module_Reason_s, sizeof(__pyx_k_WARNING_Using_re_module_Reason_s), 0, 1, 0, 0},
  {&__pyx_kp_u_W_and_S_not_supported_inside_ch, __pyx_k_W_and_S_not_supported_inside_ch, sizeof(__pyx_k_W_and_S_not_supported_inside_ch), 0, 1, 0, 0},
  {&__pyx_n_s_X, __pyx_k_X, sizeof(__pyx_k_X), 0, 0, 1, 1},
  {&__pyx_n_u_X, __pyx_k_X, sizeof(__pyx_k_X), 0, 1, 0, 1},
  {&__pyx_kp_u__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 1, 0, 0},
  {&__pyx_kp_b__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 0, 0, 0},
  {&__pyx_kp_u__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 1, 0, 0},
  {&__pyx_kp_b__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 0, 0, 0},
  {&__pyx_kp_b__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 0, 0, 0},
  {&__pyx_kp_u__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 0},
  {&__pyx_kp_b__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 0, 0, 0},
  {&__pyx_kp_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
  {&__pyx_kp_b__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 0, 0, 0},
  {&__pyx_kp_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
  {&__pyx_kp_u__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 1, 0, 0},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_kp_u_available_groups, __pyx_k_available_groups, sizeof(__pyx_k_available_groups), 0, 1, 0, 0},
  {&__pyx_kp_u_bad_character_in_group_name, __pyx_k_bad_character_in_group_name, sizeof(__pyx_k_bad_character_in_group_name), 0, 1, 0, 0},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_cache, __pyx_k_cache, sizeof(__pyx_k_cache), 0, 0, 1, 1},
  {&__pyx_n_s_cache_repl, __pyx_k_cache_repl, sizeof(__pyx_k_cache_repl), 0, 0, 1, 1},
  {&__pyx_n_s_cachekey, __pyx_k_cachekey, sizeof(__pyx_k_cachekey), 0, 0, 1, 1},
  {&__pyx_kp_u_can_t_use_a_bytes_pattern_on_a_s, __pyx_k_can_t_use_a_bytes_pattern_on_a_s, sizeof(__pyx_k_can_t_use_a_bytes_pattern_on_a_s), 0, 1, 0, 0},
  {&__pyx_kp_u_can_t_use_a_string_pattern_on_a, __pyx_k_can_t_use_a_string_pattern_on_a, sizeof(__pyx_k_can_t_use_a_string_pattern_on_a), 0, 1, 0, 0},
  {&__pyx_kp_u_cannot_expand_bytes_template_on, __pyx_k_cannot_expand_bytes_template_on, sizeof(__pyx_k_cannot_expand_bytes_template_on), 0, 1, 0, 0},
  {&__pyx_kp_u_cannot_expand_unicode_template_o, __pyx_k_cannot_expand_unicode_template_o, sizeof(__pyx_k_cannot_expand_unicode_template_o), 0, 1, 0, 0},
  {&__pyx_n_s_clear, __pyx_k_clear, sizeof(__pyx_k_clear), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_compile, __pyx_k_compile, sizeof(__pyx_k_compile), 0, 0, 1, 1},
  {&__pyx_n_s_compile_2, __pyx_k_compile_2, sizeof(__pyx_k_compile_2), 0, 0, 1, 1},
  {&__pyx_n_u_compile_2, __pyx_k_compile_2, sizeof(__pyx_k_compile_2), 0, 1, 0, 1},
  {&__pyx_n_s_compile_locals_fallback, __pyx_k_compile_locals_fallback, sizeof(__pyx_k_compile_locals_fallback), 0, 0, 1, 1},
  {&__pyx_kp_s_compile_pxi, __pyx_k_compile_pxi, sizeof(__pyx_k_compile_pxi), 0, 0, 1, 0},
  {&__pyx_n_s_contains, __pyx_k_contains, sizeof(__pyx_k_contains), 0, 0, 1, 1},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_u_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 1, 0, 1},
  {&__pyx_n_s_cstring, __pyx_k_cstring, sizeof(__pyx_k_cstring), 0, 0, 1, 1},
  {&__pyx_n_u_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 1, 0, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_s_default, __pyx_k_default, sizeof(__pyx_k_default), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_dump_pattern, __pyx_k_dump_pattern, sizeof(__pyx_k_dump_pattern), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_encoded, __pyx_k_encoded, sizeof(__pyx_k_encoded), 0, 0, 1, 1},
  {&__pyx_n_s_endpos, __pyx_k_endpos, sizeof(__pyx_k_endpos), 0, 0, 1, 1},
  {&__pyx_n_s_err, __pyx_k_err, sizeof(__pyx_k_err), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_u_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 1, 0, 1},
  {&__pyx_n_s_error_code, __pyx_k_error_code, sizeof(__pyx_k_error_code), 0, 0, 1, 1},
  {&__pyx_n_s_error_msg, __pyx_k_error_msg, sizeof(__pyx_k_error_msg), 0, 0, 1, 1},
  {&__pyx_n_s_escape, __pyx_k_escape, sizeof(__pyx_k_escape), 0, 0, 1, 1},
  {&__pyx_n_u_escape, __pyx_k_escape, sizeof(__pyx_k_escape), 0, 1, 0, 1},
  {&__pyx_kp_u_expected_string_or_buffer, __pyx_k_expected_string_or_buffer, sizeof(__pyx_k_expected_string_or_buffer), 0, 1, 0, 0},
  {&__pyx_n_s_extend, __pyx_k_extend, sizeof(__pyx_k_extend), 0, 0, 1, 1},
  {&__pyx_n_s_fallback, __pyx_k_fallback, sizeof(__pyx_k_fallback), 0, 0, 1, 1},
  {&__pyx_n_s_find, __pyx_k_find, sizeof(__pyx_k_find), 0, 0, 1, 1},
  {&__pyx_n_s_findall, __pyx_k_findall, sizeof(__pyx_k_findall), 0, 0, 1, 1},
  {&__pyx_n_u_findall, __pyx_k_findall, sizeof(__pyx_k_findall), 0, 1, 0, 1},
  {&__pyx_n_s_finditer, __pyx_k_finditer, sizeof(__pyx_k_finditer), 0, 0, 1, 1},
  {&__pyx_n_s_finditer_2, __pyx_k_finditer_2, sizeof(__pyx_k_finditer_2), 0, 0, 1, 1},
  {&__pyx_n_u_finditer_2, __pyx_k_finditer_2, sizeof(__pyx_k_finditer_2), 0, 1, 0, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_fullmatch, __pyx_k_fullmatch, sizeof(__pyx_k_fullmatch), 0, 0, 1, 1},
  {&__pyx_n_u_fullmatch, __pyx_k_fullmatch, sizeof(__pyx_k_fullmatch), 0, 1, 0, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_group, __pyx_k_group, sizeof(__pyx_k_group), 0, 0, 1, 1},
  {&__pyx_n_s_groupindex, __pyx_k_groupindex, sizeof(__pyx_k_groupindex), 0, 0, 1, 1},
  {&__pyx_n_s_groups, __pyx_k_groups, sizeof(__pyx_k_groups), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_kp_u_invalid_group_reference, __pyx_k_invalid_group_reference, sizeof(__pyx_k_invalid_group_reference), 0, 1, 0, 0},
  {&__pyx_n_s_isalnum, __pyx_k_isalnum, sizeof(__pyx_k_isalnum), 0, 0, 1, 1},
  {&__pyx_n_s_isdigit, __pyx_k_isdigit, sizeof(__pyx_k_isdigit), 0, 0, 1, 1},
  {&__pyx_n_s_it, __pyx_k_it, sizeof(__pyx_k_it), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_level, __pyx_k_level, sizeof(__pyx_k_level), 0, 0, 1, 1},
  {&__pyx_n_b_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 0, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_match, __pyx_k_match, sizeof(__pyx_k_match), 0, 0, 1, 1},
  {&__pyx_n_u_match, __pyx_k_match, sizeof(__pyx_k_match), 0, 1, 0, 1},
  {&__pyx_kp_u_match_2, __pyx_k_match_2, sizeof(__pyx_k_match_2), 0, 1, 0, 0},
  {&__pyx_n_s_max_mem, __pyx_k_max_mem, sizeof(__pyx_k_max_mem), 0, 0, 1, 1},
  {&__pyx_n_s_maxsplit, __pyx_k_maxsplit, sizeof(__pyx_k_maxsplit), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_kp_u_missing_group_name, __pyx_k_missing_group_name, sizeof(__pyx_k_missing_group_name), 0, 1, 0, 0},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_named_groups, __pyx_k_named_groups, sizeof(__pyx_k_named_groups), 0, 0, 1, 1},
  {&__pyx_n_s_newflags, __pyx_k_newflags, sizeof(__pyx_k_newflags), 0, 0, 1, 1},
  {&__pyx_kp_u_no_such_group, __pyx_k_no_such_group, sizeof(__pyx_k_no_such_group), 0, 1, 0, 0},
  {&__pyx_n_s_num_groups, __pyx_k_num_groups, sizeof(__pyx_k_num_groups), 0, 0, 1, 1},
  {&__pyx_n_s_opts, __pyx_k_opts, sizeof(__pyx_k_opts), 0, 0, 1, 1},
  {&__pyx_n_s_original_pattern, __pyx_k_original_pattern, sizeof(__pyx_k_original_pattern), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_kp_b_p_L_p_Nd, __pyx_k_p_L_p_Nd, sizeof(__pyx_k_p_L_p_Nd), 0, 0, 0, 0},
  {&__pyx_kp_b_p_L_p_Nd_2, __pyx_k_p_L_p_Nd_2, sizeof(__pyx_k_p_L_p_Nd_2), 0, 0, 0, 0},
  {&__pyx_kp_b_p_L_p_Nd_3, __pyx_k_p_L_p_Nd_3, sizeof(__pyx_k_p_L_p_Nd_3), 0, 0, 0, 0},
  {&__pyx_kp_b_p_Nd, __pyx_k_p_Nd, sizeof(__pyx_k_p_Nd), 0, 0, 0, 0},
  {&__pyx_kp_b_p_Nd_2, __pyx_k_p_Nd_2, sizeof(__pyx_k_p_Nd_2), 0, 0, 0, 0},
  {&__pyx_n_s_pattern, __pyx_k_pattern, sizeof(__pyx_k_pattern), 0, 0, 1, 1},
  {&__pyx_n_s_pattern_2, __pyx_k_pattern_2, sizeof(__pyx_k_pattern_2), 0, 0, 1, 1},
  {&__pyx_n_s_pattern_object, __pyx_k_pattern_object, sizeof(__pyx_k_pattern_object), 0, 0, 1, 1},
  {&__pyx_kp_s_pattern_pxi, __pyx_k_pattern_pxi, sizeof(__pyx_k_pattern_pxi), 0, 0, 1, 0},
  {&__pyx_n_s_popitem, __pyx_k_popitem, sizeof(__pyx_k_popitem), 0, 0, 1, 1},
  {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_prepare_pattern, __pyx_k_prepare_pattern, sizeof(__pyx_k_prepare_pattern), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_purge, __pyx_k_purge, sizeof(__pyx_k_purge), 0, 0, 1, 1},
  {&__pyx_n_u_purge, __pyx_k_purge, sizeof(__pyx_k_purge), 0, 1, 0, 1},
  {&__pyx_n_s_pypattern, __pyx_k_pypattern, sizeof(__pyx_k_pypattern), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_re, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
  {&__pyx_n_s_re2, __pyx_k_re2, sizeof(__pyx_k_re2), 0, 0, 1, 1},
  {&__pyx_kp_u_re2_Match_object_span, __pyx_k_re2_Match_object_span, sizeof(__pyx_k_re2_Match_object_span), 0, 1, 0, 0},
  {&__pyx_kp_u_re2_compile, __pyx_k_re2_compile, sizeof(__pyx_k_re2_compile), 0, 1, 0, 0},
  {&__pyx_kp_u_re2_compile_r, __pyx_k_re2_compile_r, sizeof(__pyx_k_re2_compile_r), 0, 1, 0, 0},
  {&__pyx_kp_s_re2_pyx, __pyx_k_re2_pyx, sizeof(__pyx_k_re2_pyx), 0, 0, 1, 0},
  {&__pyx_kp_u_re_LOCALE_not_supported, __pyx_k_re_LOCALE_not_supported, sizeof(__pyx_k_re_LOCALE_not_supported), 0, 1, 0, 0},
  {&__pyx_n_s_re_pattern, __pyx_k_re_pattern, sizeof(__pyx_k_re_pattern), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_repl, __pyx_k_repl, sizeof(__pyx_k_repl), 0, 0, 1, 1},
  {&__pyx_n_s_repr, __pyx_k_repr, sizeof(__pyx_k_repr), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_b_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 0, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_kp_b_s_p_Z, __pyx_k_s_p_Z, sizeof(__pyx_k_s_p_Z), 0, 0, 0, 0},
  {&__pyx_kp_b_s_p_Z_2, __pyx_k_s_p_Z_2, sizeof(__pyx_k_s_p_Z_2), 0, 0, 0, 0},
  {&__pyx_kp_b_s_p_Z_3, __pyx_k_s_p_Z_3, sizeof(__pyx_k_s_p_Z_3), 0, 0, 0, 0},
  {&__pyx_n_s_scanner, __pyx_k_scanner, sizeof(__pyx_k_scanner), 0, 0, 1, 1},
  {&__pyx_n_s_search, __pyx_k_search, sizeof(__pyx_k_search), 0, 0, 1, 1},
  {&__pyx_n_u_search, __pyx_k_search, sizeof(__pyx_k_search), 0, 1, 0, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_kp_s_self_matches_cannot_be_converted, __pyx_k_self_matches_cannot_be_converted, sizeof(__pyx_k_self_matches_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_set_fallback_notification, __pyx_k_set_fallback_notification, sizeof(__pyx_k_set_fallback_notification), 0, 0, 1, 1},
  {&__pyx_n_u_set_fallback_notification, __pyx_k_set_fallback_notification, sizeof(__pyx_k_set_fallback_notification), 0, 1, 0, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_span, __pyx_k_span, sizeof(__pyx_k_span), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_u_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 1, 0, 1},
  {&__pyx_n_s_string, __pyx_k_string, sizeof(__pyx_k_string), 0, 0, 1, 1},
  {&__pyx_n_s_sub, __pyx_k_sub, sizeof(__pyx_k_sub), 0, 0, 1, 1},
  {&__pyx_n_u_sub, __pyx_k_sub, sizeof(__pyx_k_sub), 0, 1, 0, 1},
  {&__pyx_n_s_subn, __pyx_k_subn, sizeof(__pyx_k_subn), 0, 0, 1, 1},
  {&__pyx_n_u_subn, __pyx_k_subn, sizeof(__pyx_k_subn), 0, 1, 0, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_that, __pyx_k_that, sizeof(__pyx_k_that), 0, 0, 1, 1},
  {&__pyx_n_s_this, __pyx_k_this, sizeof(__pyx_k_this), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_kp_u_unexpected_end_of_regular_expres, __pyx_k_unexpected_end_of_regular_expres, sizeof(__pyx_k_unexpected_end_of_regular_expres), 0, 1, 0, 0},
  {&__pyx_n_s_uni, __pyx_k_uni, sizeof(__pyx_k_uni), 0, 0, 1, 1},
  {&__pyx_kp_u_unterminated_group_name, __pyx_k_unterminated_group_name, sizeof(__pyx_k_unterminated_group_name), 0, 1, 0, 0},
  {&__pyx_n_u_utf8, __pyx_k_utf8, sizeof(__pyx_k_utf8), 0, 1, 0, 1},
  {&__pyx_n_s_warn, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_kp_b_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 36, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 110, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 44, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 212, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(2, 70, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "compile.pxi":16
 * def _compile(object pattern, int flags=0, int max_mem=8388608):
 *     """Compile a regular expression pattern, returning a pattern object."""
 *     def fallback(pattern, flags, error_msg):             # <<<<<<<<<<<<<<
 *         """Raise error, warn, or simply return fallback from re module."""
 *         if current_notification == FALLBACK_EXCEPTION:
 */
  __pyx_tuple_ = PyTuple_Pack(5, __pyx_n_s_pattern, __pyx_n_s_flags, __pyx_n_s_error_msg, __pyx_n_s_result, __pyx_n_s_err); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_compile_pxi, __pyx_n_s_fallback, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 16, __pyx_L1_error)

  /* "compile.pxi":36
 *     if isinstance(pattern, (Pattern, SREPattern)):
 *         if flags:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                     'Cannot process flags argument with a compiled pattern')
 *         return pattern
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Cannot_process_flags_argument_wi); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "pattern.pxi":44
 *         bytestr = unicode_to_bytes(string, &encoded, self.encoded)
 *         if pystring_to_cstring(bytestr, &cstring, &size, &buf) == -1:
 *             raise TypeError('expected string or buffer')             # <<<<<<<<<<<<<<
 *         try:
 *             if encoded == 2 and (pos or endpos != -1):
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_expected_string_or_buffer); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "match.pxi":116
 *         if isinstance(template, unicode):
 *             if not PY2 and not self.encoded:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                         'cannot expand unicode template on bytes pattern')
 *             templ = template.encode('utf8')
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_cannot_expand_unicode_template_o); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(2, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "match.pxi":121
 *         else:
 *             if not PY2 and self.encoded:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                         'cannot expand bytes template on unicode pattern')
 *             templ = bytes(template)
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_cannot_expand_bytes_template_on); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(2, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "match.pxi":251
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:
 *                 spans.append((-1, -1))             # <<<<<<<<<<<<<<
 *             else:
 *                 piece = &self.matches[i]
 */
  __pyx_tuple__12 = PyTuple_Pack(2, __pyx_int_neg_1, __pyx_int_neg_1); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(2, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.matches cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.matches cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_self_matches_cannot_be_converted); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(3, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":4
 *     raise TypeError("self.matches cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.matches cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_self_matches_cannot_be_converted); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(3, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "re2.pyx":275
 *     level = int(level)
 *     if level < 0 or level > 2:
 *         raise ValueError("This function expects a valid notification level.")             # <<<<<<<<<<<<<<
 *     current_notification = level
 * 
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_u_This_function_expects_a_valid_no); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(4, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "re2.pyx":334
 *         encoded[0] = 0
 *     if not PY2 and checkotherencoding > 0 and not encoded[0]:
 *         raise TypeError("can't use a string pattern on a bytes-like object")             # <<<<<<<<<<<<<<
 *     elif not PY2 and checkotherencoding == 0 and encoded[0]:
 *         raise TypeError("can't use a bytes pattern on a string-like object")
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_can_t_use_a_string_pattern_on_a); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(4, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "re2.pyx":336
 *         raise TypeError("can't use a string pattern on a bytes-like object")
 *     elif not PY2 and checkotherencoding == 0 and encoded[0]:
 *         raise TypeError("can't use a bytes pattern on a string-like object")             # <<<<<<<<<<<<<<
 *     return pystring
 * 
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_u_can_t_use_a_bytes_pattern_on_a_s); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(4, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "re2.pyx":130
 * FALLBACK_EXCEPTION = 2
 * 
 * VERSION = (0, 2, 23)             # <<<<<<<<<<<<<<
 * VERSION_HEX = 0x000217
 * 
 */
  __pyx_tuple__20 = PyTuple_Pack(3, __pyx_int_0, __pyx_int_2, __pyx_int_23); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(4, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "re2.pyx":137
 * 
 * # Type of compiled re object from Python stdlib
 * SREPattern = type(re.compile(''))             # <<<<<<<<<<<<<<
 * 
 * _cache = {}
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u__7); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(4, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "compile.pxi":2
 * 
 * def compile(pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     cachekey = (type(pattern), pattern, flags)
 *     if cachekey in _cache:
 */
  __pyx_tuple__22 = PyTuple_Pack(5, __pyx_n_s_pattern, __pyx_n_s_flags, __pyx_n_s_max_mem, __pyx_n_s_cachekey, __pyx_n_s_p); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_compile_pxi, __pyx_n_s_compile_2, 2, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 2, __pyx_L1_error)

  /* "compile.pxi":14
 * 
 * 
 * def _compile(object pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     """Compile a regular expression pattern, returning a pattern object."""
 *     def fallback(pattern, flags, error_msg):
 */
  __pyx_tuple__24 = PyTuple_Pack(16, __pyx_n_s_pattern, __pyx_n_s_flags, __pyx_n_s_max_mem, __pyx_n_s_fallback, __pyx_n_s_fallback, __pyx_n_s_s, __pyx_n_s_opts, __pyx_n_s_error_code, __pyx_n_s_encoded, __pyx_n_s_original_pattern, __pyx_n_s_newflags, __pyx_n_s_re_pattern, __pyx_n_s_error_msg, __pyx_n_s_pypattern, __pyx_n_s_named_groups, __pyx_n_s_it); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(3, 0, 16, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_compile_pxi, __pyx_n_s_compile, 14, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 14, __pyx_L1_error)

  /* "compile.pxi":115
 * 
 * 
 * def _prepare_pattern(bytes pattern, int flags):             # <<<<<<<<<<<<<<
 *     """Translate pattern to RE2 syntax."""
 *     cdef bytearray result = bytearray()
 */
  __pyx_tuple__26 = PyTuple_Pack(8, __pyx_n_s_pattern, __pyx_n_s_flags, __pyx_n_s_result, __pyx_n_s_cstring, __pyx_n_s_this, __pyx_n_s_that, __pyx_n_s_size, __pyx_n_s_n); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(2, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_compile_pxi, __pyx_n_s_prepare_pattern, 115, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 115, __pyx_L1_error)

  /* "pattern.pxi":594
 *     """A wrapper for re.Pattern to support the extra methods defined by re2
 *     (contains, count)."""
 *     def __init__(self, pattern, flags=None):             # <<<<<<<<<<<<<<
 *         self._pattern = re.compile(pattern, flags)
 *         self.pattern = pattern
 */
  __pyx_tuple__28 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_pattern, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pattern_pxi, __pyx_n_s_init, 594, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(1, 594, __pyx_L1_error)
  __pyx_tuple__30 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(1, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "pattern.pxi":601
 *         self.groups = self._pattern.groups
 * 
 *     def contains(self, string):             # <<<<<<<<<<<<<<
 *         return bool(self._pattern.search(string))
 * 
 */
  __pyx_tuple__31 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_string); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(1, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pattern_pxi, __pyx_n_s_contains, 601, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(1, 601, __pyx_L1_error)

  /* "pattern.pxi":604
 *         return bool(self._pattern.search(string))
 * 
 *     def count(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return len(self._pattern.findall(string, pos, endpos))
 * 
 */
  __pyx_tuple__33 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_string, __pyx_n_s_pos, __pyx_n_s_endpos); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pattern_pxi, __pyx_n_s_count, 604, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(1, 604, __pyx_L1_error)
  __pyx_tuple__35 = PyTuple_Pack(2, ((PyObject *)__pyx_int_0), ((PyObject *)__pyx_int_9223372036854775807)); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(1, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "pattern.pxi":607
 *         return len(self._pattern.findall(string, pos, endpos))
 * 
 *     def findall(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.findall(string, pos, endpos)
 * 
 */
  __pyx_tuple__36 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_string, __pyx_n_s_pos, __pyx_n_s_endpos); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(1, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pattern_pxi, __pyx_n_s_findall, 607, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(1, 607, __pyx_L1_error)
  __pyx_tuple__38 = PyTuple_Pack(2, ((PyObject *)__pyx_int_0), ((PyObject *)__pyx_int_9223372036854775807)); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "pattern.pxi":610
 *         return self._pattern.findall(string, pos, endpos)
 * 
 *     def finditer(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.finditer(string, pos, endpos)
 * 
 */
  __pyx_tuple__39 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_string, __pyx_n_s_pos, __pyx_n_s_endpos); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(1, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pattern_pxi, __pyx_n_s_finditer_2, 610, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(1, 610, __pyx_L1_error)
  __pyx_tuple__41 = PyTuple_Pack(2, ((PyObject *)__pyx_int_0), ((PyObject *)__pyx_int_9223372036854775807)); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(1, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "pattern.pxi":613
 *         return self._pattern.finditer(string, pos, endpos)
 * 
 *     def fullmatch(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.fullmatch(string, pos, endpos)
 * 
 */
  __pyx_tuple__42 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_string, __pyx_n_s_pos, __pyx_n_s_endpos); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(1, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pattern_pxi, __pyx_n_s_fullmatch, 613, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(1, 613, __pyx_L1_error)
  __pyx_tuple__44 = PyTuple_Pack(2, ((PyObject *)__pyx_int_0), ((PyObject *)__pyx_int_9223372036854775807)); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(1, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "pattern.pxi":616
 *         return self._pattern.fullmatch(string, pos, endpos)
 * 
 *     def match(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.match(string, pos, endpos)
 * 
 */
  __pyx_tuple__45 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_string, __pyx_n_s_pos, __pyx_n_s_endpos); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pattern_pxi, __pyx_n_s_match, 616, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(1, 616, __pyx_L1_error)
  __pyx_tuple__47 = PyTuple_Pack(2, ((PyObject *)__pyx_int_0), ((PyObject *)__pyx_int_9223372036854775807)); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "pattern.pxi":619
 *         return self._pattern.match(string, pos, endpos)
 * 
 *     def scanner(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.scanner(string, pos, endpos)
 * 
 */
  __pyx_tuple__48 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_string, __pyx_n_s_pos, __pyx_n_s_endpos); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(1, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pattern_pxi, __pyx_n_s_scanner, 619, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(1, 619, __pyx_L1_error)
  __pyx_tuple__50 = PyTuple_Pack(2, ((PyObject *)__pyx_int_0), ((PyObject *)__pyx_int_9223372036854775807)); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(1, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "pattern.pxi":622
 *         return self._pattern.scanner(string, pos, endpos)
 * 
 *     def search(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.search(string, pos, endpos)
 * 
 */
  __pyx_tuple__51 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_string, __pyx_n_s_pos, __pyx_n_s_endpos); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(1, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pattern_pxi, __pyx_n_s_search, 622, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(1, 622, __pyx_L1_error)
  __pyx_tuple__53 = PyTuple_Pack(2, ((PyObject *)__pyx_int_0), ((PyObject *)__pyx_int_9223372036854775807)); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(1, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "pattern.pxi":625
 *         return self._pattern.search(string, pos, endpos)
 * 
 *     def split(self, string, maxsplit=0):             # <<<<<<<<<<<<<<
 *         return self._pattern.split(string, maxsplit)
 * 
 */
  __pyx_tuple__54 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_string, __pyx_n_s_maxsplit); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pattern_pxi, __pyx_n_s_split, 625, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(1, 625, __pyx_L1_error)
  __pyx_tuple__56 = PyTuple_Pack(1, ((PyObject *)__pyx_int_0)); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "pattern.pxi":628
 *         return self._pattern.split(string, maxsplit)
 * 
 *     def sub(self, repl, string, count=0):             # <<<<<<<<<<<<<<
 *         return self._pattern.sub(repl, string, count)
 * 
 */
  __pyx_tuple__57 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_repl, __pyx_n_s_string, __pyx_n_s_count); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(1, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pattern_pxi, __pyx_n_s_sub, 628, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(1, 628, __pyx_L1_error)
  __pyx_tuple__59 = PyTuple_Pack(1, ((PyObject *)__pyx_int_0)); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(1, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "pattern.pxi":631
 *         return self._pattern.sub(repl, string, count)
 * 
 *     def subn(self, repl, string, count=0):             # <<<<<<<<<<<<<<
 *         return self._pattern.subn(repl, string, count)
 * 
 */
  __pyx_tuple__60 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_repl, __pyx_n_s_string, __pyx_n_s_count); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(1, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pattern_pxi, __pyx_n_s_subn, 631, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(1, 631, __pyx_L1_error)
  __pyx_tuple__62 = PyTuple_Pack(1, ((PyObject *)__pyx_int_0)); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(1, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "pattern.pxi":634
 *         return self._pattern.subn(repl, string, count)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return repr(self._pattern)
 * 
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(1, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pattern_pxi, __pyx_n_s_repr, 634, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(1, 634, __pyx_L1_error)

  /* "pattern.pxi":637
 *         return repr(self._pattern)
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return (self, (self.pattern, self.flags))
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(1, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pattern_pxi, __pyx_n_s_reduce, 637, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(1, 637, __pyx_L1_error)

  /* "re2.pyx":150
 * 
 * 
 * def purge():             # <<<<<<<<<<<<<<
 *     """Clear the regular expression caches."""
 *     _cache.clear()
 */
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_re2_pyx, __pyx_n_s_purge, 150, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(4, 150, __pyx_L1_error)

  /* "re2.pyx":156
 * 
 * 
 * def search(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Scan through string looking for a match to the pattern, returning
 *     a ``Match`` object or none if no match was found."""
 */
  __pyx_tuple__68 = PyTuple_Pack(3, __pyx_n_s_pattern, __pyx_n_s_string, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(4, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_re2_pyx, __pyx_n_s_search, 156, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(4, 156, __pyx_L1_error)

  /* "re2.pyx":162
 * 
 * 
 * def match(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Try to apply the pattern at the start of the string, returning
 *     a ``Match`` object, or ``None`` if no match was found."""
 */
  __pyx_tuple__70 = PyTuple_Pack(3, __pyx_n_s_pattern, __pyx_n_s_string, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(4, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_re2_pyx, __pyx_n_s_match, 162, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(4, 162, __pyx_L1_error)

  /* "re2.pyx":168
 * 
 * 
 * def fullmatch(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Try to apply the pattern to the entire string, returning
 *     a ``Match`` object, or ``None`` if no match was found."""
 */
  __pyx_tuple__72 = PyTuple_Pack(3, __pyx_n_s_pattern, __pyx_n_s_string, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(4, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_re2_pyx, __pyx_n_s_fullmatch, 168, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(4, 168, __pyx_L1_error)

  /* "re2.pyx":174
 * 
 * 
 * def contains(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Scan through string looking for a match to the pattern, returning
 *     True or False."""
 */
  __pyx_tuple__74 = PyTuple_Pack(3, __pyx_n_s_pattern, __pyx_n_s_string, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(4, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_re2_pyx, __pyx_n_s_contains, 174, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(4, 174, __pyx_L1_error)

  /* "re2.pyx":180
 * 
 * 
 * def finditer(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Yield all non-overlapping matches in the string.
 * 
 */
  __pyx_tuple__76 = PyTuple_Pack(3, __pyx_n_s_pattern, __pyx_n_s_string, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(4, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_re2_pyx, __pyx_n_s_finditer_2, 180, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(4, 180, __pyx_L1_error)

  /* "re2.pyx":188
 * 
 * 
 * def findall(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Return a list of all non-overlapping matches in the string.
 * 
 */
  __pyx_tuple__78 = PyTuple_Pack(3, __pyx_n_s_pattern, __pyx_n_s_string, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(4, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_re2_pyx, __pyx_n_s_findall, 188, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(4, 188, __pyx_L1_error)

  /* "re2.pyx":196
 * 
 * 
 * def count(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Return number of non-overlapping matches in the string.
 * 
 */
  __pyx_tuple__80 = PyTuple_Pack(3, __pyx_n_s_pattern, __pyx_n_s_string, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(4, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_re2_pyx, __pyx_n_s_count, 196, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(4, 196, __pyx_L1_error)

  /* "re2.pyx":203
 * 
 * 
 * def split(pattern, string, int maxsplit=0, int flags=0):             # <<<<<<<<<<<<<<
 *     """Split the source string by the occurrences of the pattern,
 *     returning a list containing the resulting substrings."""
 */
  __pyx_tuple__82 = PyTuple_Pack(4, __pyx_n_s_pattern, __pyx_n_s_string, __pyx_n_s_maxsplit, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(4, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_re2_pyx, __pyx_n_s_split, 203, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(4, 203, __pyx_L1_error)

  /* "re2.pyx":209
 * 
 * 
 * def sub(pattern, repl, string, int count=0, int flags=0):             # <<<<<<<<<<<<<<
 *     """Return the string obtained by replacing the leftmost
 *     non-overlapping occurrences of the pattern in string by the
 */
  __pyx_tuple__84 = PyTuple_Pack(5, __pyx_n_s_pattern, __pyx_n_s_repl, __pyx_n_s_string, __pyx_n_s_count, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(4, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_re2_pyx, __pyx_n_s_sub, 209, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(4, 209, __pyx_L1_error)

  /* "re2.pyx":219
 * 
 * 
 * def subn(pattern, repl, string, int count=0, int flags=0):             # <<<<<<<<<<<<<<
 *     """Return a 2-tuple containing ``(new_string, number)``.
 *     new_string is the string obtained by replacing the leftmost
 */
  __pyx_tuple__86 = PyTuple_Pack(5, __pyx_n_s_pattern, __pyx_n_s_repl, __pyx_n_s_string, __pyx_n_s_count, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(4, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_re2_pyx, __pyx_n_s_subn, 219, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(4, 219, __pyx_L1_error)

  /* "re2.pyx":231
 * 
 * 
 * def escape(pattern):             # <<<<<<<<<<<<<<
 *     """Escape all non-alphanumeric characters in pattern."""
 *     cdef bint uni = isinstance(pattern, unicode)
 */
  __pyx_tuple__88 = PyTuple_Pack(6, __pyx_n_s_pattern, __pyx_n_s_uni, __pyx_n_s_s, __pyx_n_s_i, __pyx_n_s_c, __pyx_n_s_c); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(4, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(1, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_re2_pyx, __pyx_n_s_escape, 231, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(4, 231, __pyx_L1_error)

  /* "re2.pyx":266
 * 
 * 
 * def set_fallback_notification(level):             # <<<<<<<<<<<<<<
 *     """Set the fallback notification to a level; one of:
 *         FALLBACK_QUIETLY
 */
  __pyx_tuple__90 = PyTuple_Pack(1, __pyx_n_s_level); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(4, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_re2_pyx, __pyx_n_s_set_fallback_notification, 266, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(4, 266, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyByteArray_Type_extend.type = (PyObject*)&PyByteArray_Type;
  __pyx_umethod_PyBytes_Type_find.type = (PyObject*)&PyBytes_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(4, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_int_16 = PyInt_FromLong(16); if (unlikely(!__pyx_int_16)) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_int_23 = PyInt_FromLong(23); if (unlikely(!__pyx_int_23)) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_int_255 = PyInt_FromLong(255); if (unlikely(!__pyx_int_255)) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_int_256 = PyInt_FromLong(256); if (unlikely(!__pyx_int_256)) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_int_535 = PyInt_FromLong(535); if (unlikely(!__pyx_int_535)) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_int_9223372036854775807 = PyInt_FromString((char *)"9223372036854775807", 0, 0); if (unlikely(!__pyx_int_9223372036854775807)) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(4, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_3re2_Pattern = &__pyx_vtable_3re2_Pattern;
  __pyx_vtable_3re2_Pattern._search = (PyObject *(*)(struct __pyx_obj_3re2_Pattern *, PyObject *, int, int, RE2::Anchor))__pyx_f_3re2_7Pattern__search;
  __pyx_vtable_3re2_Pattern._subn = (PyObject *(*)(struct __pyx_obj_3re2_Pattern *, PyObject *, PyObject *, int, int *))__pyx_f_3re2_7Pattern__subn;
  __pyx_vtable_3re2_Pattern._subn_callback = (PyObject *(*)(struct __pyx_obj_3re2_Pattern *, PyObject *, PyObject *, int, int *))__pyx_f_3re2_7Pattern__subn_callback;
  __pyx_vtable_3re2_Pattern._subn_expand = (PyObject *(*)(struct __pyx_obj_3re2_Pattern *, PyObject *, PyObject *, int, int *))__pyx_f_3re2_7Pattern__subn_expand;
  if (PyType_Ready(&__pyx_type_3re2_Pattern) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_3re2_Pattern.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_3re2_Pattern.tp_dictoffset && __pyx_type_3re2_Pattern.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_3re2_Pattern.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_3re2_Pattern.tp_dict, __pyx_vtabptr_3re2_Pattern) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Pattern, (PyObject *)&__pyx_type_3re2_Pattern) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__pyx_type_3re2_Pattern.tp_weaklistoffset == 0) __pyx_type_3re2_Pattern.tp_weaklistoffset = offsetof(struct __pyx_obj_3re2_Pattern, __weakref__);
  __pyx_ptype_3re2_Pattern = &__pyx_type_3re2_Pattern;
  __pyx_vtabptr_3re2_Match = &__pyx_vtable_3re2_Match;
  __pyx_vtable_3re2_Match._init_groups = (PyObject *(*)(struct __pyx_obj_3re2_Match *))__pyx_f_3re2_5Match__init_groups;
  __pyx_vtable_3re2_Match._group = (PyObject *(*)(struct __pyx_obj_3re2_Match *, PyObject *))__pyx_f_3re2_5Match__group;
  __pyx_vtable_3re2_Match._groupdict = (PyObject *(*)(struct __pyx_obj_3re2_Match *))__pyx_f_3re2_5Match__groupdict;
  __pyx_vtable_3re2_Match._expand = (PyObject *(*)(struct __pyx_obj_3re2_Match *, PyObject *, PyObject *))__pyx_f_3re2_5Match__expand;
  __pyx_vtable_3re2_Match._make_spans = (PyObject *(*)(struct __pyx_obj_3re2_Match *, char *, int, int *, int *))__pyx_f_3re2_5Match__make_spans;
  __pyx_vtable_3re2_Match._convert_spans = (PyObject *(*)(struct __pyx_obj_3re2_Match *, PyObject *, char *, int, int *, int *))__pyx_f_3re2_5Match__convert_spans;
  if (PyType_Ready(&__pyx_type_3re2_Match) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_3re2_Match.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_3re2_Match.tp_dictoffset && __pyx_type_3re2_Match.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_3re2_Match.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_3re2_Match.tp_dict, __pyx_vtabptr_3re2_Match) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Match, (PyObject *)&__pyx_type_3re2_Match) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_3re2_Match) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_ptype_3re2_Match = &__pyx_type_3re2_Match;
  if (PyType_Ready(&__pyx_type_3re2___pyx_scope_struct___finditer) < 0) __PYX_ERR(1, 242, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_3re2___pyx_scope_struct___finditer.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_3re2___pyx_scope_struct___finditer.tp_dictoffset && __pyx_type_3re2___pyx_scope_struct___finditer.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_3re2___pyx_scope_struct___finditer.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_3re2___pyx_scope_struct___finditer = &__pyx_type_3re2___pyx_scope_struct___finditer;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initre2(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initre2(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_re2(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_re2(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_re2(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 're2' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_re2(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(4, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("re2", __pyx_methods, __pyx_k_Regular_expressions_using_Google, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(4, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(4, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(4, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(4, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(4, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_re2) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(4, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "re2")) {
      if (unlikely(PyDict_SetItemString(modules, "re2", __pyx_m) < 0)) __PYX_ERR(4, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(4, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  #endif

  /* "re2.pyx":108
 * include "includes.pxi"
 * 
 * import re             # <<<<<<<<<<<<<<
 * import sys
 * import warnings
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_re, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_re, __pyx_t_1) < 0) __PYX_ERR(4, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":109
 * 
 * import re
 * import sys             # <<<<<<<<<<<<<<
 * import warnings
 * from re import error as RegexError
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) __PYX_ERR(4, 109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":110
 * import re
 * import sys
 * import warnings             # <<<<<<<<<<<<<<
 * from re import error as RegexError
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_warnings, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_1) < 0) __PYX_ERR(4, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":111
 * import sys
 * import warnings
 * from re import error as RegexError             # <<<<<<<<<<<<<<
 * 
 * error = re.error
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_error);
  __Pyx_GIVEREF(__pyx_n_s_error);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_re, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RegexError, __pyx_t_1) < 0) __PYX_ERR(4, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":113
 * from re import error as RegexError
 * 
 * error = re.error             # <<<<<<<<<<<<<<
 * 
 * # Import re flags to be compatible.
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_re); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_error, __pyx_t_1) < 0) __PYX_ERR(4, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":116
 * 
 * # Import re flags to be compatible.
 * I, M, S, U, X, L = re.I, re.M, re.S, re.U, re.X, re.L             # <<<<<<<<<<<<<<
 * IGNORECASE = re.IGNORECASE
 * MULTILINE = re.MULTILINE
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_re); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_I); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_re); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_M); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_re); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_S); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_re); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_U); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_re); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_X); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_re); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_L); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_I, __pyx_t_2) < 0) __PYX_ERR(4, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_M, __pyx_t_3) < 0) __PYX_ERR(4, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_S, __pyx_t_4) < 0) __PYX_ERR(4, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_U, __pyx_t_5) < 0) __PYX_ERR(4, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_X, __pyx_t_6) < 0) __PYX_ERR(4, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_L, __pyx_t_7) < 0) __PYX_ERR(4, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "re2.pyx":117
 * # Import re flags to be compatible.
 * I, M, S, U, X, L = re.I, re.M, re.S, re.U, re.X, re.L
 * IGNORECASE = re.IGNORECASE             # <<<<<<<<<<<<<<
 * MULTILINE = re.MULTILINE
 * DOTALL = re.DOTALL
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_re); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_IGNORECASE); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IGNORECASE, __pyx_t_6) < 0) __PYX_ERR(4, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":118
 * I, M, S, U, X, L = re.I, re.M, re.S, re.U, re.X, re.L
 * IGNORECASE = re.IGNORECASE
 * MULTILINE = re.MULTILINE             # <<<<<<<<<<<<<<
 * DOTALL = re.DOTALL
 * UNICODE = re.UNICODE
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_re); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_MULTILINE); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MULTILINE, __pyx_t_7) < 0) __PYX_ERR(4, 118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "re2.pyx":119
 * IGNORECASE = re.IGNORECASE
 * MULTILINE = re.MULTILINE
 * DOTALL = re.DOTALL             # <<<<<<<<<<<<<<
 * UNICODE = re.UNICODE
 * VERBOSE = re.VERBOSE
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_re); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_DOTALL); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DOTALL, __pyx_t_6) < 0) __PYX_ERR(4, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":120
 * MULTILINE = re.MULTILINE
 * DOTALL = re.DOTALL
 * UNICODE = re.UNICODE             # <<<<<<<<<<<<<<
 * VERBOSE = re.VERBOSE
 * LOCALE = re.LOCALE
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_re); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_UNICODE); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UNICODE, __pyx_t_7) < 0) __PYX_ERR(4, 120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "re2.pyx":121
 * DOTALL = re.DOTALL
 * UNICODE = re.UNICODE
 * VERBOSE = re.VERBOSE             # <<<<<<<<<<<<<<
 * LOCALE = re.LOCALE
 * DEBUG = re.DEBUG
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_re); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_VERBOSE); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_VERBOSE, __pyx_t_6) < 0) __PYX_ERR(4, 121, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":122
 * UNICODE = re.UNICODE
 * VERBOSE = re.VERBOSE
 * LOCALE = re.LOCALE             # <<<<<<<<<<<<<<
 * DEBUG = re.DEBUG
 * ASCII = 256  # Python 3
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_re); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_LOCALE); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LOCALE, __pyx_t_7) < 0) __PYX_ERR(4, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "re2.pyx":123
 * VERBOSE = re.VERBOSE
 * LOCALE = re.LOCALE
 * DEBUG = re.DEBUG             # <<<<<<<<<<<<<<
 * ASCII = 256  # Python 3
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_re); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_DEBUG); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEBUG, __pyx_t_6) < 0) __PYX_ERR(4, 123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":124
 * LOCALE = re.LOCALE
 * DEBUG = re.DEBUG
 * ASCII = 256  # Python 3             # <<<<<<<<<<<<<<
 * 
 * FALLBACK_QUIETLY = 0
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ASCII, __pyx_int_256) < 0) __PYX_ERR(4, 124, __pyx_L1_error)

  /* "re2.pyx":126
 * ASCII = 256  # Python 3
 * 
 * FALLBACK_QUIETLY = 0             # <<<<<<<<<<<<<<
 * FALLBACK_WARNING = 1
 * FALLBACK_EXCEPTION = 2
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FALLBACK_QUIETLY, __pyx_int_0) < 0) __PYX_ERR(4, 126, __pyx_L1_error)

  /* "re2.pyx":127
 * 
 * FALLBACK_QUIETLY = 0
 * FALLBACK_WARNING = 1             # <<<<<<<<<<<<<<
 * FALLBACK_EXCEPTION = 2
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FALLBACK_WARNING, __pyx_int_1) < 0) __PYX_ERR(4, 127, __pyx_L1_error)

  /* "re2.pyx":128
 * FALLBACK_QUIETLY = 0
 * FALLBACK_WARNING = 1
 * FALLBACK_EXCEPTION = 2             # <<<<<<<<<<<<<<
 * 
 * VERSION = (0, 2, 23)
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FALLBACK_EXCEPTION, __pyx_int_2) < 0) __PYX_ERR(4, 128, __pyx_L1_error)

  /* "re2.pyx":130
 * FALLBACK_EXCEPTION = 2
 * 
 * VERSION = (0, 2, 23)             # <<<<<<<<<<<<<<
 * VERSION_HEX = 0x000217
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_VERSION, __pyx_tuple__20) < 0) __PYX_ERR(4, 130, __pyx_L1_error)

  /* "re2.pyx":131
 * 
 * VERSION = (0, 2, 23)
 * VERSION_HEX = 0x000217             # <<<<<<<<<<<<<<
 * 
 * cdef int _I = I, _M = M, _S = S, _U = U, _X = X, _L = L
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_VERSION_HEX, __pyx_int_535) < 0) __PYX_ERR(4, 131, __pyx_L1_error)

  /* "re2.pyx":133
 * VERSION_HEX = 0x000217
 * 
 * cdef int _I = I, _M = M, _S = S, _U = U, _X = X, _L = L             # <<<<<<<<<<<<<<
 * cdef int current_notification = FALLBACK_QUIETLY
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_I); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_3re2__I = __pyx_t_8;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_M); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_3re2__M = __pyx_t_8;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_S); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_3re2__S = __pyx_t_8;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_U); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_3re2__U = __pyx_t_8;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_X); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_3re2__X = __pyx_t_8;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_L); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_3re2__L = __pyx_t_8;

  /* "re2.pyx":134
 * 
 * cdef int _I = I, _M = M, _S = S, _U = U, _X = X, _L = L
 * cdef int current_notification = FALLBACK_QUIETLY             # <<<<<<<<<<<<<<
 * 
 * # Type of compiled re object from Python stdlib
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_FALLBACK_QUIETLY); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 134, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_3re2_current_notification = __pyx_t_8;

  /* "re2.pyx":137
 * 
 * # Type of compiled re object from Python stdlib
 * SREPattern = type(re.compile(''))             # <<<<<<<<<<<<<<
 * 
 * _cache = {}
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_re); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_compile_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SREPattern, ((PyObject *)Py_TYPE(__pyx_t_6))) < 0) __PYX_ERR(4, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":139
 * SREPattern = type(re.compile(''))
 * 
 * _cache = {}             # <<<<<<<<<<<<<<
 * _cache_repl = {}
 * 
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cache, __pyx_t_6) < 0) __PYX_ERR(4, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":140
 * 
 * _cache = {}
 * _cache_repl = {}             # <<<<<<<<<<<<<<
 * 
 * _MAXCACHE = 100
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cache_repl, __pyx_t_6) < 0) __PYX_ERR(4, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":142
 * _cache_repl = {}
 * 
 * _MAXCACHE = 100             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MAXCACHE, __pyx_int_100) < 0) __PYX_ERR(4, 142, __pyx_L1_error)

  /* "compile.pxi":2
 * 
 * def compile(pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     cachekey = (type(pattern), pattern, flags)
 *     if cachekey in _cache:
 */
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_3re2_1compile, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compile_2, __pyx_t_6) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "compile.pxi":14
 * 
 * 
 * def _compile(object pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     """Compile a regular expression pattern, returning a pattern object."""
 *     def fallback(pattern, flags, error_msg):
 */
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_3re2_3_compile, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compile, __pyx_t_6) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "compile.pxi":115
 * 
 * 
 * def _prepare_pattern(bytes pattern, int flags):             # <<<<<<<<<<<<<<
 *     """Translate pattern to RE2 syntax."""
 *     cdef bytearray result = bytearray()
 */
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_3re2_5_prepare_pattern, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_prepare_pattern, __pyx_t_6) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pattern.pxi":591
 * 
 * 
 * class PythonRePattern:             # <<<<<<<<<<<<<<
 *     """A wrapper for re.Pattern to support the extra methods defined by re2
 *     (contains, count)."""
 */
  __pyx_t_6 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_PythonRePattern, __pyx_n_s_PythonRePattern, (PyObject *) NULL, __pyx_n_s_re2, __pyx_kp_s_A_wrapper_for_re_Pattern_to_supp); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "pattern.pxi":594
 *     """A wrapper for re.Pattern to support the extra methods defined by re2
 *     (contains, count)."""
 *     def __init__(self, pattern, flags=None):             # <<<<<<<<<<<<<<
 *         self._pattern = re.compile(pattern, flags)
 *         self.pattern = pattern
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_3re2_15PythonRePattern_1__init__, 0, __pyx_n_s_PythonRePattern___init, NULL, __pyx_n_s_re2, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__30);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_init, __pyx_t_7) < 0) __PYX_ERR(1, 594, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pattern.pxi":601
 *         self.groups = self._pattern.groups
 * 
 *     def contains(self, string):             # <<<<<<<<<<<<<<
 *         return bool(self._pattern.search(string))
 * 
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_3re2_15PythonRePattern_3contains, 0, __pyx_n_s_PythonRePattern_contains, NULL, __pyx_n_s_re2, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_contains, __pyx_t_7) < 0) __PYX_ERR(1, 601, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pattern.pxi":604
 *         return bool(self._pattern.search(string))
 * 
 *     def count(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return len(self._pattern.findall(string, pos, endpos))
 * 
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_3re2_15PythonRePattern_5count, 0, __pyx_n_s_PythonRePattern_count, NULL, __pyx_n_s_re2, __pyx_d, ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__35);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_count, __pyx_t_7) < 0) __PYX_ERR(1, 604, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pattern.pxi":607
 *         return len(self._pattern.findall(string, pos, endpos))
 * 
 *     def findall(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.findall(string, pos, endpos)
 * 
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_3re2_15PythonRePattern_7findall, 0, __pyx_n_s_PythonRePattern_findall, NULL, __pyx_n_s_re2, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__38);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_findall, __pyx_t_7) < 0) __PYX_ERR(1, 607, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pattern.pxi":610
 *         return self._pattern.findall(string, pos, endpos)
 * 
 *     def finditer(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.finditer(string, pos, endpos)
 * 
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_3re2_15PythonRePattern_9finditer, 0, __pyx_n_s_PythonRePattern_finditer, NULL, __pyx_n_s_re2, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__41);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_finditer_2, __pyx_t_7) < 0) __PYX_ERR(1, 610, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pattern.pxi":613
 *         return self._pattern.finditer(string, pos, endpos)
 * 
 *     def fullmatch(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.fullmatch(string, pos, endpos)
 * 
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_3re2_15PythonRePattern_11fullmatch, 0, __pyx_n_s_PythonRePattern_fullmatch, NULL, __pyx_n_s_re2, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__44);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_fullmatch, __pyx_t_7) < 0) __PYX_ERR(1, 613, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pattern.pxi":616
 *         return self._pattern.fullmatch(string, pos, endpos)
 * 
 *     def match(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.match(string, pos, endpos)
 * 
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_3re2_15PythonRePattern_13match, 0, __pyx_n_s_PythonRePattern_match, NULL, __pyx_n_s_re2, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__47);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_match, __pyx_t_7) < 0) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pattern.pxi":619
 *         return self._pattern.match(string, pos, endpos)
 * 
 *     def scanner(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.scanner(string, pos, endpos)
 * 
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_3re2_15PythonRePattern_15scanner, 0, __pyx_n_s_PythonRePattern_scanner, NULL, __pyx_n_s_re2, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__50);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_scanner, __pyx_t_7) < 0) __PYX_ERR(1, 619, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pattern.pxi":622
 *         return self._pattern.scanner(string, pos, endpos)
 * 
 *     def search(self, string, pos=0, endpos=9223372036854775807):             # <<<<<<<<<<<<<<
 *         return self._pattern.search(string, pos, endpos)
 * 
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_3re2_15PythonRePattern_17search, 0, __pyx_n_s_PythonRePattern_search, NULL, __pyx_n_s_re2, __pyx_d, ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__53);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_search, __pyx_t_7) < 0) __PYX_ERR(1, 622, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pattern.pxi":625
 *         return self._pattern.search(string, pos, endpos)
 * 
 *     def split(self, string, maxsplit=0):             # <<<<<<<<<<<<<<
 *         return self._pattern.split(string, maxsplit)
 * 
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_3re2_15PythonRePattern_19split, 0, __pyx_n_s_PythonRePattern_split, NULL, __pyx_n_s_re2, __pyx_d, ((PyObject *)__pyx_codeobj__55)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__56);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_split, __pyx_t_7) < 0) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pattern.pxi":628
 *         return self._pattern.split(string, maxsplit)
 * 
 *     def sub(self, repl, string, count=0):             # <<<<<<<<<<<<<<
 *         return self._pattern.sub(repl, string, count)
 * 
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_3re2_15PythonRePattern_21sub, 0, __pyx_n_s_PythonRePattern_sub, NULL, __pyx_n_s_re2, __pyx_d, ((PyObject *)__pyx_codeobj__58)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__59);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_sub, __pyx_t_7) < 0) __PYX_ERR(1, 628, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pattern.pxi":631
 *         return self._pattern.sub(repl, string, count)
 * 
 *     def subn(self, repl, string, count=0):             # <<<<<<<<<<<<<<
 *         return self._pattern.subn(repl, string, count)
 * 
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_3re2_15PythonRePattern_23subn, 0, __pyx_n_s_PythonRePattern_subn, NULL, __pyx_n_s_re2, __pyx_d, ((PyObject *)__pyx_codeobj__61)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__62);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_subn, __pyx_t_7) < 0) __PYX_ERR(1, 631, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pattern.pxi":634
 *         return self._pattern.subn(repl, string, count)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return repr(self._pattern)
 * 
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_3re2_15PythonRePattern_25__repr__, 0, __pyx_n_s_PythonRePattern___repr, NULL, __pyx_n_s_re2, __pyx_d, ((PyObject *)__pyx_codeobj__64)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_repr, __pyx_t_7) < 0) __PYX_ERR(1, 634, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pattern.pxi":637
 *         return repr(self._pattern)
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return (self, (self.pattern, self.flags))
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_3re2_15PythonRePattern_27__reduce__, 0, __pyx_n_s_PythonRePattern___reduce, NULL, __pyx_n_s_re2, __pyx_d, ((PyObject *)__pyx_codeobj__66)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_reduce, __pyx_t_7) < 0) __PYX_ERR(1, 637, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pattern.pxi":591
 * 
 * 
 * class PythonRePattern:             # <<<<<<<<<<<<<<
 *     """A wrapper for re.Pattern to support the extra methods defined by re2
 *     (contains, count)."""
 */
  __pyx_t_7 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_PythonRePattern, __pyx_empty_tuple, __pyx_t_6, NULL, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PythonRePattern, __pyx_t_7) < 0) __PYX_ERR(1, 591, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":150
 * 
 * 
 * def purge():             # <<<<<<<<<<<<<<
 *     """Clear the regular expression caches."""
 *     _cache.clear()
 */
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_3re2_7purge, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_purge, __pyx_t_6) < 0) __PYX_ERR(4, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":156
 * 
 * 
 * def search(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Scan through string looking for a match to the pattern, returning
 *     a ``Match`` object or none if no match was found."""
 */
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_3re2_9search, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_search, __pyx_t_6) < 0) __PYX_ERR(4, 156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":162
 * 
 * 
 * def match(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Try to apply the pattern at the start of the string, returning
 *     a ``Match`` object, or ``None`` if no match was found."""
 */
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_3re2_11match, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_match, __pyx_t_6) < 0) __PYX_ERR(4, 162, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":168
 * 
 * 
 * def fullmatch(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Try to apply the pattern to the entire string, returning
 *     a ``Match`` object, or ``None`` if no match was found."""
 */
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_3re2_13fullmatch, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fullmatch, __pyx_t_6) < 0) __PYX_ERR(4, 168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":174
 * 
 * 
 * def contains(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Scan through string looking for a match to the pattern, returning
 *     True or False."""
 */
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_3re2_15contains, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_contains, __pyx_t_6) < 0) __PYX_ERR(4, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":180
 * 
 * 
 * def finditer(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Yield all non-overlapping matches in the string.
 * 
 */
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_3re2_17finditer, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_finditer_2, __pyx_t_6) < 0) __PYX_ERR(4, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":188
 * 
 * 
 * def findall(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Return a list of all non-overlapping matches in the string.
 * 
 */
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_3re2_19findall, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_findall, __pyx_t_6) < 0) __PYX_ERR(4, 188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":196
 * 
 * 
 * def count(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """Return number of non-overlapping matches in the string.
 * 
 */
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_3re2_21count, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_count, __pyx_t_6) < 0) __PYX_ERR(4, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":203
 * 
 * 
 * def split(pattern, string, int maxsplit=0, int flags=0):             # <<<<<<<<<<<<<<
 *     """Split the source string by the occurrences of the pattern,
 *     returning a list containing the resulting substrings."""
 */
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_3re2_23split, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_split, __pyx_t_6) < 0) __PYX_ERR(4, 203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":209
 * 
 * 
 * def sub(pattern, repl, string, int count=0, int flags=0):             # <<<<<<<<<<<<<<
 *     """Return the string obtained by replacing the leftmost
 *     non-overlapping occurrences of the pattern in string by the
 */
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_3re2_25sub, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sub, __pyx_t_6) < 0) __PYX_ERR(4, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":219
 * 
 * 
 * def subn(pattern, repl, string, int count=0, int flags=0):             # <<<<<<<<<<<<<<
 *     """Return a 2-tuple containing ``(new_string, number)``.
 *     new_string is the string obtained by replacing the leftmost
 */
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_3re2_27subn, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_subn, __pyx_t_6) < 0) __PYX_ERR(4, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":231
 * 
 * 
 * def escape(pattern):             # <<<<<<<<<<<<<<
 *     """Escape all non-alphanumeric characters in pattern."""
 *     cdef bint uni = isinstance(pattern, unicode)
 */
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_3re2_29escape, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_escape, __pyx_t_6) < 0) __PYX_ERR(4, 231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":256
 * 
 * 
 * class BackreferencesException(Exception):             # <<<<<<<<<<<<<<
 *     """Search pattern contains backreferences."""
 *     pass
 */
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __Pyx_GIVEREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __pyx_t_7 = __Pyx_CalculateMetaclass(NULL, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_Py3MetaclassPrepare(__pyx_t_7, __pyx_t_6, __pyx_n_s_BackreferencesException, __pyx_n_s_BackreferencesException, (PyObject *) NULL, __pyx_n_s_re2, __pyx_kp_s_Search_pattern_contains_backrefe); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_7, __pyx_n_s_BackreferencesException, __pyx_t_6, __pyx_t_5, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BackreferencesException, __pyx_t_4) < 0) __PYX_ERR(4, 256, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":261
 * 
 * 
 * class CharClassProblemException(Exception):             # <<<<<<<<<<<<<<
 *     """Search pattern contains unsupported character class."""
 *     pass
 */
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __Pyx_GIVEREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __pyx_t_7 = __Pyx_CalculateMetaclass(NULL, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_Py3MetaclassPrepare(__pyx_t_7, __pyx_t_6, __pyx_n_s_CharClassProblemException, __pyx_n_s_CharClassProblemException, (PyObject *) NULL, __pyx_n_s_re2, __pyx_kp_s_Search_pattern_contains_unsuppor); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_7, __pyx_n_s_CharClassProblemException, __pyx_t_6, __pyx_t_5, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CharClassProblemException, __pyx_t_4) < 0) __PYX_ERR(4, 261, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":266
 * 
 * 
 * def set_fallback_notification(level):             # <<<<<<<<<<<<<<
 *     """Set the fallback notification to a level; one of:
 *         FALLBACK_QUIETLY
 */
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_3re2_31set_fallback_notification, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_fallback_notification, __pyx_t_6) < 0) __PYX_ERR(4, 266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":452
 * 
 * 
 * __all__ = [             # <<<<<<<<<<<<<<
 *         # exceptions
 *         'BackreferencesException', 'CharClassProblemException',
 */
  __pyx_t_6 = PyList_New(38); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_n_u_BackreferencesException);
  __Pyx_GIVEREF(__pyx_n_u_BackreferencesException);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_n_u_BackreferencesException);
  __Pyx_INCREF(__pyx_n_u_CharClassProblemException);
  __Pyx_GIVEREF(__pyx_n_u_CharClassProblemException);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_n_u_CharClassProblemException);
  __Pyx_INCREF(__pyx_n_u_RegexError);
  __Pyx_GIVEREF(__pyx_n_u_RegexError);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_n_u_RegexError);
  __Pyx_INCREF(__pyx_n_u_error);
  __Pyx_GIVEREF(__pyx_n_u_error);
  PyList_SET_ITEM(__pyx_t_6, 3, __pyx_n_u_error);
  __Pyx_INCREF(__pyx_n_u_FALLBACK_EXCEPTION);
  __Pyx_GIVEREF(__pyx_n_u_FALLBACK_EXCEPTION);
  PyList_SET_ITEM(__pyx_t_6, 4, __pyx_n_u_FALLBACK_EXCEPTION);
  __Pyx_INCREF(__pyx_n_u_FALLBACK_QUIETLY);
  __Pyx_GIVEREF(__pyx_n_u_FALLBACK_QUIETLY);
  PyList_SET_ITEM(__pyx_t_6, 5, __pyx_n_u_FALLBACK_QUIETLY);
  __Pyx_INCREF(__pyx_n_u_FALLBACK_WARNING);
  __Pyx_GIVEREF(__pyx_n_u_FALLBACK_WARNING);
  PyList_SET_ITEM(__pyx_t_6, 6, __pyx_n_u_FALLBACK_WARNING);
  __Pyx_INCREF(__pyx_n_u_DEBUG);
  __Pyx_GIVEREF(__pyx_n_u_DEBUG);
  PyList_SET_ITEM(__pyx_t_6, 7, __pyx_n_u_DEBUG);
  __Pyx_INCREF(__pyx_n_u_S);
  __Pyx_GIVEREF(__pyx_n_u_S);
  PyList_SET_ITEM(__pyx_t_6, 8, __pyx_n_u_S);
  __Pyx_INCREF(__pyx_n_u_DOTALL);
  __Pyx_GIVEREF(__pyx_n_u_DOTALL);
  PyList_SET_ITEM(__pyx_t_6, 9, __pyx_n_u_DOTALL);
  __Pyx_INCREF(__pyx_n_u_I);
  __Pyx_GIVEREF(__pyx_n_u_I);
  PyList_SET_ITEM(__pyx_t_6, 10, __pyx_n_u_I);
  __Pyx_INCREF(__pyx_n_u_IGNORECASE);
  __Pyx_GIVEREF(__pyx_n_u_IGNORECASE);
  PyList_SET_ITEM(__pyx_t_6, 11, __pyx_n_u_IGNORECASE);
  __Pyx_INCREF(__pyx_n_u_L);
  __Pyx_GIVEREF(__pyx_n_u_L);
  PyList_SET_ITEM(__pyx_t_6, 12, __pyx_n_u_L);
  __Pyx_INCREF(__pyx_n_u_LOCALE);
  __Pyx_GIVEREF(__pyx_n_u_LOCALE);
  PyList_SET_ITEM(__pyx_t_6, 13, __pyx_n_u_LOCALE);
  __Pyx_INCREF(__pyx_n_u_M);
  __Pyx_GIVEREF(__pyx_n_u_M);
  PyList_SET_ITEM(__pyx_t_6, 14, __pyx_n_u_M);
  __Pyx_INCREF(__pyx_n_u_MULTILINE);
  __Pyx_GIVEREF(__pyx_n_u_MULTILINE);
  PyList_SET_ITEM(__pyx_t_6, 15, __pyx_n_u_MULTILINE);
  __Pyx_INCREF(__pyx_n_u_U);
  __Pyx_GIVEREF(__pyx_n_u_U);
  PyList_SET_ITEM(__pyx_t_6, 16, __pyx_n_u_U);
  __Pyx_INCREF(__pyx_n_u_UNICODE);
  __Pyx_GIVEREF(__pyx_n_u_UNICODE);
  PyList_SET_ITEM(__pyx_t_6, 17, __pyx_n_u_UNICODE);
  __Pyx_INCREF(__pyx_n_u_X);
  __Pyx_GIVEREF(__pyx_n_u_X);
  PyList_SET_ITEM(__pyx_t_6, 18, __pyx_n_u_X);
  __Pyx_INCREF(__pyx_n_u_VERBOSE);
  __Pyx_GIVEREF(__pyx_n_u_VERBOSE);
  PyList_SET_ITEM(__pyx_t_6, 19, __pyx_n_u_VERBOSE);
  __Pyx_INCREF(__pyx_n_u_VERSION);
  __Pyx_GIVEREF(__pyx_n_u_VERSION);
  PyList_SET_ITEM(__pyx_t_6, 20, __pyx_n_u_VERSION);
  __Pyx_INCREF(__pyx_n_u_VERSION_HEX);
  __Pyx_GIVEREF(__pyx_n_u_VERSION_HEX);
  PyList_SET_ITEM(__pyx_t_6, 21, __pyx_n_u_VERSION_HEX);
  __Pyx_INCREF(__pyx_n_u_Match);
  __Pyx_GIVEREF(__pyx_n_u_Match);
  PyList_SET_ITEM(__pyx_t_6, 22, __pyx_n_u_Match);
  __Pyx_INCREF(__pyx_n_u_Pattern);
  __Pyx_GIVEREF(__pyx_n_u_Pattern);
  PyList_SET_ITEM(__pyx_t_6, 23, __pyx_n_u_Pattern);
  __Pyx_INCREF(__pyx_n_u_SREPattern);
  __Pyx_GIVEREF(__pyx_n_u_SREPattern);
  PyList_SET_ITEM(__pyx_t_6, 24, __pyx_n_u_SREPattern);
  __Pyx_INCREF(__pyx_n_u_compile_2);
  __Pyx_GIVEREF(__pyx_n_u_compile_2);
  PyList_SET_ITEM(__pyx_t_6, 25, __pyx_n_u_compile_2);
  __Pyx_INCREF(__pyx_n_u_count);
  __Pyx_GIVEREF(__pyx_n_u_count);
  PyList_SET_ITEM(__pyx_t_6, 26, __pyx_n_u_count);
  __Pyx_INCREF(__pyx_n_u_escape);
  __Pyx_GIVEREF(__pyx_n_u_escape);
  PyList_SET_ITEM(__pyx_t_6, 27, __pyx_n_u_escape);
  __Pyx_INCREF(__pyx_n_u_findall);
  __Pyx_GIVEREF(__pyx_n_u_findall);
  PyList_SET_ITEM(__pyx_t_6, 28, __pyx_n_u_findall);
  __Pyx_INCREF(__pyx_n_u_finditer_2);
  __Pyx_GIVEREF(__pyx_n_u_finditer_2);
  PyList_SET_ITEM(__pyx_t_6, 29, __pyx_n_u_finditer_2);
  __Pyx_INCREF(__pyx_n_u_fullmatch);
  __Pyx_GIVEREF(__pyx_n_u_fullmatch);
  PyList_SET_ITEM(__pyx_t_6, 30, __pyx_n_u_fullmatch);
  __Pyx_INCREF(__pyx_n_u_match);
  __Pyx_GIVEREF(__pyx_n_u_match);
  PyList_SET_ITEM(__pyx_t_6, 31, __pyx_n_u_match);
  __Pyx_INCREF(__pyx_n_u_purge);
  __Pyx_GIVEREF(__pyx_n_u_purge);
  PyList_SET_ITEM(__pyx_t_6, 32, __pyx_n_u_purge);
  __Pyx_INCREF(__pyx_n_u_search);
  __Pyx_GIVEREF(__pyx_n_u_search);
  PyList_SET_ITEM(__pyx_t_6, 33, __pyx_n_u_search);
  __Pyx_INCREF(__pyx_n_u_split);
  __Pyx_GIVEREF(__pyx_n_u_split);
  PyList_SET_ITEM(__pyx_t_6, 34, __pyx_n_u_split);
  __Pyx_INCREF(__pyx_n_u_sub);
  __Pyx_GIVEREF(__pyx_n_u_sub);
  PyList_SET_ITEM(__pyx_t_6, 35, __pyx_n_u_sub);
  __Pyx_INCREF(__pyx_n_u_subn);
  __Pyx_GIVEREF(__pyx_n_u_subn);
  PyList_SET_ITEM(__pyx_t_6, 36, __pyx_n_u_subn);
  __Pyx_INCREF(__pyx_n_u_set_fallback_notification);
  __Pyx_GIVEREF(__pyx_n_u_set_fallback_notification);
  PyList_SET_ITEM(__pyx_t_6, 37, __pyx_n_u_set_fallback_notification);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_t_6) < 0) __PYX_ERR(4, 452, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "re2.pyx":1
 * # cython: infer_types(False)             # <<<<<<<<<<<<<<
 * r"""Regular expressions using Google's RE2 engine.
 * 
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_6) < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init re2", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init re2");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* ByteArrayAppend */
static CYTHON_INLINE int __Pyx_PyByteArray_Append(PyObject* bytearray, int value) {
    PyObject *pyval, *retval;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(__Pyx_is_valid_index(value, 256))) {
        Py_ssize_t n = Py_SIZE(bytearray);
        if (likely(n != PY_SSIZE_T_MAX)) {
            if (unlikely(PyByteArray_Resize(bytearray, n + 1) < 0))
                return -1;
            PyByteArray_AS_STRING(bytearray)[n] = value;
            return 0;
        }
    } else {
        PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)");
        return -1;
    }
#endif
    pyval = PyInt_FromLong(value);
    if (unlikely(!pyval))
        return -1;
    retval = __Pyx_PyObject_CallMethod1(bytearray, __pyx_n_s_append, pyval);
    Py_DECREF(pyval);
    if (unlikely(!retval))
        return -1;
    Py_DECREF(retval);
    return 0;
}

/* decode_c_string */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* IterNext */
static PyObject *__Pyx_PyIter_Next2Default(PyObject* defval) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_Occurred();
    if (unlikely(exc_type)) {
        if (!defval || unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return NULL;
        __Pyx_PyErr_Clear();
        Py_INCREF(defval);
        return defval;
    }
    if (defval) {
        Py_INCREF(defval);
        return defval;
    }
    __Pyx_PyErr_SetNone(PyExc_StopIteration);
    return NULL;
}
static void __Pyx_PyIter_Next_ErrorNoIterator(PyObject *iterator) {
    PyErr_Format(PyExc_TypeError,
        "%.200s object is not an iterator", Py_TYPE(iterator)->tp_name);
}
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject* iterator, PyObject* defval) {
    PyObject* next;
    iternextfunc iternext = Py_TYPE(iterator)->tp_iternext;
    if (likely(iternext)) {
#if CYTHON_USE_TYPE_SLOTS
        next = iternext(iterator);
        if (likely(next))
            return next;
        #if PY_VERSION_HEX >= 0x02070000
        if (unlikely(iternext == &_PyObject_NextNotImplemented))
            return NULL;
        #endif
#else
        next = PyIter_Next(iterator);
        if (likely(next))
            return next;
#endif
    } else if (CYTHON_USE_TYPE_SLOTS || unlikely(!PyIter_Check(iterator))) {
        __Pyx_PyIter_Next_ErrorNoIterator(iterator);
        return NULL;
    }
#if !CYTHON_USE_TYPE_SLOTS
    else {
        next = PyIter_Next(iterator);
        if (likely(next))
            return next;
    }
#endif
    return __Pyx_PyIter_Next2Default(defval);
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* decode_c_bytes */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define GCC_DIAGNOSTIC
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* SliceTupleAndList */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_crop_slice(Py_ssize_t* _start, Py_ssize_t* _stop, Py_ssize_t* _length) {
    Py_ssize_t start = *_start, stop = *_stop, length = *_length;
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    *_length = stop - start;
    *_start = start;
    *_stop = stop;
}
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject** CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyList_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyList_New(0);
    dest = PyList_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyListObject*)src)->ob_item + start,
        ((PyListObject*)dest)->ob_item,
        length);
    return dest;
}
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyTuple_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyTuple_New(0);
    dest = PyTuple_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyTupleObject*)src)->ob_item + start,
        ((PyTupleObject*)dest)->ob_item,
        length);
    return dest;
}
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* ByteArrayAppendObject */
static CYTHON_INLINE int __Pyx_PyByteArray_AppendObject(PyObject* bytearray, PyObject* value) {
    Py_ssize_t ival;
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyString_Check(value))) {
        if (unlikely(PyString_GET_SIZE(value) != 1)) {
            PyErr_SetString(PyExc_ValueError, "string must be of size 1");
            return -1;
        }
        ival = (unsigned char) (PyString_AS_STRING(value)[0]);
    } else
#endif
#if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(value)) && likely(Py_SIZE(value) == 1 || Py_SIZE(value) == 0)) {
        if (Py_SIZE(value) == 0) {
            ival = 0;
        } else {
            ival = ((PyLongObject*)value)->ob_digit[0];
            if (unlikely(ival > 255)) goto bad_range;
        }
    } else
#endif
    {
        ival = __Pyx_PyIndex_AsSsize_t(value);
        if (unlikely(!__Pyx_is_valid_index(ival, 256))) {
            if (ival == -1 && PyErr_Occurred())
                return -1;
            goto bad_range;
        }
    }
    return __Pyx_PyByteArray_Append(bytearray, ival);
bad_range:
    PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)");
    return -1;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AndObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
            return PyInt_FromLong(a & b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_and(op1, op2);
            }
        }
                x = a & b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla & llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    return (inplace ? PyNumber_InPlaceAnd : PyNumber_And)(op1, op2);
}
#endif

/* UnicodeAsUCS4 */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject* x) {
   Py_ssize_t length;
   #if CYTHON_PEP393_ENABLED
   length = PyUnicode_GET_LENGTH(x);
   if (likely(length == 1)) {
       return PyUnicode_READ_CHAR(x, 0);
   }
   #else
   length = PyUnicode_GET_SIZE(x);
   if (likely(length == 1)) {
       return PyUnicode_AS_UNICODE(x)[0];
   }
   #if Py_UNICODE_SIZE == 2
   else if (PyUnicode_GET_SIZE(x) == 2) {
       Py_UCS4 high_val = PyUnicode_AS_UNICODE(x)[0];
       if (high_val >= 0xD800 && high_val <= 0xDBFF) {
           Py_UCS4 low_val = PyUnicode_AS_UNICODE(x)[1];
           if (low_val >= 0xDC00 && low_val <= 0xDFFF) {
               return 0x10000 + (((high_val & ((1<<10)-1)) << 10) | (low_val & ((1<<10)-1)));
           }
       }
   }
   #endif
   #endif
   PyErr_Format(PyExc_ValueError,
                "only single character unicode strings can be converted to Py_UCS4, "
                "got length %" CYTHON_FORMAT_SSIZE_T "d", length);
   return (Py_UCS4)-1;
}

/* object_ord */
static long __Pyx__PyObject_Ord(PyObject* c) {
    Py_ssize_t size;
    if (PyBytes_Check(c)) {
        size = PyBytes_GET_SIZE(c);
        if (likely(size == 1)) {
            return (unsigned char) PyBytes_AS_STRING(c)[0];
        }
#if PY_MAJOR_VERSION < 3
    } else if (PyUnicode_Check(c)) {
        return (long)__Pyx_PyUnicode_AsPy_UCS4(c);
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    } else if (PyByteArray_Check(c)) {
        size = PyByteArray_GET_SIZE(c);
        if (likely(size == 1)) {
            return (unsigned char) PyByteArray_AS_STRING(c)[0];
        }
#endif
    } else {
        PyErr_Format(PyExc_TypeError,
            "ord() expected string of length 1, but %.200s found", c->ob_type->tp_name);
        return (long)(Py_UCS4)-1;
    }
    PyErr_Format(PyExc_TypeError,
        "ord() expected a character, but string of length %zd found", size);
    return (long)(Py_UCS4)-1;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* StringJoin */
#if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_char(unsigned char value) {
    const unsigned char neg_one = (unsigned char) ((unsigned char) 0 - (unsigned char) 1), const_zero = (unsigned char) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned char),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ptrdiff_t(ptrdiff_t value) {
    const ptrdiff_t neg_one = (ptrdiff_t) ((ptrdiff_t) 0 - (ptrdiff_t) 1), const_zero = (ptrdiff_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ptrdiff_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ptrdiff_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ptrdiff_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ptrdiff_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ptrdiff_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ptrdiff_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value) {
    const char neg_one = (char) ((char) 0 - (char) 1), const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(char),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* BytesContains */
static CYTHON_INLINE int __Pyx_BytesContains(PyObject* bytes, char character) {
    const Py_ssize_t length = PyBytes_GET_SIZE(bytes);
    char* char_start = PyBytes_AS_STRING(bytes);
    return memchr(char_start, (unsigned char)character, (size_t)length) != NULL;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
    const char neg_one = (char) ((char) 0 - (char) 1), const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
